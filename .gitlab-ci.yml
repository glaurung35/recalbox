# GitLab CI configuration file
#
# To run this locally (requires `gitlab-runner`):
#   $ gitlab-runner exec docker <job_name>

default:
  image: docker:latest

.only-default:
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: $CI_COMMIT_TAG

stages:
  - lint
  - build
  - release

variables:
  GIT_SUBMODULE_STRATEGY: none

# Lint

.lint_definition:
  stage: lint
  variables:
    GIT_SUBMODULE_STRATEGY: none
  extends: .only-default

lint package license:
  extends: .lint_definition
  script:
    - apk update && apk add bash
    - bash test/lint/package-licenses.sh

lint config-files:
  extends: .lint_definition
  before_script:
    - apk add --update --no-cache libxml2-utils
  script: test/lint/config-files

lint buildroot:
  extends: .lint_definition
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  image: python:3-alpine
  before_script:
    - pip install six
    - pip install python-magic
    - apk update && apk add libmagic
  script: test/lint/buildroot

lint commits:
  extends: .lint_definition
  image: node:18
  before_script:
    - npm install -g @commitlint/cli@17.0.0 @commitlint/config-conventional@17.0.0 @commitlint/types@17.0.0 @commitlint/read@17.0.0 @commitlint/load@17.0.0 @commitlint/lint@17.0.0 @commitlint/format@17.0.0
  script: test/lint/commits

# Test
tests configgen:
  extends: .lint_definition
  stage: lint
  image: python:3.11-slim
  rules:
    - !reference [.only-default, rules]
      changes:
        - projects/configgen/**/*
  script:
    - apt update && apt -y install libevdev2
    - cd projects/configgen
    - echo "Installing dependencies"
    - pip install -r requirements.txt
    - echo "Running unittests"
    - export PYTHONPATH=$PYTHONPATH:$(pwd) && pytest --cov=configgen
    - echo "Building configgen"
    - python setup.py install

tests emulationstation:
  extends: .lint_definition
  stage: lint
  image: docker:latest
  tags:
    - lintstage
  services:
    - docker:dind
  rules:
    - !reference [.only-default, rules]
      changes:
        - projects/frontend/**/*
  script:
    - cd projects/frontend
    - docker build .
  artifacts:
    reports:
      junit: ./**/report.xml

tests buildroot patches:
  stage: lint
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  tags:
    - lintstage
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - package/*/*.patch
        - board/recalbox/patches/*/*.patch
  before_script:
    - apk update && apk add git
  script:
    - export ARCH=rpi4
    - git remote show target || git remote add target "${CI_MERGE_REQUEST_PROJECT_URL}" || exit 0
    - git fetch target "${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
    - docker build -t "recalbox-${ARCH}" .
    - WORKDIR="$(pwd)" OUTPUTDIR="$(pwd)/output"
    - docker run --rm --tmpfs /tmp:exec -v "${WORKDIR}:/work" -v "${OUTPUTDIR}:/work/output" -v "/recalbox-builds/dl:/share/dl" -e "ARCH=${ARCH}" -e "GITLAB_TOKEN_BEEBEM=${GITLAB_TOKEN_BEEBEM}" -e "GITLAB_TOKEN_THEMES=${GITLAB_TOKEN_THEMES}" "recalbox-${ARCH}" make recalbox-${ARCH}_defconfig 2>&1
    - |
      for PKG in $(git diff --name-only "target/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}" | grep -E '^(board/recalbox/patches|package/)' | sed -E 's#board/recalbox/patches/([^/]+)/.*#\1#;s#package/([^/]+)/.*#\1#' | sort | uniq); do
        if [ -f "package/$PKG/Config.in" ] || [ -f "buildroot/package/$PKG/Config.in" ]; then
          echo "Testing patches for $PKG"
          docker run --rm --tmpfs /tmp:exec -v "${WORKDIR}:/work" -v "${OUTPUTDIR}:/work/output" \
                                          -v "/recalbox-builds/dl:/share/dl" -e "ARCH=${ARCH}" \
                                          -e "GITLAB_TOKEN_BEEBEM=${GITLAB_TOKEN_BEEBEM}" \
                                          -e "GITLAB_TOKEN_THEMES=${GITLAB_TOKEN_THEMES}" \
                                          "recalbox-${ARCH}" sh -c "mkdir -p /work/output/host/usr/bin/ && cp /usr/bin/dos2unix /work/output/host/usr/bin/dos2unix && make BR2_DL_DIR=/share/dl $PKG-patch 2>&1" || exit 1
        fi
        if [ -f "package/$PKG/Config.in.host" ] || [ -f "buildroot/package/$PKG/Config.in.host" ]; then
          echo "Testing patches for host $PKG"
          docker run --rm --tmpfs /tmp:exec -v "${WORKDIR}:/work" -v "${OUTPUTDIR}:/work/output" \
                                          -v "/recalbox-builds/dl:/share/dl" -e "ARCH=${ARCH}" \
                                          -e "GITLAB_TOKEN_BEEBEM=${GITLAB_TOKEN_BEEBEM}" \
                                          -e "GITLAB_TOKEN_THEMES=${GITLAB_TOKEN_THEMES}" \
                                          "recalbox-${ARCH}" sh -c "mkdir -p /work/output/host/usr/bin/ && cp /usr/bin/dos2unix /work/output/host/usr/bin/dos2unix && make BR2_DL_DIR=/share/dl "host-${PKG}-patch" 2>&1" || exit 1
        fi
      done

tests nvidia:
  extends: .lint_definition
  stage: lint
  image: python:3.9-slim
  rules:
    - !reference [.only-default, rules]
      changes:
        - projects/recalbox-hardware/videocard/**/*
  script:
    - cd projects/recalbox-hardware/videocard
    - echo "Installing dependencies"
    - pip install -r requirements-dev.txt
    - echo "Running unittests"
    - export PYTHONPATH=$PYTHONPATH:$(pwd) && pytest --cov

# Build

appimage-amd64:
  image: beudbeud/appimage-builder:latest
  stage: build
  script:
    - cd projects/frontend
    - appimage-builder --skip-test
  rules:
    - if: $CI_COMMIT_BRANCH && $FORCE_APPIMAGE == "true"
      when: always
    - when: never
  artifacts:
      paths:
        - 'projects/frontend/*.AppImage*'
      expire_in: 1 week


.build_definition:
  stage: build
  variables:
    ARCH: arch  # to build (no default)
  extends: .only-default
  before_script:
    - apk update && apk add git bash
    - source scripts/release/functions.sh
  script:
    # Version generation
    - set -euo pipefail
    - export RECALBOX_VERSION="${CI_COMMIT_TAG:-$(date '+%Y/%m/%d') ${CI_COMMIT_REF_SLUG} (${CI_PIPELINE_ID})}"
    - cp "${YOUTUBE_API_KEYS}" "./api_keys.json"
    # Release Note generation
    - echo -e "Recalbox ${RECALBOX_VERSION}\n" > /tmp/RELEASE-NOTES.md
    - cp RELEASE-NOTES.md RELEASE-NOTES-FULL.md
    - awk '/^## Version/ { flag=!flag; count+=1; next } flag && count < 2 {print}' RELEASE-NOTES.md >> /tmp/RELEASE-NOTES.md
    - mv /tmp/RELEASE-NOTES.md RELEASE-NOTES.md
    - cat RELEASE-NOTES.md
    # Updates type
    - |
      if echo "${CI_COMMIT_TAG:-""}" | grep -qi "alpha";then
        sed -i "s/^updates.type=.*/updates.type=alpha/g" package/recalbox-system/*/recalbox.conf
      fi
      if echo "${CI_COMMIT_TAG:-""}" | grep -qi "patron";then
        sed -i "s/^updates.type=.*/updates.type=patron/g" package/recalbox-system/*/recalbox.conf
      fi
      if echo "${CI_COMMIT_TAG:-""}" | grep -qi "jamma";then
        sed -i "s/^updates.type=.*/updates.type=jamma/g" package/recalbox-system/*/recalbox.conf
      fi
    # Build
    - WORKDIR="$(pwd)" CCACHE="true" OUTPUTDIR="$(pwd)/output"
    - mkdir -p ${OUTPUTDIR}
    - docker build -t "recalbox-${ARCH}" .
    - docker run --rm --tmpfs /tmp:exec --security-opt seccomp=unconfined -v "${WORKDIR}:/work" -v "${OUTPUTDIR}:/work/output" -v "/recalbox-builds/dl:/share/dl" -v "/recalbox-builds/ccaches/ccache-${ARCH}:/share/ccache" -e "ARCH=${ARCH}" -e "GITLAB_TOKEN_RB5000=${GITLAB_TOKEN_RB5000}" -e "GITLAB_TOKEN_BEEBEM=${GITLAB_TOKEN_BEEBEM}" -e "GITLAB_TOKEN_THEMES=${GITLAB_TOKEN_THEMES}" -e "RECALBOX_VERSION=${RECALBOX_VERSION}" -e "RECALBOX_CCACHE_ENABLED=${CCACHE}" "recalbox-${ARCH}" 2>&1 | tee build.log | grep '>>>' || tac build.log | grep '>>>' -m 1 -B 9999 | tac
    - echo $?
    # Dist
    - export DIST_DIR="dist/${ARCH}"
    - mkdir -p "${DIST_DIR}"
    - cp ${OUTPUTDIR}/images/recalbox/* "${DIST_DIR}"
    - echo "${RECALBOX_VERSION}" > "${DIST_DIR}/recalbox.version"
    - cp ${WORKDIR}/CHANGELOG.md "${DIST_DIR}/recalbox.changelog"
    - cp ${WORKDIR}/RELEASE-NOTES.md "${DIST_DIR}/recalbox.releasenotes"
    - cp ${WORKDIR}/RELEASE-NOTES-FULL.md "${DIST_DIR}/RELEASE-NOTES-FULL.md"
    - uploadFolderToBucket "${AWS_ACCESS_KEY_ID}" "${AWS_SECRET_ACCESS_TOKEN}" "recalbox-builds-artifacts" "dist" "${CI_PIPELINE_ID}"
    # Specific image for RPIZero 1 + GPICASE2w
    - |
      if [ "${ARCH}" == "rpi1" ];then
        sed -i "s/^;case=.*/case=GPi2W/g" output/images/boot-data/recalbox-boot.conf
        docker run --rm --tmpfs /tmp:exec --security-opt seccomp=unconfined -v "${WORKDIR}:/work" -v "${OUTPUTDIR}:/work/output" -v "/recalbox-builds/dl:/share/dl" -v "/recalbox-builds/ccaches/ccache-${ARCH}:/share/ccache" -e "ARCH=${ARCH}" -e "GITLAB_TOKEN_BEEBEM=${GITLAB_TOKEN_BEEBEM}" -e "GITLAB_TOKEN_THEMES=${GITLAB_TOKEN_THEMES}" -e "RECALBOX_VERSION=${RECALBOX_VERSION}" -e "RECALBOX_CCACHE_ENABLED=${CCACHE}" "recalbox-${ARCH}" 2>&1 | tee build.log | grep '>>>' || tac build.log | grep '>>>' -m 1 -B 9999 | tac
        OLD_DIST_DIR="${DIST_DIR}"
        export DIST_DIR="dist/${ARCH}-gpicase2w"
        mkdir -p "${DIST_DIR}"
        cp ${OUTPUTDIR}/images/recalbox/* "${DIST_DIR}"
        echo "${RECALBOX_VERSION}" >> "${DIST_DIR}/recalbox.version"
        cp ${WORKDIR}/CHANGELOG.md "${DIST_DIR}/recalbox.changelog"
        cp ${WORKDIR}/RELEASE-NOTES.md "${DIST_DIR}/recalbox.releasenotes"
        cp ${WORKDIR}/RELEASE-NOTES-FULL.md "${DIST_DIR}/RELEASE-NOTES-FULL.md"
        uploadFolderToBucket "${AWS_ACCESS_KEY_ID}" "${AWS_SECRET_ACCESS_TOKEN}" "recalbox-builds-artifacts" "dist" "${CI_PIPELINE_ID}"
        rm -rf "${DIST_DIR}" "${OLD_DIST_DIR}" "${OUTPUTDIR}"
      else
        rm -rf "${DIST_DIR}" "${OUTPUTDIR}"
      fi
  artifacts:
    name: dist-${ARCH}-${CI_PIPELINE_ID}
    when: always
    paths:
      - build.log
    expire_in: 2 mos
  tags:
    - build


build:
  extends: .build_definition
  when: manual
  parallel:
    matrix:
      - ARCH: 
          - 'x86_64'
          - 'rpi4_64'
          - 'odroidgo2'
          - 'odroidxu4'
          - 'rpi1'
          - 'rpi3'
          - 'rpizero2legacy'
          - 'rpizero2'
          - 'rg353x'
          - 'rpi5_64'

### Release

.release_definition:
  stage: release
  rules:
    - if: '$CI_COMMIT_TAG'
  variables:
    DEPLOY_TYPE: type of the deployment (prod, review)
    BUCKET: Bucket to deploy to
  before_script:
    - source scripts/release/functions.sh
    - apk add --update-cache --no-cache xz bash
  script:
    - downloadBucketFolderTo "${AWS_ACCESS_KEY_ID}" "${AWS_SECRET_ACCESS_TOKEN}" "recalbox-builds-artifacts" "builds" "${CI_PIPELINE_ID}"
    - echo "Force 32 bits to upgrade to 64"
    - |
      if test -d "builds/rpi4";then
        cp -r builds/rpi4_64 builds/rpi4
        mv builds/rpi4/recalbox-rpi4_64.img.xz  builds/rpi4/recalbox-rpi4.img.xz
        mv builds/rpi4/recalbox-rpi4_64.img.xz.sha1  builds/rpi4/recalbox-rpi4.img.xz.sha1
        mv builds/rpi4/recalbox-rpi4_64.tar.xz  builds/rpi4/recalbox-rpi4.tar.xz
        mv builds/rpi4/recalbox-rpi4_64.tar.xz.sha1  builds/rpi4/recalbox-rpi4.tar.xz.sha1
        sed -i "s/recalbox-rpi4_64.tar.xz/recalbox-rpi4.tar.xz/g" builds/rpi4/recalbox-rpi4.tar.xz.sha1
        sed -i "s/recalbox-rpi4_64.img.xz/recalbox-rpi4.img.xz/g" builds/rpi4/recalbox-rpi4.img.xz.sha1
      fi
    - mkdir release
    - ./scripts/release/generate_external_installer_assets.sh --images-dir builds --destination-dir release
    - echo "Releasing files"
    - mv builds/* release
    - uploadFolderToBucket "${AWS_ACCESS_KEY_ID}" "${AWS_SECRET_ACCESS_TOKEN}" "${BUCKET}" "release" "latest"
    - |
      if [ "${DEPLOY_TYPE}" == "prod" ];then
        restartProxiesAfterUpgrade "${PROXIES_SSH_KEY}" "${PROXIES_SSH_USER}"
        copyFolder "${AWS_ACCESS_KEY_ID}" "${AWS_SECRET_ACCESS_TOKEN}" "${BUCKET}/latest/" "${BUCKET}/${CI_COMMIT_TAG}/"
      fi

release prod:
  extends: .release_definition
  rules:
    - if: '$CI_COMMIT_TAG'
      variables:
        $CI_COMMIT_TAG !~ /alpha/i
        $CI_COMMIT_TAG !~ /recalboxrgbdual/i
        $CI_COMMIT_TAG !~ /patron/i
      when: manual
  variables:
    DEPLOY_TYPE: prod
    BUCKET: recalbox-archive-stable
  environment:
    name: prod
    url: https://www.recalbox.com/download/

release alpha:
  extends: .release_definition
  rules:
    - if: '$CI_COMMIT_TAG'
      when: manual
  variables:
    DEPLOY_TYPE: review
    BUCKET: recalbox-archive-alpha
  environment:
    name: alpha/${CI_COMMIT_REF_SLUG}

release patron:
  extends: .release_definition
  rules:
    - if: '$CI_COMMIT_TAG'
      variables:
        CI_COMMIT_TAG =~ /patron/i
      when: manual
  variables:
    DEPLOY_TYPE: review
    BUCKET: recalbox-archive-patron
  environment:
    name: patron/${CI_COMMIT_REF_SLUG}

release jamma:
  extends: .release_definition
  rules:
    - if: '$CI_COMMIT_TAG'
      variables:
        $CI_COMMIT_TAG =~ /jamma/i
      when: manual
  variables:
    DEPLOY_TYPE: review
    BUCKET: recalbox-archive-jamma
  environment:
    name: jamma/${CI_COMMIT_REF_SLUG}

release jamma-early:
  extends: .release_definition
  rules:
    - if: '$CI_COMMIT_TAG'
      variables:
        $CI_COMMIT_TAG =~ /jamma/i
      when: manual
  variables:
    DEPLOY_TYPE: review
    BUCKET: recalbox-archive-jamma-early
  environment:
    name: jamma-early/${CI_COMMIT_REF_SLUG}

release branch:
  extends: .release_definition
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
  variables:
    DEPLOY_TYPE: review
    BUCKET: recalbox-archive-branch
  environment:
    name: branch/${CI_COMMIT_REF_SLUG}
