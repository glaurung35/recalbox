#!/bin/sh

if test "$1" != "start"
then
  exit 0
fi

do_boot_upgrade() {
    BOOTTAR=$1

    # all these files doesn't exist on non rpi platform, so, we have to test them
    BOOTFILES="cmdline.txt config.txt recalbox-boot.conf"
    recallog "UPGRADE: processing /boot"
    
    # backup files to keep
    for BOOTFILE in ${BOOTFILES}
    do
	if test -e "/boot/${BOOTFILE}"
	then
	    cp "/boot/${BOOTFILE}" "/boot/${BOOTFILE}.upgrade" || return 1
	fi
    done

    # upgrade the boot
    if ! (cd /boot && xz -dc < "${BOOTTAR}" | tar mxvf - >> /tmp/upgrade.files)
    then
	return 1
    fi

    # revert backup files
    for BOOTFILE in ${BOOTFILES}
    do
	if test -e "/boot/${BOOTFILE}.upgrade"
	then
	    mv "/boot/${BOOTFILE}.upgrade" "/boot/${BOOTFILE}" || return 1
	fi
    done
    
    # Firsst: need to find the right kernel
    [[ -e /boot/zImage ]] && kernelName="zImage"
    [[ -e /boot/boot/bzImage ]] && kernelName="boot/bzImage"
    if [ "${bootMethod}" == "squashfs" ] ; then
        recallog "UPGRADE: Overwriting /boot/zImage.squashfs"
	cp -f "/boot/${kernelName}" "/boot/${kernelName}.squashfs"
    else
        recallog "UPGRADE: Overwriting /boot/zImage.sd"
        cp -f "/boot/${kernelName}" "/boot/${kernelName}.sd"
    fi
}

do_upgrade() {
    BOOTTAR="/recalbox/share/system/upgrade/boot.tar.xz"
    ROOTTAR="/recalbox/share/system/upgrade/root.tar.xz"
    NB_FILES_TARGET=`cat /recalbox/share/system/upgrade/root.list | wc -l`
    
    cp /bin/busybox /tmp
    # percentage
    touch /tmp/upgrade.files
    (
	echo "title Upgrading the system"
	while true
	do
	    NF=$(/tmp/busybox cat /tmp/upgrade.files | /tmp/busybox wc -l)
	    let NP=${NF}00/${NB_FILES_TARGET}
	    /tmp/busybox echo "percent ${NP}"
	    /tmp/busybox sleep 1

	done
    ) | /recalbox/scripts/shell2fb.py &
    
    # upgrading /boot
    EXIT_CODE=1
    date
    echo "Upgrading /boot"
    if mount -o remount,rw /boot
    then
	if do_boot_upgrade "${BOOTTAR}"
	then
	    EXIT_CODE=0
	fi
	sync
    fi
    test "${EXIT_CODE}" = 1 && return 1 # don't insist if /boot failed to upgrade
    recallog "UPGRADE: /boot successfully upgraded"

    date

    # upgrading /root
    recallog "UPGRADE: processing /"
    EXIT_CODE=1
    date
    echo "Upgrading /"
    if mount -o remount,rw /
    then
	if (cd / && \
	    cp ./etc/fstab ./etc/fstab.upgrade && \
	    xz -dc < "${ROOTTAR}" | tar mxvf - >> /tmp/upgrade.files && \
	    mv ./etc/fstab.upgrade ./etc/fstab)
	then
	    EXIT_CODE=0
	fi
	sync
    fi
    test "${EXIT_CODE}" = 1 && return 1 # don't insist if /root failed to upgrade

    recallog "UPGRADE: / successfully upgraded"
    echo "Upgrade ended successfully."
    date
    return 0
}

do_upgrade_squashfs() {
    # upgrading /boot
    BOOTTAR="/recalbox/share/system/upgrade/boot.tar.xz"
    ROOTTAR="/recalbox/share/system/upgrade/recalbox.squashfs.xz"
    EXIT_CODE=1
    date
    echo "Upgrading /boot"
    if mount -o remount,rw /boot
    then
        if do_boot_upgrade "${BOOTTAR}"
        then
            EXIT_CODE=0
        fi
        sync
    fi
    test "${EXIT_CODE}" = 1 && return 1 # don't insist if /boot failed to upgrade

    date

    # Remove the downgrade file if it exists
    rm /recalbox.squashfs.downgrade 2>/dev/null
    # Start the copy progression
    totalSize=`cat /recalbox/share/system/upgrade/recalbox.squashfs.size`
    (
        echo "title Upgrading the squashfs"
        while true
        do
            sizeCopied=`stat /recalbox.squashfs.upgrade | grep "Size:" | tr -s ' ' | cut -d ' ' -f 3 || echo "0"`
            let sizePercentage=${sizeCopied}00/${totalSize}
            echo "percent ${sizePercentage}"
            sleep 1
        done
    ) | /recalbox/scripts/shell2fb.py &
    # Copy the file
    mount -o remount,rw / && xz -dc --threads=0 < "${ROOTTAR}" > /recalbox.squashfs.upgrade
}

do_boot_kernel_trick() {
    # If the kernel version changes after several updates of squashfs, but sd hasn't been updated for a while,
    # booting SD with the squashfs kernel could cause some problems with tools and modules
    # So we make a copy of the kernel, the initramfs will check and swap them, then reboot.
    
    # Firsst: need to find the right kernel
    [[ -e /boot/zImage ]] && kernelName="zImage"
    [[ -e /boot/boot/bzImage ]] && kernelName="boot/bzImage"

    # Check if / is mounted on a loop
    if `mount | grep -q "on / type squashfs"` ; then
	# YES : copy current kernel to kernel.squashfs
	recallog "UPGRADE: booting from squashfs, backing up kernel to /boot/zImage.squashfs"
	recallog "UPGRADE: zImage.squashfs md5sum is `md5sum /boot/${kernelName}.squashfs`"
	cp -f "/boot/${kernelName}"  "/boot/${kernelName}.squashfs" || return 1
    else
	# NO : copy the current kernel as kernel.sd
	recallog "UPGRADE: booting from SD, backing up kernel to /boot/${kernelName}.sd"
	recallog "UPGRADE: zImage.sd md5sum is `md5sum /boot/${kernelName}.sd`"
	cp -f "/boot/${kernelName}" "/boot/${kernelName}.sd" || return 1
    fi
}

free_space_ok_for_squashfs_copy() {
  space_required=`cat /recalbox/share/system/upgrade/recalbox.squashfs.size`
  free_space=`df -k "/" | tail -1 | awk '{print $4}'`
  # Convert to bytes
  free_space="$((${free_space}*1024))"
  space_left="$((${free_space}-${space_required}))"
  # Let's keep a small overhead of approx. 1MB
  [[ $space_left < 1000000 ]] && reutrn 1
  return 0
}

systemsetting="python /usr/lib/python2.7/site-packages/configgen/settings/recalboxSettings.pyc"
bootMethod="`$systemsetting  -command load -key updates.method`"
# I keep it here if reading /boot works reliably in the initramfs
# bootMethod=`grep "^boot=" /boot/recalbox-boot.conf | cut -d '=' -f 2`
# what about doing an upgrade ?
if test -e "/recalbox/share/system/upgrade/boot.tar.xz" -a -e "/recalbox/share/system/upgrade/root.tar.xz" -a -z "${bootMethod}"
then
    # let's go
    recallog "An upgrade is available (SD), proceeding ..."
    do_boot_kernel_trick
    do_upgrade > /recalbox/share/system/upgrade/upgrade.out.log 2> /recalbox/share/system/upgrade/upgrade.err.log
    
    # remove to not apply it indefinitly, even if it fails
    rm "/recalbox/share/system/upgrade/boot.tar.xz" "/recalbox/share/system/upgrade/root.tar.xz"
    
    # rebooting now
    recallog "UPGRADE: Done ! Rebooting"
    shutdown -r now
elif test -e "/recalbox/share/system/upgrade/recalbox.squashfs.xz" -a "${bootMethod}" == "squashfs" ; then
    if ! free_space_ok_for_squashfs_copy ; then
        recallog "Not enough space left on / for update. Removing to prevent bootloop"
        rm "/recalbox/share/system/upgrade/boot.tar.xz" "/recalbox/share/system/upgrade/recalbox.squashfs.xz"
	return 1
    fi
    recallog "An upgrade is available (SQUASHFS), proceeding ..."
    do_boot_kernel_trick
    do_upgrade_squashfs > /recalbox/share/system/upgrade/upgrade.out.log 2> /recalbox/share/system/upgrade/upgrade.err.log
    
    rm "/recalbox/share/system/upgrade/boot.tar.xz" "/recalbox/share/system/upgrade/recalbox.squashfs.xz"
    recallog "UPGRADE: Done ! Rebooting"
    # rebooting now
    shutdown -r now
fi

# share upgrade, just unzip share.zip from upgrade, no need to reboot
if test -e "/recalbox/share/system/upgrade/share.zip"
then
    (cd /recalbox/share && unzip -o /recalbox/share/system/upgrade/share.zip) > /recalbox/share/system/upgrade/upgrade.share.out.log 2> /recalbox/share/system/upgrade/upgrade.share.err.log
    # always remove to not apply indefinitly
    rm -f /recalbox/share/system/upgrade/share.zip
fi
