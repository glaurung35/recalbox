#!/bin/bash

if test "$1" != "start"
then
  exit 0
fi

# If the share partition is empty, try playing the "creating share" video
if [ ! -d /recalbox/share/roms ]; then
    /recalbox/scripts/recalbox-create-share.sh
fi

# Installation image
if [ -f /tmp/.install.sh ]; then
    ( /tmp/.install.sh installstuff ) &
fi

source /recalbox/scripts/recalbox-includes.sh

IN=/recalbox/share_init
OUT=/recalbox/share

# Uncompress directories' content
for DIR in shaders
do
    if test ! -e "$OUT""/""$DIR"; then
        tar xJf "$IN""/""$DIR".tar.xz -C "$OUT""/"
    fi
done

# force the creation of some directories
for DIR in cheats \
           themes \
           system/.cache \
           system/.config/lirc \
           system/.config/residualvm \
           system/.config/scummvm \
           system/.config/retroarch \
           system/.emulationstation/themes \
           system/bluetooth \
           system/configs \
           system/logs \
           system/upgrade
do
    if test ! -e "$OUT""/""$DIR"
    then
        mkdir -p "$OUT""/""$DIR"
    fi
done

# link folders using mount point so that is works on any partition
OLDIFS=$IFS
IFS=','
for DIRS in /usr/share/retroarch/assets,system/.config/retroarch/assets \
            /overlay/bootvideos,bootvideos
do
    set -- $DIRS
    TARGET=$1
    SOURCE=$OUT/$2
    if test ! -e "$SOURCE"
    then
	   mkdir -p "$SOURCE"
    fi
    mount --bind "$TARGET" "$SOURCE"
done
IFS=$OLDIFS

# Installation image
if [ -f /tmp/.install.sh ]; then
    ( /tmp/.install.sh installgames ) &
fi

# directories / files to copy when initializing the user data
#
# NO UPDATE IS POSSIBLE ON THESE DIRECTORIES WHEN RECALBOX IS UPDATED
#
# there are almost empty, it's just for the structure
# the user can delete the directory, it will recreate the structure
# the user can delete files, files will not be recreated
for FILE in music bios extractions kodi saves saves/amiga screenshots userscripts \
            system/.config/lirc/lircd.conf \
            system/.config/residualvm/residualvm.ini \
            system/.config/scummvm/scummvm.ini \
            system/.emulationstation/{es_input.cfg,es_settings.cfg} \
            system/{.hatari,.kodi,.atari800.cfg} \
            system/configs/{advancemame,daphne,dolphin-emu,dosbox,fba,kodi,moonlight,mupen64,openbor,ppsspp,reicast,retroarch,shadersets,xarcade2jstick,scummvm} \
            system/recalbox.conf \
            bios/{amiga,Databases,dc,fba,fbneo,keropi,Machines,mame,mame2000,mame2003,mame2003-plus,mame2010,mame2015,mame2016,np2kai,oricutron,prboom,quasi88,xmil}
do
    # not wanted for kodi
    test -e "$IN""/""$FILE" && test ! -e "$OUT""/""$FILE" && cp -r "$IN""/""$FILE" "$OUT""/""$FILE"
done

# Since 7.2, rom folders are no longer copied to the SHARE partition
# Instead, just create the folder and copy text files
#
# ONLY NEW DIRECTORIES ARE UPDATED WHEN RECALBOX IS UPDATED
#
# the user can't delete any directory, otherwise, it will recreate it
for DIR in roms
do
    [ ! -e "$OUT""/""$DIR" ] && mkdir "$OUT""/""$DIR"
    recreatedFolders=$(find "$IN""/""$DIR" -mindepth 1 -maxdepth 1 -type d)
    for SUBDIR in $recreatedFolders
    do
        # Create dir & copy *.txt
        BNAME=$(echo ${SUBDIR##*/})
        TDIR="$OUT""/""$DIR""/""$BNAME"
        if [ ! -e "$TDIR" ] ; then
            mkdir -p "$TDIR"
            find "$SUBDIR" -name "_*.txt" -exec cp {} "$TDIR" \;
        fi
        # Sync overlays with roms
        if test $DIR = "roms" ; then
            TDIR="$OUT""/overlays/""$BNAME"
            if [ ! -e "$TDIR" ] ; then
                mkdir -p "$TDIR"
            fi
        fi
    done
done

# Since 7.2, ports may behave as:
# - ReadOnly: The port is self-sufficient and stays in share_init
# - Read/Write: The user must add content to the port or may extend the port by adding extra-content
#
# This loop take Read/Write ports and copy them to the share
while read -r file; do
  FILE_PATH_IN_SHARE="${file#'%ROOT%/'}"
  DSTDIR="/recalbox/share/roms/${FILE_PATH_IN_SHARE}"
  SRCDIR="/recalbox/share_init/roms/${FILE_PATH_IN_SHARE}"
  cp -r "$SRCDIR" "$(dirname "$DSTDIR")"
done < <(xml sel -t -v "//descriptor[@readonly='0']/@path" /recalbox/share_init/system/.emulationstation/systemlist.xml )

# Since 7.3, share are versioned
# so that we can update some file automatically
#
RECALBOX_VERSION_FILE="/recalbox/recalbox.version"
RECALBOX_VERSION=$(cat "$RECALBOX_VERSION_FILE")
SHARE_VERSION_FILE="/recalbox/share/system/.share.version"
SHARE_VERSION=$(cat "$SHARE_VERSION_FILE" 2>/dev/null)
if [ "$RECALBOX_VERSION" != "$SHARE_VERSION" ] ; then
    # Run through rom folders
    readarray -d '' romFolders < <(find "${IN}/roms" -mindepth 1 -maxdepth 1 -type d -print0)
    for systemFolder in "${romFolders[@]}"
    do
        # Copy content of update folder into the target system rom folder
        sourceFolder="${systemFolder}/update"
        systemName=$(echo ${systemFolder##*/})
        destinationFolder="${OUT}/roms/${systemName}"
        if [ -e "$sourceFolder" ] ; then
            cp -R "$sourceFolder/." "$destinationFolder"
        fi
        # Update text files
        find "$systemFolder" -name "_*.txt" -exec install -D {} "$destinationFolder" \;
    done
    # Update version
    cp "$RECALBOX_VERSION_FILE" "$SHARE_VERSION_FILE"
fi


# directories to force directories exists
# files are linked
#
# ONLY NEW DIRECTORIES ARE UPDATED WHEN RECALBOX IS UPDATED
#
# the user can't delete any directory, otherwise, it will recreate it, with link inside
# the user can delete links and add its own files
# to reset the directory or update it, the user has to remove the directory (we are unable to differenciate new files from recalbox update from a file removed by the user)
for DIR in system/configs overlays
do
    [ ! -e "$OUT""/""$DIR" ] && mkdir "$OUT""/""$DIR"
    recreatedFolders=$(find "$IN""/""$DIR" -mindepth 1 -maxdepth 1 -type d)
    for SUBDIR in $recreatedFolders
    do
        BNAME=$(echo ${SUBDIR##*/})
        TDIR="$OUT""/""$DIR""/""$BNAME"
        if test ! -e "$TDIR" # ASSUME THAT PARENTS ARE LISTED BEFORE CHILDREN
        then
            cp -r "$SUBDIR" "$TDIR"
        fi
    done
done

# recalbox.conf : upgrade if necessary
doRecalboxUpgrades

# ssh : create the ssh key while the -R option of dropbear try a chown or an operation which is not permitted on fat32
# use /tmp pass-thru to avoid operation not permitted error on fat32
if ! test -e /recalbox/share/system/ssh
then
    mkdir -p /recalbox/share/system/ssh
    dropbearkey -t ecdsa -f /tmp/dropbear_ecdsa_host_key
    mv /tmp/dropbear_ecdsa_host_key /recalbox/share/system/ssh/
    dropbearkey -t rsa   -f /tmp/dropbear_rsa_host_key
    mv /tmp/dropbear_rsa_host_key /recalbox/share/system/ssh/
    dropbearkey -t dss   -f /tmp/dropbear_dss_host_key
    mv /tmp/dropbear_dss_host_key /recalbox/share/system/ssh/
fi

# bluetooth : untar last bluetooth settings
# This is a migration process which should run once.
# The tar file is removed and all settings are savec in
# /overlay/.configs/lib/bluetooth since #1523
btTar=/recalbox/share/system/bluetooth/bluetooth.tar
if test -e "$btTar"
then
    tar xf "$btTar" --strip-components=1 -C /overlay/.configs/ >/dev/null && rm "$btTar"
fi

# udev : create a link for rules persistance
if test ! -e /recalbox/share/system/udev/rules.d
then
    mkdir -p /recalbox/share/system/udev/rules.d
fi
mkdir -p /run/udev/rules.d
mount --bind /recalbox/share/system/udev/rules.d /run/udev/rules.d

# create a uuid if it's missing
[ ! -e /recalbox/share/system/uuid ] && /recalbox/scripts/system/uuid.sh --uuid-file /recalbox/share/system/uuid

# build the cores list if it doesn't exist
[ ! -e /recalbox/share/system/configs/retroarch.corenames ] && upgradeRetroarchCoreNames -f /recalbox/share/system/configs/retroarch.corenames

# END
if [ -e /tmp/newshare ]; then
    /recalbox/scripts/recalbox-create-share.sh stop
    #reboot
fi

# Copy TIC-80 games downloader file into share
if test ! -f /recalbox/share/roms/tic80/recalbox-tic80
then
    cp /recalbox/share_init/roms/tic80/recalbox-tic80 /recalbox/share/roms/tic80/recalbox-tic80
fi