--- mupen64plus-core/projects/unix/Makefile.orig	2020-12-05 17:27:02.297969151 +0100
+++ mupen64plus-core/projects/unix/Makefile	2020-12-05 17:26:29.694784576 +0100
@@ -142,9 +142,9 @@
 # base CFLAGS, LDLIBS, and LDFLAGS
 OPTFLAGS ?= -O3 -flto
 WARNFLAGS ?= -Wall
-CFLAGS += -fno-strict-aliasing -fvisibility=hidden -I../../src -I../../src/asm_defines -DM64P_PARALLEL
+CFLAGS += -fno-strict-aliasing -fvisibility=hidden -I../../src -I../../src/asm_defines -I/usr/include/libdrm -DM64P_PARALLEL
 CXXFLAGS += -fvisibility-inlines-hidden
-LDLIBS +=  -lm
+LDLIBS +=  -lm -lgo2
 
 # directory paths
 SRCDIR = ../../src
--- mupen64plus-core/src/api/vidext.orig	2020-12-05 17:29:01.474592283 +0100
+++ mupen64plus-core/src/api/vidext.c	2020-12-05 17:57:50.238303805 +0100
@@ -35,6 +35,9 @@
 #include "m64p_vidext.h"
 #include "vidext.h"
 
+#include <go2/display.h>
+#include <drm/drm_fourcc.h>
+
 #if SDL_VERSION_ATLEAST(2,0,0)
     #ifndef USE_GLES
     static int l_ForceCompatibilityContext = 1;
@@ -49,6 +52,11 @@
 static int l_Fullscreen = 0;
 static int l_SwapControl = 0;
 static SDL_Surface *l_pScreen = NULL;
+static go2_display_t* display = NULL;
+static go2_presenter_t* presenter = NULL;
+static go2_context_t* context = NULL;
+#define GO2_CONTEXT_WIDTH (640)
+#define GO2_CONTEXT_HEIGHT (480)
 
 /* global function for use by frontend.c */
 m64p_error OverrideVideoFunctions(m64p_video_extension_functions *VideoFunctionStruct)
@@ -110,12 +118,29 @@
     l_SwapControl = SDL_GL_GetSwapInterval();
 #endif
 
-    if (SDL_InitSubSystem(SDL_INIT_VIDEO) == -1)
+    if (SDL_InitSubSystem(SDL_INIT_EVENTS) == -1)
     {
         DebugMessage(M64MSG_ERROR, "SDL video subsystem init failed: %s", SDL_GetError());
         return M64ERR_SYSTEM_FAIL;
     }
 
+    display = go2_display_create();
+    presenter = go2_presenter_create(display, DRM_FORMAT_RGB565, 0xff080808);
+
+    go2_context_attributes_t attr;
+    attr.major = 2;
+    attr.minor = 0;
+    attr.red_bits = 8;
+    attr.green_bits = 8;
+    attr.blue_bits = 8;
+    attr.alpha_bits = 8;
+    attr.depth_bits = 24;
+    attr.stencil_bits = 8;
+
+    //context = go2_context_create(display, 480, 320, &attr);
+    context = go2_context_create(display, GO2_CONTEXT_WIDTH, GO2_CONTEXT_HEIGHT, &attr);
+    go2_context_make_current(context);
+
     return M64ERR_SUCCESS;
 }
 
@@ -133,14 +158,15 @@
         return rval;
     }
 
-    if (!SDL_WasInit(SDL_INIT_VIDEO))
-        return M64ERR_NOT_INIT;
+    go2_context_destroy(context);
+    context = NULL;
+
+    go2_presenter_destroy(presenter);
+    presenter = NULL;
+
+    go2_display_destroy(display);
+    display = NULL;
 
-    SDL_ShowCursor(SDL_ENABLE);
-#if SDL_VERSION_ATLEAST(2,0,0)
-    SDL2_DestroyWindow();
-#endif
-    SDL_QuitSubSystem(SDL_INIT_VIDEO);
     l_pScreen = NULL;
     l_VideoOutputActive = 0;
     StateChanged(M64CORE_VIDEO_MODE, M64VIDEO_NONE);
@@ -159,41 +185,13 @@
     if (l_VideoExtensionActive)
         return (*l_ExternalVideoFuncTable.VidExtFuncListModes)(SizeArray, NumSizes);
 
-    if (!SDL_WasInit(SDL_INIT_VIDEO))
+    if (!display)
         return M64ERR_NOT_INIT;
 
-    /* get a list of SDL video modes */
-    videoFlags = SDL_OPENGL | SDL_FULLSCREEN;
+    SizeArray[0].uiWidth = GO2_CONTEXT_WIDTH; //kms_window->width;
+    SizeArray[0].uiHeight = GO2_CONTEXT_HEIGHT; //kms_window->height;
 
-    if ((videoInfo = SDL_GetVideoInfo()) == NULL)
-    {
-        DebugMessage(M64MSG_ERROR, "SDL_GetVideoInfo query failed: %s", SDL_GetError());
-        return M64ERR_SYSTEM_FAIL;
-    }
-
-    if(videoInfo->hw_available)
-        videoFlags |= SDL_HWSURFACE;
-    else
-        videoFlags |= SDL_SWSURFACE;
-
-    modes = SDL_ListModes(NULL, videoFlags);
-
-    if (modes == (SDL_Rect **) 0 || modes == (SDL_Rect **) -1)
-    {
-        DebugMessage(M64MSG_WARNING, "No fullscreen SDL video modes available");
-        *NumSizes = 0;
-        return M64ERR_SUCCESS;
-    }
-
-    i = 0;
-    while (i < *NumSizes && modes[i] != NULL)
-    {
-        SizeArray[i].uiWidth  = modes[i]->w;
-        SizeArray[i].uiHeight = modes[i]->h;
-        i++;
-    }
-
-    *NumSizes = i;
+    *NumSizes = 1;
 
     return M64ERR_SUCCESS;
 }
@@ -264,59 +262,9 @@
         return rval;
     }
 
-    if (!SDL_WasInit(SDL_INIT_VIDEO))
+    if (!display)
         return M64ERR_NOT_INIT;
 
-    /* Get SDL video flags to use */
-    if (ScreenMode == M64VIDEO_WINDOWED)
-    {
-        videoFlags = SDL_OPENGL;
-        if (Flags & M64VIDEOFLAG_SUPPORT_RESIZING)
-            videoFlags |= SDL_RESIZABLE;
-    }
-    else if (ScreenMode == M64VIDEO_FULLSCREEN)
-    {
-        videoFlags = SDL_OPENGL | SDL_FULLSCREEN;
-    }
-    else
-    {
-        return M64ERR_INPUT_INVALID;
-    }
-
-    if ((videoInfo = SDL_GetVideoInfo()) == NULL)
-    {
-        DebugMessage(M64MSG_ERROR, "SDL_GetVideoInfo query failed: %s", SDL_GetError());
-        return M64ERR_SYSTEM_FAIL;
-    }
-    if (videoInfo->hw_available)
-        videoFlags |= SDL_HWSURFACE;
-    else
-        videoFlags |= SDL_SWSURFACE;
-
-    /* set the mode */
-    if (BitsPerPixel > 0)
-        DebugMessage(M64MSG_INFO, "Setting %i-bit video mode: %ix%i", BitsPerPixel, Width, Height);
-    else
-        DebugMessage(M64MSG_INFO, "Setting video mode: %ix%i", Width, Height);
-
-    l_pScreen = SDL_SetVideoMode(Width, Height, BitsPerPixel, videoFlags);
-    if (l_pScreen == NULL)
-    {
-        DebugMessage(M64MSG_ERROR, "SDL_SetVideoMode failed: %s", SDL_GetError());
-        return M64ERR_SYSTEM_FAIL;
-    }
-
-    SDL_ShowCursor(SDL_DISABLE);
-
-#if SDL_VERSION_ATLEAST(2,0,0)
-    /* set swap interval/VSync */
-    if (SDL_GL_SetSwapInterval(l_SwapControl) != 0)
-    {
-        DebugMessage(M64MSG_ERROR, "SDL swap interval (VSync) set failed: %s", SDL_GetError());
-        return M64ERR_SYSTEM_FAIL;
-    }
-#endif
-
     l_Fullscreen = (ScreenMode == M64VIDEO_FULLSCREEN);
     l_VideoOutputActive = 1;
     StateChanged(M64CORE_VIDEO_MODE, ScreenMode);
@@ -341,76 +289,8 @@
     }
 
 #if SDL_VERSION_ATLEAST(2,0,0)
-    if (!SDL_WasInit(SDL_INIT_VIDEO) || !SDL_VideoWindow)
+    if (!display)
         return M64ERR_NOT_INIT;
-    
-    int videoFlags = 0;
-    int display = GetVideoDisplay();
-    int modeCount = SDL_GetNumDisplayModes(display);
-    SDL_DisplayMode displayMode;
-    int modeFound = 0;
-
-    /* Get SDL video flags to use */
-    if (ScreenMode == M64VIDEO_WINDOWED)
-        videoFlags = 0;
-    else if (ScreenMode == M64VIDEO_FULLSCREEN)
-        videoFlags = SDL_WINDOW_FULLSCREEN;
-    else
-        return M64ERR_INPUT_INVALID;
-
-    if (modeCount < 1)
-    {
-        DebugMessage(M64MSG_ERROR, "SDL_GetNumDisplayModes failed: %s", SDL_GetError());
-        return M64ERR_SYSTEM_FAIL;
-    }
-
-    /* Attempt to find valid screen mode */
-    for (int i = 0; i < modeCount; i++)
-    {
-        if (SDL_GetDisplayMode(display, i, &displayMode) < 0)
-        {
-            DebugMessage(M64MSG_ERROR, "SDL_GetDisplayMode failed: %s", SDL_GetError());
-            return M64ERR_SYSTEM_FAIL;
-        }
-
-        /* skip when we're not at the right mode */
-        if (displayMode.w != Width ||
-            displayMode.h != Height ||
-            displayMode.refresh_rate != RefreshRate)
-            continue;
-
-        modeFound = 1;
-        break;
-    }
-
-    /* return when no modes with specifed size have been found */
-    if (modeFound == 0)
-        return M64ERR_INPUT_INVALID;
-
-    /* Set window in specified mode */
-    if (SDL_SetWindowFullscreen(SDL_VideoWindow, videoFlags) < 0)
-    {
-        DebugMessage(M64MSG_ERROR, "SDL_SetWindowFullscreen failed: %s", SDL_GetError());
-        return M64ERR_SYSTEM_FAIL;
-    }
-
-    if (ScreenMode == M64VIDEO_FULLSCREEN)
-    {
-        if (SDL_SetWindowDisplayMode(SDL_VideoWindow, &displayMode) < 0)
-        {
-            DebugMessage(M64MSG_ERROR, "SDL_SetWindowDisplayMode failed: %s", SDL_GetError());
-            return M64ERR_SYSTEM_FAIL;
-        }
-    }
-
-    SDL_ShowCursor(SDL_DISABLE);
-
-    /* set swap interval/VSync */
-    if (SDL_GL_SetSwapInterval(l_SwapControl) != 0)
-    {
-        DebugMessage(M64MSG_ERROR, "SDL swap interval (VSync) set failed: %s", SDL_GetError());
-        return M64ERR_SYSTEM_FAIL;
-    }
 
     l_Fullscreen = (ScreenMode == M64VIDEO_FULLSCREEN);
     l_VideoOutputActive = 1;
@@ -446,38 +326,15 @@
         return rval;
     }
 
-    if (!l_VideoOutputActive || !SDL_WasInit(SDL_INIT_VIDEO))
-        return M64ERR_NOT_INIT;
-
     if (l_Fullscreen)
     {
         DebugMessage(M64MSG_ERROR, "VidExt_ResizeWindow() called in fullscreen mode.");
         return M64ERR_INVALID_STATE;
     }
 
-    /* Get SDL video flags to use */
-    videoFlags = SDL_OPENGL | SDL_RESIZABLE;
-    if ((videoInfo = SDL_GetVideoInfo()) == NULL)
-    {
-        DebugMessage(M64MSG_ERROR, "SDL_GetVideoInfo query failed: %s", SDL_GetError());
-        return M64ERR_SYSTEM_FAIL;
-    }
-    if (videoInfo->hw_available)
-        videoFlags |= SDL_HWSURFACE;
-    else
-        videoFlags |= SDL_SWSURFACE;
-
     // destroy the On-Screen Display
     osd_exit();
 
-    /* set the re-sizing the screen will create a new OpenGL context */
-    l_pScreen = SDL_SetVideoMode(Width, Height, 0, videoFlags);
-    if (l_pScreen == NULL)
-    {
-        DebugMessage(M64MSG_ERROR, "SDL_SetVideoMode failed: %s", SDL_GetError());
-        return M64ERR_SYSTEM_FAIL;
-    }
-
     StateChanged(M64CORE_VIDEO_SIZE, (Width << 16) | Height);
     // re-create the On-Screen Display
     osd_init(Width, Height);
@@ -490,11 +347,6 @@
     if (l_VideoExtensionActive)
         return (*l_ExternalVideoFuncTable.VidExtFuncSetCaption)(Title);
 
-    if (!SDL_WasInit(SDL_INIT_VIDEO))
-        return M64ERR_NOT_INIT;
-
-    SDL_WM_SetCaption(Title, "M64+ Video");
-
     return M64ERR_SUCCESS;
 }
 
@@ -512,25 +364,7 @@
         return rval;
     }
 
-    if (!SDL_WasInit(SDL_INIT_VIDEO))
-        return M64ERR_NOT_INIT;
-
-    /* TODO:
-     * SDL_WM_ToggleFullScreen doesn't work under Windows and others
-     * (see http://wiki.libsdl.org/moin.cgi/FAQWindows for explanation).
-     * Instead, we should call SDL_SetVideoMode with the SDL_FULLSCREEN flag.
-     * (see http://sdl.beuc.net/sdl.wiki/SDL_SetVideoMode), but on Windows
-     * this resets the OpenGL context and video plugins don't support it yet.
-     * Uncomment the next line to test it: */
-    //return VidExt_SetVideoMode(l_pScreen->w, l_pScreen->h, l_pScreen->format->BitsPerPixel, l_Fullscreen ? M64VIDEO_WINDOWED : M64VIDEO_FULLSCREEN);
-    if (SDL_WM_ToggleFullScreen(l_pScreen) == 1)
-    {
-        l_Fullscreen = !l_Fullscreen;
-        StateChanged(M64CORE_VIDEO_MODE, l_Fullscreen ? M64VIDEO_FULLSCREEN : M64VIDEO_WINDOWED);
-        return M64ERR_SUCCESS;
-    }
-
-    return M64ERR_SYSTEM_FAIL;
+    return M64ERR_SUCCESS;
 }
 
 EXPORT m64p_function CALL VidExt_GL_GetProcAddress(const char* Proc)
@@ -539,13 +373,10 @@
     if (l_VideoExtensionActive)
         return (*l_ExternalVideoFuncTable.VidExtFuncGLGetProc)(Proc);
 
-    if (!SDL_WasInit(SDL_INIT_VIDEO))
-        return NULL;
-
 /* WARN: assume cast to m64p_function is supported by platform and disable warning accordingly */
 OSAL_WARNING_PUSH
 OSAL_NO_WARNING_FPTR_VOIDP_CAST
-    return (m64p_function)SDL_GL_GetProcAddress(Proc);
+    return (m64p_function)eglGetProcAddress(Proc);
 OSAL_WARNING_POP
 }
 
@@ -583,50 +414,7 @@
     if (l_VideoExtensionActive)
         return (*l_ExternalVideoFuncTable.VidExtFuncGLSetAttr)(Attr, Value);
 
-    if (!SDL_WasInit(SDL_INIT_VIDEO))
-        return M64ERR_NOT_INIT;
-
-    if (Attr == M64P_GL_SWAP_CONTROL)
-    {
-        /* SDL swap interval/vsync needs to be set on current GL context, so save it for later */
-        l_SwapControl = Value;
-    }
-
-    /* translate the GL context type mask if necessary */
-#if SDL_VERSION_ATLEAST(2,0,0)
-    if (Attr == M64P_GL_CONTEXT_PROFILE_MASK)
-    {
-        switch (Value)
-        {
-            case M64P_GL_CONTEXT_PROFILE_CORE:
-                Value = SDL_GL_CONTEXT_PROFILE_CORE;
-#ifndef USE_GLES
-                l_ForceCompatibilityContext = 0;
-#endif
-                break;
-            case M64P_GL_CONTEXT_PROFILE_COMPATIBILITY:
-                Value = SDL_GL_CONTEXT_PROFILE_COMPATIBILITY;
-                break;
-            case M64P_GL_CONTEXT_PROFILE_ES:
-                Value = SDL_GL_CONTEXT_PROFILE_ES;
-                break;
-            default:
-                Value = 0;
-        }
-    }
-#endif
-
-    for (i = 0; i < mapSize; i++)
-    {
-        if (GLAttrMap[i].m64Attr == Attr)
-        {
-            if (SDL_GL_SetAttribute(GLAttrMap[i].sdlAttr, Value) != 0)
-                return M64ERR_SYSTEM_FAIL;
             return M64ERR_SUCCESS;
-        }
-    }
-
-    return M64ERR_INPUT_INVALID;
 }
 
 EXPORT m64p_error CALL VidExt_GL_GetAttribute(m64p_GLattr Attr, int *pValue)
@@ -648,38 +436,6 @@
     }
 #endif
 
-    for (i = 0; i < mapSize; i++)
-    {
-        if (GLAttrMap[i].m64Attr == Attr)
-        {
-            int NewValue = 0;
-            if (SDL_GL_GetAttribute(GLAttrMap[i].sdlAttr, &NewValue) != 0)
-                return M64ERR_SYSTEM_FAIL;
-            /* translate the GL context type mask if necessary */
-#if SDL_VERSION_ATLEAST(2,0,0)
-            if (Attr == M64P_GL_CONTEXT_PROFILE_MASK)
-            {
-                switch (NewValue)
-                {
-                    case SDL_GL_CONTEXT_PROFILE_CORE:
-                        NewValue = M64P_GL_CONTEXT_PROFILE_CORE;
-                        break;
-                    case SDL_GL_CONTEXT_PROFILE_COMPATIBILITY:
-                        NewValue = M64P_GL_CONTEXT_PROFILE_COMPATIBILITY;
-                        break;
-                    case SDL_GL_CONTEXT_PROFILE_ES:
-                        NewValue = M64P_GL_CONTEXT_PROFILE_ES;
-                        break;
-                    default:
-                        NewValue = 0;
-                }
-            }
-#endif
-            *pValue = NewValue;
-            return M64ERR_SUCCESS;
-        }
-    }
-
     return M64ERR_INPUT_INVALID;
 }
 
@@ -689,10 +445,24 @@
     if (l_VideoExtensionActive)
         return (*l_ExternalVideoFuncTable.VidExtFuncGLSwapBuf)();
 
-    if (!SDL_WasInit(SDL_INIT_VIDEO))
+    if (!display)
         return M64ERR_NOT_INIT;
 
-    SDL_GL_SwapBuffers();
+    go2_context_swap_buffers(context);
+
+    go2_surface_t* surface = go2_context_surface_lock(context);
+    const float aspect = 4.0f / 3.0f;
+    const int w = go2_display_width_get(display) * aspect;
+    const int x = (go2_display_height_get(display) / 2) - (w / 2);
+
+    go2_presenter_post(presenter,
+            surface,
+            0, 0, GO2_CONTEXT_WIDTH, GO2_CONTEXT_HEIGHT,
+            0, x, go2_display_width_get(display), w,
+            GO2_ROTATION_DEGREES_270);
+
+    go2_context_surface_unlock(context, surface);
+
     return M64ERR_SUCCESS;
 }
 
