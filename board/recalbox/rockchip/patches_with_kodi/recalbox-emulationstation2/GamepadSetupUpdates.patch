diff --git a/es-core/src/guis/GuiInputConfig.cpp b/es-core/src/guis/GuiInputConfig.cpp
index 252f18d541800feae6cc13a6496552479c436f95..7c59b3bda3cc6e9b1718d095a1028019aa4de167 100644
--- a/es-core/src/guis/GuiInputConfig.cpp
+++ b/es-core/src/guis/GuiInputConfig.cpp
@@ -14,13 +14,6 @@
 #include <boost/format.hpp>
 using namespace boost::locale;
 
-static const int inputCount = 21;
-static const char* inputName[inputCount] = {      "Up", "Down", "Left", "Right", "Joystick1Up" , "Joystick1Left", "Joystick2Up" , "Joystick2Left", "A",    "B",   "X",   "Y", "Start", "Select", "PageUp", "PageDown", "L2", "R2", "L3", "R3", "HotKey" };
-static const bool inputSkippable[inputCount] = { false, false,   false,   false,     true,              true,         true,             true,      false,  false,  true,   true, false,    false,     true,      true, true, true, true, true,  false};
-static const char* inputIcon[inputCount] = { ":/help/dpad_up.svg", ":/help/dpad_down.svg", ":/help/dpad_left.svg", ":/help/dpad_right.svg", ":/help/joystick_up.svg", ":/help/joystick_left.svg", ":/help/joystick_up.svg", ":/help/joystick_left.svg",
-											 ":/help/button_a.svg", ":/help/button_b.svg", ":/help/button_x.svg", ":/help/button_y.svg", ":/help/button_start.svg", ":/help/button_select.svg",
-											":/help/button_l.svg", ":/help/button_r.svg", ":/help/button_l2.svg", ":/help/button_r2.svg",":/help/button_l3.svg", ":/help/button_r3.svg", ":/help/button_hotkey.svg" };
-
 using namespace Eigen;
 
 GuiInputConfig::GuiInputConfig(Window* window, InputConfig* target, const std::function<void()>& doneCallback) : GuiComponent(window), 
@@ -29,10 +22,7 @@ GuiInputConfig::GuiInputConfig(Window* window, InputConfig* target, const std::f
 {
 	LOG(LogInfo) << "Configuring device " << mTargetConfig->getDeviceId() << " (" << mTargetConfig->getDeviceName() << ").";
 
-	std::string inputDispName[inputCount] = { _("UP"), _("DOWN"), _("LEFT"), _("RIGHT"),
-						  _("JOYSTICK 1 UP"), _("JOYSTICK 1 LEFT"), _("JOYSTICK 2 UP"), _("JOYSTICK 2 LEFT"),
-						  "A", "B", "X", "Y", "START", "SELECT ", _("PAGE UP"), _("PAGE DOWN"),  "L2", "R2", "L3", "R3", _("HOTKEY") };
-
+	initFormInputs();
 
 	InputConfig previousConfig =  new InputConfig(mTargetConfig);
 	mTargetConfig->clear();
@@ -66,11 +56,11 @@ GuiInputConfig::GuiInputConfig(Window* window, InputConfig* target, const std::f
 	mList = std::make_shared<ComponentList>(mWindow);
 	mGrid.setEntry(mList, Vector2i(0, 3), true, true);
 	
-	for(int i = 0; i < inputCount; i++) {
+	for(auto formInput: mFormInputs) {
 		ComponentListRow row;
 		// icon
 		auto icon = std::make_shared<ImageComponent>(mWindow);
-		icon->setImage(inputIcon[i]);
+		icon->setImage(formInput.icon);
 		icon->setColorShift(menuTheme->menuText.color);
 		icon->setResize(0, menuTheme->menuText.font->getLetterHeight() * 1.25f);
 		row.addElement(icon, false);
@@ -80,27 +70,27 @@ GuiInputConfig::GuiInputConfig(Window* window, InputConfig* target, const std::f
 		spacer->setSize(16, 0);
 		row.addElement(spacer, false);
 
-		auto text = std::make_shared<TextComponent>(mWindow, inputDispName[i], menuTheme->menuText.font, menuTheme->menuText.color);
+		auto text = std::make_shared<TextComponent>(mWindow, formInput.label, menuTheme->menuText.font, menuTheme->menuText.color);
 		row.addElement(text, true);
 
 		auto mapping = std::make_shared<TextComponent>(mWindow, "", menuTheme->menuText.font, menuTheme->menuText.color, ALIGN_RIGHT);
 		row.addElement(mapping, true);
 		mMappings.push_back(mapping);
 
-		row.input_handler = [this, i, mapping](InputConfig* config, Input input) -> bool {
+		row.input_handler = [this, formInput, mapping](InputConfig* config, Input input) -> bool {
 			// ignore input not from our target device
 			if(config != mTargetConfig)
 				return false;
 
 			if(input.value != 0) { // pressed (an event is fired when releasing, with value == 0)
 				if(!mInputStack.hasInput(input)) {
-					mInputStack.push(input, [this, i] (const std::list<Input> inputs) {
+					mInputStack.push(input, [this, formInput] (const std::list<Input> inputs) {
 						for(auto it = inputs.begin(); it != inputs.end(); it++) {
 							// Key Up
 							if (mTargetConfig->isMappedTo("UP", *it)) {
-								if (i > 0 && mTargetConfig->isMapped("DOWN")) {
+								if (mList->getCursorId() > 0 && mTargetConfig->isMapped("DOWN")) {
 									restaurePreviousAssignment();
-									if (!isAssigned() && inputSkippable[i]) {
+									if (!isAssigned() && formInput.skippable) {
 										setSkipped();
 									}
 									mList->moveCursor(-1);
@@ -111,7 +101,7 @@ GuiInputConfig::GuiInputConfig(Window* window, InputConfig* target, const std::f
 
 							// Key Down
 							if (mTargetConfig->isMappedTo("DOWN", *it)) {
-								if (!isAssigned() && !inputSkippable[i])
+								if (!isAssigned() && !formInput.skippable)
 									return ;
 								restaurePreviousAssignment();
 								if (!isAssigned()) {
@@ -200,6 +190,45 @@ GuiInputConfig::GuiInputConfig(Window* window, InputConfig* target, const std::f
 	setPosition((Renderer::getScreenWidth() - mSize.x()) / 2, (Renderer::getScreenHeight() - mSize.y()) / 2);
 }
 
+void GuiInputConfig::initFormInputs()
+{
+	addFormInput("Up", _("UP"), ":/help/dpad_up.svg", false);
+	addFormInput("Down", _("DOWN"), ":/help/dpad_down.svg", false);
+	addFormInput("Left", _("LEFT"), ":/help/dpad_left.svg", false);
+	addFormInput("Right", _("RIGHT"), ":/help/dpad_right.svg", false);
+
+	addFormInput("Joystick1Up", _("JOYSTICK 1 UP"), ":/help/joystick_up.svg", true);
+	addFormInput("Joystick1Left", _("JOYSTICK 1 LEFT"), ":/help/joystick_left.svg", true);
+	addFormInput("Joystick2Up", _("JOYSTICK 2 UP"), ":/help/joystick_up.svg", true);
+	addFormInput("Joystick2Left", _("JOYSTICK 2 LEFT"), ":/help/joystick_left.svg", true);
+	
+	addFormInput("A", _("A"), ":/help/button_a.svg", false);
+	addFormInput("B", _("B"), ":/help/button_b.svg", false);
+	
+	addFormInput("X", _("X"), ":/help/button_x.svg", true);
+	addFormInput("Y", _("Y"), ":/help/button_y.svg", true);
+	
+	addFormInput("Start", _("START"), ":/help/button_start.svg", false);
+	addFormInput("Select", _("SELECT"), ":/help/button_select.svg", false);
+	
+	addFormInput("PageUp", _("PAGE UP"), ":/help/button_l.svg", true);
+	addFormInput("PageDown", _("PAGE DOWN"), ":/help/button_r.svg", true);
+	
+	addFormInput("L2", _("L2"), ":/help/button_l2.svg", true);
+	addFormInput("R2", _("R2"), ":/help/button_r2.svg", true);
+	
+	addFormInput("L3", _("L3"), ":/help/button_l3.svg", true);
+	addFormInput("R3", _("R3"), ":/help/button_r3.svg", true);
+
+	addFormInput("HotKey", _("HOTKEY"), ":/help/button_hotkey.svg", false);
+}
+
+void GuiInputConfig::addFormInput(const char* name, std::string label, const char* icon, bool skippable)
+{
+	FormInput formInput(name, label, icon, skippable);
+	mFormInputs.push_back(formInput);
+}
+
 void GuiInputConfig::onSizeChanged()
 {
 	mBackground.fitTo(mSize, Vector3f::Zero(), Vector2f(-32, -32));
@@ -238,8 +267,8 @@ void GuiInputConfig::setHelpMessage() {
 	std::string msg;
 	Input input;
 	int inputId = mList->getCursorId();
-	bool skippable = inputSkippable[inputId];
-	bool assigned = mTargetConfig->getInputByName(inputName[inputId], &input);
+	FormInput formInput = mFormInputs.at(inputId);
+	bool assigned = mTargetConfig->getInputByName(formInput.name, &input);
 	std::shared_ptr<TextComponent>& text = mMappings.at(inputId);
 	auto menuTheme = MenuThemeData::getInstance()->getCurrentTheme();
 
@@ -256,19 +285,19 @@ void GuiInputConfig::setHelpMessage() {
 					  str(boost::format(_("UP/DOWN TO KEEP [%1%]")) % strToUpper(input.string()));
 		}
 
-	} else if (skippable)
+	} else if (formInput.skippable)
 		msg = _("UP/DOWN TO SKIP");
 	else 
 		msg = _("INPUT REQUIRED");
 
 	mSubtitle2->setText(msg);
-	mSubtitle2->setColor(skippable || assigned ? menuTheme->menuTextSmall.color : 0xff4141ff);
+	mSubtitle2->setColor(formInput.skippable || assigned ? menuTheme->menuTextSmall.color : 0xff4141ff);
 }
 
 void GuiInputConfig::setPress() {
 	Input input;
-	int inputId = mList->getCursorId();
-	if (mTargetConfig->getInputByName(inputName[inputId], &input)) {
+	FormInput formInput = mFormInputs.at((unsigned int) mList->getCursorId());
+	if (mTargetConfig->getInputByName(formInput.name, &input)) {
 		setAssignedTo(input);
 	} else {
 		setText(_("PRESS ANYTHING"), mMainColor); 
@@ -276,12 +305,12 @@ void GuiInputConfig::setPress() {
 }
 
 bool GuiInputConfig::assign(Input input) {
-	int inputId = mList->getCursorId();
+	FormInput formInput = mFormInputs.at((unsigned int) mList->getCursorId());
 
 	// input is from InputConfig* mTargetConfig
 	// if this input is mapped to something other than "nothing" or the current row, error
 	// (if it's the same as what it was before, allow it)
-	if(std::string("HotKey").compare(inputName[inputId]) != 0 && mTargetConfig->getMappedTo(input).size() > 0 && !mTargetConfig->isMappedTo(inputName[inputId], input)) {
+	if(std::string("HotKey").compare(formInput.name) != 0 && mTargetConfig->getMappedTo(input).size() > 0 && !mTargetConfig->isMappedTo(formInput.name, input)) {
 		setMapped();
 		return false;
 	}
@@ -289,36 +318,37 @@ bool GuiInputConfig::assign(Input input) {
 	setAssignedTo(input);
 	
 	input.configured = true;
-	mTargetConfig->mapInput(inputName[inputId], input);
+	mTargetConfig->mapInput(formInput.name, input);
 
-	LOG(LogInfo) << "  Mapping [" << input.string() << "] -> " << inputName[inputId];
+	LOG(LogInfo) << "  Mapping [" << input.string() << "] -> " << formInput.name;
 
 	return true;
 }
 
 void GuiInputConfig::unAssign() {
+	FormInput formInput = mFormInputs.at((unsigned int) mList->getCursorId());
+
 	Input input;
-	int inputId = mList->getCursorId();
-	mTargetConfig->getInputByName(inputName[inputId], &input);
+	mTargetConfig->getInputByName(formInput.name, &input);
 
 	setNotDefined();
 	
 	input.configured = false;
-	mTargetConfig->unmapInput(inputName[inputId]);
+	mTargetConfig->unmapInput(formInput.name);
 
-	LOG(LogInfo) << "  Unmapping [" << input.string() << "] -> " << inputName[inputId];
+	LOG(LogInfo) << "  Unmapping [" << input.string() << "] -> " << formInput.name;
 }
 
 void GuiInputConfig::restaurePreviousAssignment() {
 	Input input;
-	int inputId = mList->getCursorId();
-	if(mTargetConfig->getInputByName(inputName[inputId], &input))
+	FormInput formInput = mFormInputs.at((unsigned int) mList->getCursorId());
+	if(mTargetConfig->getInputByName(formInput.name, &input))
 		setAssignedTo(input);
 	else
 		setNotDefined();
 }
 
 bool GuiInputConfig::isAssigned() {
-	int inputId = mList->getCursorId();
-	return mTargetConfig->isMapped(inputName[inputId]);
+	FormInput formInput = mFormInputs.at((unsigned int) mList->getCursorId());
+	return mTargetConfig->isMapped(formInput.name);
 }
\ No newline at end of file
diff --git a/es-core/src/guis/GuiInputConfig.h b/es-core/src/guis/GuiInputConfig.h
index 3e3e6307dfa2b221830e53fa5a9e8e83db244738..c98fec14a8eb989c67b1ef33ae9cc210252f4727 100644
--- a/es-core/src/guis/GuiInputConfig.h
+++ b/es-core/src/guis/GuiInputConfig.h
@@ -18,11 +18,24 @@ public:
 
 private:
 
+	class FormInput
+	{
+	public:
+		const std::string name;
+		const std::string label;
+		const std::string icon;
+		const bool skippable;
+		FormInput(std::string inName, std::string inLabel, std::string inIcon, bool inSkippable): name(inName), label(inLabel), icon(inIcon), skippable(inSkippable) {};
+	};
+
 	inline void setMapped() { setText(_("ALREADY TAKEN"), mMainColor); }
 	inline void setSkipped() { setText(_("(skipped)"), mMainColor); }
 	inline void setNotDefined() { setText("", mMainColor); }
 	inline void setAssignedTo(Input input) { setText(strToUpper(input.string()), mMainColor); }
 
+	void initFormInputs();
+	void addFormInput(const char* name, std::string label, const char* icon, bool skippable);
+
 	void setHelpMessage();
 	void setPress();
 	void setText(const std::string& msg, unsigned int color);
@@ -37,6 +50,8 @@ private:
 
 	NinePatchComponent mBackground;
 	ComponentGrid mGrid;
+	
+	std::vector< FormInput > mFormInputs;
 
 	std::shared_ptr<TextComponent> mTitle;
 	std::shared_ptr<TextComponent> mSubtitle1;

diff --git a/es-core/src/guis/GuiInputConfig.cpp b/es-core/src/guis/GuiInputConfig.cpp
index 7c59b3bda3cc6e9b1718d095a1028019aa4de167..769e41a852c2c5317293b0e8b4ee6bb387c06110 100644
--- a/es-core/src/guis/GuiInputConfig.cpp
+++ b/es-core/src/guis/GuiInputConfig.cpp
@@ -122,12 +122,18 @@ GuiInputConfig::GuiInputConfig(Window* window, InputConfig* target, const std::f
 							}
 						}
 
-						for(auto it = inputs.begin(); it != inputs.end(); it++) {
-							if(assign(*it)) {
-								rowDone(); // if successful, move cursor/stop configuring - if not, we'll just try again
-								return ;
-							}
-						}
+                        // At first, try to find the preferred type, on the second pass, we ignore the preferred type
+						for (int pass = 0; pass < 2; pass++)
+                        {
+                            for (auto input: inputs)
+                            {
+                                if ( ( (input.type == formInput.preferredType) || (pass == 1) ) && assign(input))
+                                {
+                                    rowDone(); // if successful, move cursor/stop configuring - if not, we'll just try again
+                                    return ;
+                                }
+                            }
+                        }
 					});
 				}
 			}
@@ -192,40 +198,40 @@ GuiInputConfig::GuiInputConfig(Window* window, InputConfig* target, const std::f
 
 void GuiInputConfig::initFormInputs()
 {
-	addFormInput("Up", _("UP"), ":/help/dpad_up.svg", false);
-	addFormInput("Down", _("DOWN"), ":/help/dpad_down.svg", false);
-	addFormInput("Left", _("LEFT"), ":/help/dpad_left.svg", false);
-	addFormInput("Right", _("RIGHT"), ":/help/dpad_right.svg", false);
-
-	addFormInput("Joystick1Up", _("JOYSTICK 1 UP"), ":/help/joystick_up.svg", true);
-	addFormInput("Joystick1Left", _("JOYSTICK 1 LEFT"), ":/help/joystick_left.svg", true);
-	addFormInput("Joystick2Up", _("JOYSTICK 2 UP"), ":/help/joystick_up.svg", true);
-	addFormInput("Joystick2Left", _("JOYSTICK 2 LEFT"), ":/help/joystick_left.svg", true);
+	addFormInput("Up", _("UP"), ":/help/dpad_up.svg", false, TYPE_HAT);
+	addFormInput("Down", _("DOWN"), ":/help/dpad_down.svg", false, TYPE_HAT);
+	addFormInput("Left", _("LEFT"), ":/help/dpad_left.svg", false, TYPE_HAT);
+	addFormInput("Right", _("RIGHT"), ":/help/dpad_right.svg", false, TYPE_HAT);
+
+	addFormInput("Joystick1Up", _("JOYSTICK 1 UP"), ":/help/joystick_up.svg", true, TYPE_AXIS);
+	addFormInput("Joystick1Left", _("JOYSTICK 1 LEFT"), ":/help/joystick_left.svg", true, TYPE_AXIS);
+	addFormInput("Joystick2Up", _("JOYSTICK 2 UP"), ":/help/joystick_up.svg", true, TYPE_AXIS);
+	addFormInput("Joystick2Left", _("JOYSTICK 2 LEFT"), ":/help/joystick_left.svg", true, TYPE_AXIS);
 	
-	addFormInput("A", _("A"), ":/help/button_a.svg", false);
-	addFormInput("B", _("B"), ":/help/button_b.svg", false);
+	addFormInput("A", _("A"), ":/help/button_a.svg", false, TYPE_BUTTON);
+	addFormInput("B", _("B"), ":/help/button_b.svg", false, TYPE_BUTTON);
 	
-	addFormInput("X", _("X"), ":/help/button_x.svg", true);
-	addFormInput("Y", _("Y"), ":/help/button_y.svg", true);
+	addFormInput("X", _("X"), ":/help/button_x.svg", true, TYPE_BUTTON);
+	addFormInput("Y", _("Y"), ":/help/button_y.svg", true, TYPE_BUTTON);
 	
-	addFormInput("Start", _("START"), ":/help/button_start.svg", false);
-	addFormInput("Select", _("SELECT"), ":/help/button_select.svg", false);
+	addFormInput("Start", _("START"), ":/help/button_start.svg", false, TYPE_BUTTON);
+	addFormInput("Select", _("SELECT"), ":/help/button_select.svg", false, TYPE_BUTTON);
 	
-	addFormInput("PageUp", _("PAGE UP"), ":/help/button_l.svg", true);
-	addFormInput("PageDown", _("PAGE DOWN"), ":/help/button_r.svg", true);
+	addFormInput("PageUp", _("PAGE UP"), ":/help/button_l.svg", true, TYPE_BUTTON);
+	addFormInput("PageDown", _("PAGE DOWN"), ":/help/button_r.svg", true, TYPE_BUTTON);
 	
-	addFormInput("L2", _("L2"), ":/help/button_l2.svg", true);
-	addFormInput("R2", _("R2"), ":/help/button_r2.svg", true);
+	addFormInput("L2", _("L2"), ":/help/button_l2.svg", true, TYPE_BUTTON);
+	addFormInput("R2", _("R2"), ":/help/button_r2.svg", true, TYPE_BUTTON);
 	
-	addFormInput("L3", _("L3"), ":/help/button_l3.svg", true);
-	addFormInput("R3", _("R3"), ":/help/button_r3.svg", true);
+	addFormInput("L3", _("L3"), ":/help/button_l3.svg", true, TYPE_BUTTON);
+	addFormInput("R3", _("R3"), ":/help/button_r3.svg", true, TYPE_BUTTON);
 
-	addFormInput("HotKey", _("HOTKEY"), ":/help/button_hotkey.svg", false);
+	addFormInput("HotKey", _("HOTKEY"), ":/help/button_hotkey.svg", false, TYPE_BUTTON);
 }
 
-void GuiInputConfig::addFormInput(const char* name, std::string label, const char* icon, bool skippable)
+void GuiInputConfig::addFormInput(const char* name, std::string label, const char* icon, bool skippable, InputType preferredType)
 {
-	FormInput formInput(name, label, icon, skippable);
+	FormInput formInput(name, label, icon, skippable, preferredType);
 	mFormInputs.push_back(formInput);
 }
 
diff --git a/es-core/src/guis/GuiInputConfig.h b/es-core/src/guis/GuiInputConfig.h
index c98fec14a8eb989c67b1ef33ae9cc210252f4727..65782540e5de58c83cfd0a9e125d9f01383de093 100644
--- a/es-core/src/guis/GuiInputConfig.h
+++ b/es-core/src/guis/GuiInputConfig.h
@@ -25,7 +25,8 @@ private:
 		const std::string label;
 		const std::string icon;
 		const bool skippable;
-		FormInput(std::string inName, std::string inLabel, std::string inIcon, bool inSkippable): name(inName), label(inLabel), icon(inIcon), skippable(inSkippable) {};
+		const InputType preferredType;
+		FormInput(std::string inName, std::string inLabel, std::string inIcon, bool inSkippable, InputType inPreferredType): name(inName), label(inLabel), icon(inIcon), skippable(inSkippable), preferredType(inPreferredType) {};
 	};
 
 	inline void setMapped() { setText(_("ALREADY TAKEN"), mMainColor); }
@@ -34,7 +35,7 @@ private:
 	inline void setAssignedTo(Input input) { setText(strToUpper(input.string()), mMainColor); }
 
 	void initFormInputs();
-	void addFormInput(const char* name, std::string label, const char* icon, bool skippable);
+	void addFormInput(const char* name, std::string label, const char* icon, bool skippable, InputType preferredType);
 
 	void setHelpMessage();
 	void setPress();

diff --git a/es-core/src/guis/GuiInputConfig.cpp b/es-core/src/guis/GuiInputConfig.cpp
index 769e41a852c2c5317293b0e8b4ee6bb387c06110..03729690a40a112ced5ea0fd025bc5db048fa46e 100644
--- a/es-core/src/guis/GuiInputConfig.cpp
+++ b/es-core/src/guis/GuiInputConfig.cpp
@@ -82,17 +82,22 @@ GuiInputConfig::GuiInputConfig(Window* window, InputConfig* target, const std::f
 			if(config != mTargetConfig)
 				return false;
 
-			if(input.value != 0) { // pressed (an event is fired when releasing, with value == 0)
-				if(!mInputStack.hasInput(input)) {
-					mInputStack.push(input, [this, formInput] (const std::list<Input> inputs) {
-						for(auto it = inputs.begin(); it != inputs.end(); it++) {
+			if (input.value != 0) // pressed (an event is fired when releasing, with value == 0)
+			{
+				if (!mInputStack.hasInput(input))
+				{
+					mInputStack.push(input, [this, formInput] (const std::list<Input> inputs)
+					{
+
+                        for (auto input: inputs)
+                        {
 							// Key Up
-							if (mTargetConfig->isMappedTo("UP", *it)) {
-								if (mList->getCursorId() > 0 && mTargetConfig->isMapped("DOWN")) {
+							if (mTargetConfig->isMappedTo("UP", input))
+							{
+								if (mList->getCursorId() > 0 && mTargetConfig->isMapped("DOWN"))
+								{
 									restaurePreviousAssignment();
-									if (!isAssigned() && formInput.skippable) {
-										setSkipped();
-									}
+									if (!isAssigned() && formInput.skippable) setSkipped();
 									mList->moveCursor(-1);
 									setPress();
 								}
@@ -100,28 +105,31 @@ GuiInputConfig::GuiInputConfig(Window* window, InputConfig* target, const std::f
 							}
 
 							// Key Down
-							if (mTargetConfig->isMappedTo("DOWN", *it)) {
-								if (!isAssigned() && !formInput.skippable)
-									return ;
+							if (mTargetConfig->isMappedTo("DOWN", input))
+							{
+								if (!isAssigned() && !formInput.skippable) return ;
 								restaurePreviousAssignment();
-								if (!isAssigned()) {
-									setSkipped();
-								}
+								if (!isAssigned()) setSkipped();
 								rowDone();
 								return;
 							}
 
-							if (isAssigned()) {
-								if (mTargetConfig->isMappedTo("A", *it)) {
-									unAssign();
-								}
-
+							if (isAssigned() && mTargetConfig->isMappedTo("A", input))
+							{
+                                unAssign();
 								setHelpMessage();
 								setPress();
 								return;
 							}
 						}
 
+                        if (isAssigned())
+                        {
+                            setHelpMessage();
+                            setPress();
+                            return;
+                        }
+
                         // At first, try to find the preferred type, on the second pass, we ignore the preferred type
 						for (int pass = 0; pass < 2; pass++)
                         {
diff --git a/es-core/src/InputConfig.cpp b/es-core/src/InputConfig.cpp
index d0b27cc98693ac95a6ad5a3e36c0c765c075b723..645b4ef215b86c382f051bb99a9920b021e3473b 100644
--- a/es-core/src/InputConfig.cpp
+++ b/es-core/src/InputConfig.cpp
@@ -271,5 +271,8 @@ void InputConfig::writeToXML(pugi::xml_node parent)
 		input.append_attribute("type") = inputTypeToString(iterator->second.type).c_str();
 		input.append_attribute("id").set_value(iterator->second.id);
 		input.append_attribute("value").set_value(iterator->second.value);
+		if(iterator->second.code != -1) {
+			input.append_attribute("code").set_value(iterator->second.code);
+		}
 	}
 }
diff --git a/es-core/src/InputConfig.h b/es-core/src/InputConfig.h
index 9ea24b7f15b3627a365070436e1f20679611cd03..724cf754035d437ff8a9e844b29e260c77f3cdca 100644
--- a/es-core/src/InputConfig.h
+++ b/es-core/src/InputConfig.h
@@ -27,6 +27,7 @@ public:
 	InputType type;
 	int id;
 	int value;
+	int code;
 	bool configured;
 
 	Input()
@@ -35,6 +36,7 @@ public:
 		id = -1;
 		value = -999;
 		type = TYPE_COUNT;
+		code = -1;
 		configured = false;
 	}
 
@@ -80,6 +82,25 @@ public:
 
 		return stream.str();
 	}
+
+	void computeCode() {
+		if(device == DEVICE_KEYBOARD) {
+		  return;
+		}
+		switch(type) {
+			case TYPE_AXIS:
+			        code = SDL_JoystickAxisEventCodeById(device, id);
+    		    break;
+			case TYPE_BUTTON:
+			        code = SDL_JoystickButtonEventCodeById(device, id);
+	    	    break;
+			case TYPE_HAT:
+			        code = SDL_JoystickHatEventCodeById(device, id);
+		        break;
+            default:
+                break;
+		}
+	}
 };
 
 class InputConfig
diff --git a/es-core/src/InputManager.cpp b/es-core/src/InputManager.cpp
index ba8db954afc2ada2f0a5ff3593d8e7570e0a5530..3c72646297f15ec38982b9aba22ae52e66746ea4 100644
--- a/es-core/src/InputManager.cpp
+++ b/es-core/src/InputManager.cpp
@@ -546,6 +546,8 @@ std::string InputManager::configureEmulators() {
       InputConfig * playerInputConfig = playerJoysticks[player];
         if(playerInputConfig != NULL){
             command << "-p" << player+1 << "index " <<  playerInputConfig->getDeviceIndex() << " -p" << player+1 << "guid " << playerInputConfig->getDeviceGUIDString() << " -p" << player+1 << "name \"" <<  playerInputConfig->getDeviceName() << "\" -p" << player+1 << "nbaxes " << playerInputConfig->getDeviceNbAxes() << " ";
+
+            	command << "-p" << player+1 << "devicepath " <<  SDL_JoystickDevicePathById(playerInputConfig->getDeviceIndex()) << " ";
         }/*else {
             command << " " << "DEFAULT" << " -1 DEFAULTDONOTFINDMEINCOMMAND";
         }*/
diff --git a/es-core/src/guis/GuiInputConfig.cpp b/es-core/src/guis/GuiInputConfig.cpp
index 03729690a40a112ced5ea0fd025bc5db048fa46e..aff9ed8f301d77269eaecf4da2f82e21a2d60d2f 100644
--- a/es-core/src/guis/GuiInputConfig.cpp
+++ b/es-core/src/guis/GuiInputConfig.cpp
@@ -332,6 +332,10 @@ bool GuiInputConfig::assign(Input input) {
 	setAssignedTo(input);
 	
 	input.configured = true;
+
+	// set a code while the device is still connected
+	input.computeCode();
+
 	mTargetConfig->mapInput(formInput.name, input);
 
 	LOG(LogInfo) << "  Mapping [" << input.string() << "] -> " << formInput.name;
