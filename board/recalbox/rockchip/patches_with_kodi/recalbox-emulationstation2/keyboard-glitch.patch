From 94f9a74fe66d2d73b1dc719c8d07624cdc358c02 Mon Sep 17 00:00:00 2001
From: Jean-Baptiste Demonte <jbdemonte@gmail.com>
Date: Sun, 2 Dec 2018 14:43:55 +0100
Subject: [PATCH] Refactor Keyboard to fix random issue and prepare AZERTY /
 QWERTY switch

---
 es-core/src/components/ButtonComponent.cpp    |  10 +-
 es-core/src/components/ButtonComponent.h      |   4 +-
 es-core/src/components/MenuComponent.cpp      |  38 +++
 es-core/src/components/MenuComponent.h        |   1 +
 es-core/src/guis/GuiTextEditPopupKeyboard.cpp | 309 +++++-------------
 es-core/src/guis/GuiTextEditPopupKeyboard.h   |  40 +--
 6 files changed, 151 insertions(+), 251 deletions(-)

diff --git a/es-core/src/components/ButtonComponent.cpp b/es-core/src/components/ButtonComponent.cpp
index 5a8e5e79..c0aee5b9 100644
--- a/es-core/src/components/ButtonComponent.cpp
+++ b/es-core/src/components/ButtonComponent.cpp
@@ -6,7 +6,7 @@
 #include "Locale.h"
 #include "MenuThemeData.h"
 
-ButtonComponent::ButtonComponent(Window* window, const std::string& text, const std::string& helpText, const std::function<void()>& func) : GuiComponent(window),
+ButtonComponent::ButtonComponent(Window* window, const std::string& text, const std::string& helpText, const std::function<void()>& func, bool upperCase) : GuiComponent(window),
 	mBox(window, mButton),
 	mFont(Font::get(FONT_SIZE_MEDIUM)), 
 	mFocused(false), 
@@ -22,7 +22,7 @@ ButtonComponent::ButtonComponent(Window* window, const std::string& text, const
 	mButton_filled = menuTheme->iconSet.button_filled;
 	
 	setPressedFunc(func);
-	setText(text, helpText);
+	setText(text, helpText, upperCase);
 	updateImage();
 }
 
@@ -48,11 +48,11 @@ bool ButtonComponent::input(InputConfig* config, Input input)
 	return GuiComponent::input(config, input);
 }
 
-void ButtonComponent::setText(const std::string& text, const std::string& helpText)
+void ButtonComponent::setText(const std::string& text, const std::string& helpText, bool upperCase)
 {
-        mText = strToUpper(text);
+	mText = upperCase ? strToUpper(text) : text;
 	mHelpText = helpText;
-	
+
 	mTextCache = std::unique_ptr<TextCache>(mFont->buildTextCache(mText, 0, 0, getCurTextColor()));
 
 	float minWidth = mFont->sizeText("DELETE").x() + 12;
diff --git a/es-core/src/components/ButtonComponent.h b/es-core/src/components/ButtonComponent.h
index 0493c862..063725a9 100644
--- a/es-core/src/components/ButtonComponent.h
+++ b/es-core/src/components/ButtonComponent.h
@@ -9,7 +9,7 @@
 class ButtonComponent : public GuiComponent
 {
 public:
-	ButtonComponent(Window* window, const std::string& text = "", const std::string& helpText = "", const std::function<void()>& func = nullptr);
+	ButtonComponent(Window* window, const std::string& text = "", const std::string& helpText = "", const std::function<void()>& func = nullptr, bool upperCase = true);
 
 	void setPressedFunc(std::function<void()> f);
 
@@ -18,7 +18,7 @@ public:
 	bool input(InputConfig* config, Input input) override;
 	void render(const Eigen::Affine3f& parentTrans) override;
 
-	void setText(const std::string& text, const std::string& helpText);
+	void setText(const std::string& text, const std::string& helpText, bool upperCase = true);
 
 	inline const std::string& getText() const { return mText; };
 	inline const std::function<void()>& getPressedFunc() const { return mPressedFunc; };
diff --git a/es-core/src/components/MenuComponent.cpp b/es-core/src/components/MenuComponent.cpp
index 42a26572..d35deaa1 100755
--- a/es-core/src/components/MenuComponent.cpp
+++ b/es-core/src/components/MenuComponent.cpp
@@ -196,6 +196,44 @@ std::shared_ptr<ComponentGrid> makeButtonGrid(Window* window, const std::vector<
     return buttonGrid;
 }
 
+/**
+ * Limitation: same number of button per line, same dimension per cell
+ */
+
+std::shared_ptr<ComponentGrid> makeMultiDimButtonGrid(Window* window, const std::vector< std::vector< std::shared_ptr<ButtonComponent> > >& buttons)
+{
+    int sizeX = (int) buttons.at(0).size();
+    int sizeY = (int) buttons.size();
+    const std::shared_ptr<ButtonComponent>& sampleButton = buttons.at(0).at(0);
+
+    std::shared_ptr<ComponentGrid> buttonGrid = std::make_shared<ComponentGrid>(window, Vector2i(sizeX, sizeY));
+
+    float maxWidth = 0;
+
+    for (int y = 0; y < sizeY; y++)
+    {
+        float currentWidth = 0;
+        for (int x = 0; x < sizeX; x++)
+        {
+            buttonGrid->setEntry(buttons.at(y).at(x), Vector2i(x, y), true, false);
+            currentWidth += buttons.at(y).at(x)->getSize().x();
+        }
+        maxWidth = std::max(maxWidth, currentWidth);
+    }
+
+    float buttonGridWidth = (float)BUTTON_GRID_HORIZ_PADDING * sizeX + maxWidth;
+    float buttonGridHeight =((float)BUTTON_GRID_VERT_PADDING + 2 + sampleButton->getSize().y()) * sizeY;
+
+    buttonGrid->setSize(buttonGridWidth, buttonGridHeight);
+
+    for (int x = 0; x < sizeX; x++)
+    {
+        buttonGrid->setColWidthPerc(x, (float) 1 /sizeX);
+    }
+
+    return buttonGrid;
+}
+
 std::shared_ptr<ImageComponent> makeArrow(Window* window)
 {
     auto menuTheme = MenuThemeData::getInstance()->getCurrentTheme();
diff --git a/es-core/src/components/MenuComponent.h b/es-core/src/components/MenuComponent.h
index efb7e60d..4e091aa1 100644
--- a/es-core/src/components/MenuComponent.h
+++ b/es-core/src/components/MenuComponent.h
@@ -17,6 +17,7 @@ class ButtonComponent;
 class ImageComponent;
 
 std::shared_ptr<ComponentGrid> makeButtonGrid(Window* window, const std::vector< std::shared_ptr<ButtonComponent> >& buttons);
+std::shared_ptr<ComponentGrid> makeMultiDimButtonGrid(Window* window, const std::vector< std::vector< std::shared_ptr<ButtonComponent> > >& buttons);
 std::shared_ptr<ImageComponent> makeArrow(Window* window);
 
 #define TITLE_VERT_PADDING (Renderer::getScreenHeight()*0.0637f)
diff --git a/es-core/src/guis/GuiTextEditPopupKeyboard.cpp b/es-core/src/guis/GuiTextEditPopupKeyboard.cpp
index 91f288cf..174e2ec1 100644
--- a/es-core/src/guis/GuiTextEditPopupKeyboard.cpp
+++ b/es-core/src/guis/GuiTextEditPopupKeyboard.cpp
@@ -1,17 +1,16 @@
 #include "guis/GuiTextEditPopupKeyboard.h"
 #include "components/MenuComponent.h"
 #include "Log.h"
-#include "Locale.h"
 #include "MenuThemeData.h"
 
 using namespace Eigen;
 
 GuiTextEditPopupKeyboard::GuiTextEditPopupKeyboard(Window* window, const std::string& title, const std::string& initValue,
 	const std::function<void(const std::string&)>& okCallback, bool multiLine, const std::string acceptBtnText)
-	: GuiComponent(window), mBackground(window, ":/frame.png"), mGrid(window, Vector2i(1, 7)), mMultiLine(multiLine)
+	: GuiComponent(window), mBackground(window, ":/frame.png"), mGrid(window, Vector2i(1, 4)), mMultiLine(multiLine)
 {
 	auto menuTheme = MenuThemeData::getInstance()->getCurrentTheme();
-	
+
 	mBackground.setImagePath(menuTheme->menuBackground.path);
 	mBackground.setCenterColor(menuTheme->menuBackground.color);
 	mBackground.setEdgeColor(menuTheme->menuBackground.color);
@@ -20,7 +19,6 @@ GuiTextEditPopupKeyboard::GuiTextEditPopupKeyboard(Window* window, const std::st
 	addChild(&mGrid);
 
 	mTitle = std::make_shared<TextComponent>(mWindow, strToUpper(title), menuTheme->menuTitle.font, menuTheme->menuTitle.color, ALIGN_CENTER);
-	mKeyboardGrid = std::make_shared<ComponentGrid>(mWindow, Vector2i(12, 5));
 
 	mText = std::make_shared<TextEditComponent>(mWindow);
 	mText->setValue(initValue);
@@ -34,163 +32,56 @@ GuiTextEditPopupKeyboard::GuiTextEditPopupKeyboard(Window* window, const std::st
 	// Text edit add
 	mGrid.setEntry(mText, Vector2i(0, 1), true, false, Vector2i(1, 1), GridFlags::BORDER_TOP | GridFlags::BORDER_BOTTOM);
 
+	std::vector< std::vector< std::shared_ptr<ButtonComponent> > > buttonList;
+
+    std::vector<std::array<std::string, 12> > lines;
+
+
+    lines.push_back({ "1","2","3","4","5","6","7","8","9","0","_","+" });
+    lines.push_back({ "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "=" });
+
+    lines.push_back({ "Ã ","Ã¤","Ã¨","Ã«","Ã¬","Ã¯","Ã²","Ã¶","Ã¹","Ã¼","Â¨","Â¿" });
+    lines.push_back({ "Ã¡", "Ã¢", "Ã©", "Ãª", "Ã­", "Ã®", "Ã³", "Ã´", "Ãº", "Ã»", "Ã±", "Â¡" });
+
+    lines.push_back({ "q","w","e","r","t","y","u","i","o","p","{","}" });
+    lines.push_back({ "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "[", "]" });
+
+    lines.push_back({ "a","s","d","f","g","h","j","k","l",";","\"","|" });
+    lines.push_back({ "A", "S", "D", "F", "G", "H", "J", "K", "L", ":", "'", "\\" });
+
+    // Special case, SHIFT key at position 0
+    lines.push_back({ "", "~","z","x","c","v","b","n","m",",",".","?" });
+    lines.push_back({ "", "`", "Z", "X", "C", "V", "B", "N", "M", "<", ">", "/" });
 
 	// Keyboard
 	// Case for if multiline is enabled, then don't create the keyboard.
 	if (!mMultiLine) {
-
-		// Locale for shifting upper/lower case
-		std::locale loc;
-
-		// Digit Row & Special Chara.
-		for (int k = 0; k < 12; k++) {
-			// Create string for button display name.
-			std::string strName = "";
-			strName += numRow[k];
-			strName += " ";
-			strName += numRowUp[k];
-
-			// Init button and store in Vector
-			digitButtons.push_back(std::make_shared<ButtonComponent>
-				(mWindow, strName, numRow[k], [this, k, loc] {
-				mText->startEditing();
-				if (mShift) mText->textInput(numRowUp[k]);
-				else mText->textInput(numRow[k]);
-				mText->stopEditing();
-			}));
-
-			// Send just created button into mGrid
-			//digitButtons[k]->setSize((Renderer::getScreenWidth() * 0.95f) / 16, (mText->getFont()->getHeight() + 6));
-			mKeyboardGrid->setEntry(digitButtons[k], Vector2i(k, 0), true, false);
-		}
-
-		// Accent Row & Special Chara.
-		for (int k = 0; k < 12; k++) {
-			// Create string for button display name.
-			std::string strName = "";
-			strName += specialRow[k];
-			strName += " ";
-			strName += specialRowUp[k];
-
-			// Init button and store in Vector
-			sButtons.push_back(std::make_shared<ButtonComponent>
-				(mWindow, strName, specialRow[k], [this, k, loc] {
-				mText->startEditing();
-				if (mShift) mText->textInput(specialRowUp[k]);
-				else mText->textInput(specialRow[k]);
-				mText->stopEditing();
-			}));
-
-			// Send just created button into mGrid
-			//sButtons[k]->setSize((Renderer::getScreenWidth() * 0.95f) / 16, (mText->getFont()->getHeight() + 6));
-			mKeyboardGrid->setEntry(sButtons[k], Vector2i(k, 1), true, false);
-		}
-
-		// Top row [Q - P]
-		for (int k = 0; k < 10; k++) {
-			kButtons.push_back(std::make_shared<ButtonComponent>
-				(mWindow, topRowUp[k], topRowUp[k], [this, k, loc] {
-				mText->startEditing();
-				if (mShift) mText->textInput(topRowUp[k]);
-				else mText->textInput(topRow[k]);
-				mText->stopEditing();
-			}));
-		}
-
-		// Top row - Add in the last three manualy because they're special chara [{ , }]
-		for (int k = 10; k < 12; k++) {
-			kButtons.push_back(std::make_shared<ButtonComponent>(mWindow, topRow[k], topRow[k], [this, k] {
-				mText->startEditing();
-				if (mShift) mText->textInput(topRowUp[k]);
-				else mText->textInput(topRow[k]);
-				mText->stopEditing();
-			}));
-		}
-
-		for (int k = 0; k < 12; k++) {
-			//kButtons[k]->setSize((Renderer::getScreenWidth() * 0.95f) / 16, (mText->getFont()->getHeight() + 6));
-			mKeyboardGrid->setEntry(kButtons[k], Vector2i(k, 2), true, false);
-		}
-
-		// Home row [A - L]
-		for (int k = 0; k < 9; k++) {
-			hButtons.push_back(std::make_shared<ButtonComponent>
-				(mWindow, homeRowUp[k], homeRowUp[k], [this, k, loc] {
-				mText->startEditing();
-				if (mShift) mText->textInput(homeRowUp[k]);
-				else mText->textInput(homeRow[k]);
-				mText->stopEditing();
-			}));
-		}
-
-		// Home row - Add in the last three manualy because they're special chara [" , |]
-		for (int k = 9; k < 12; k++) {
-			hButtons.push_back(std::make_shared<ButtonComponent>(mWindow, homeRow[k], homeRow[k], [this, k] {
-				mText->startEditing();
-				if (mShift) mText->textInput(homeRowUp[k]);
-				else mText->textInput(homeRow[k]);
-				mText->stopEditing();
-			}));
-		}
-
-		for (int k = 0; k < 12; k++) {
-			//hButtons[k]->setSize((Renderer::getScreenWidth() * 0.95f) / 16, (mText->getFont()->getHeight() + 6));
-			mKeyboardGrid->setEntry(hButtons[k], Vector2i(k, 3), true, false);
-		}
-
-		// Special case for shift key
-		bButtons.push_back(std::make_shared<ButtonComponent>(mWindow, "SHIFT", _("SHIFTS FOR UPPER,LOWER, AND SPECIAL"), [this] {
-			if (mShift) mShift = false;
-			else mShift = true;
-			shiftKeys();
-		}));
-
-		// Bottom row - Add in the first manualy because it is a special chara [~]
-		for (int k = 0; k < 1; k++) {
-			bButtons.push_back(std::make_shared<ButtonComponent>(mWindow, bottomRow[0], bottomRow[0], [this, k] {
-				mText->startEditing();
-				if (mShift) mText->textInput(bottomRowUp[k]);
-				else mText->textInput(bottomRow[k]);
-				mText->stopEditing();
-			}));
-		}
-
-		// Bottom row [Z - M]
-		for (int k = 1; k < 8; k++) {
-			bButtons.push_back(std::make_shared<ButtonComponent>
-				(mWindow, bottomRowUp[k], bottomRowUp[k], [this, k, loc] {
-				mText->startEditing();
-				if (mShift) mText->textInput(bottomRowUp[k]);
-				else mText->textInput(bottomRow[k]);
-				mText->stopEditing();
-			}));
-		}
-
-		// Bottom row - Add in the last three manualy because they're special chara [< , > , /]
-		for (int k = 8; k < 11; k++) {
-			bButtons.push_back(std::make_shared<ButtonComponent>(mWindow, bottomRow[k], bottomRow[k], [this, k] {
-				mText->startEditing();
-				if (mShift) mText->textInput(bottomRowUp[k]);
-				else mText->textInput(bottomRow[k]);
-				mText->stopEditing();
-			}));
-		}
-
-		// Do a sererate for loop because shift key makes it weird
-		for (int k = 0; k < 12; k++) {
-		    //removed to autosize buttons
-			//bButtons[k]->setSize((Renderer::getScreenWidth() * 0.95f) / 16, (mText->getFont()->getHeight() + 6));
-			mKeyboardGrid->setEntry(bButtons[k], Vector2i(k, 4), true, false);
-		}
-
-		// END KEYBOARD IF
+	    for (unsigned int i = 0; i < 5; i++)
+	    {
+			std::vector< std::shared_ptr<ButtonComponent> > buttons;
+	        for (unsigned int j = 0; j < 12; j++)
+            {
+	        	if (i == 4 && j == 0)
+	        	{
+					// Special case for shift key
+					mShiftButton = std::make_shared<ButtonComponent>(mWindow, "SHIFT", _("SHIFTS FOR UPPER,LOWER, AND SPECIAL"), [this] {
+						switchShift();
+					});
+					buttons.push_back(mShiftButton);
+
+	        	}
+	        	else buttons.push_back(makeButton(lines.at(2 * i).at(j), lines.at(2 * i + 1).at(j)));
+            }
+			buttonList.push_back(buttons);
+	    }
 	}
 
 	// Add keyboard keys
-	mGrid.setEntry(mKeyboardGrid, Vector2i(0, 2), true, true, Vector2i(2, 4));
+	mKeyboardGrid = makeMultiDimButtonGrid(mWindow, buttonList);
+
+	mGrid.setEntry(mKeyboardGrid, Vector2i(0, 2), true, false);
 
-	// Accept/Cancel/Delete/Space buttons
-	std::vector<std::shared_ptr<ButtonComponent> > buttons;
+	std::vector< std::shared_ptr<ButtonComponent> > buttons;
 
 	buttons.push_back(std::make_shared<ButtonComponent>(mWindow, acceptBtnText, acceptBtnText, [this, okCallback] { okCallback(mText->getValue()); delete this; }));
 	buttons.push_back(std::make_shared<ButtonComponent>(mWindow, _("SPACE"), _("SPACE"), [this] {
@@ -207,7 +98,7 @@ GuiTextEditPopupKeyboard::GuiTextEditPopupKeyboard(Window* window, const std::st
 
 	// Add buttons
 	mButtons = makeButtonGrid(mWindow, buttons);
-	mGrid.setEntry(mButtons, Vector2i(0, 6), true, false);
+	mGrid.setEntry(mButtons, Vector2i(0, 3), true, false);
 
 	// Determine size from text size
 	float textHeight = mText->getFont()->getHeight();
@@ -215,19 +106,35 @@ GuiTextEditPopupKeyboard::GuiTextEditPopupKeyboard(Window* window, const std::st
 		textHeight *= 6;
 	mText->setSize(0, textHeight);
 
-	// If multiline, set all diminsions back to default, else draw size for keyboard.
-	if (mMultiLine) {
+	// If multiline, set all size back to default, else draw size for keyboard.
+	if (mMultiLine)
+	{
 		setSize(Renderer::getScreenWidth() * 0.5f, mTitle->getFont()->getHeight() + textHeight + mKeyboardGrid->getSize().y() + 40);
 		setPosition((Renderer::getScreenWidth() - mSize.x()) / 2, (Renderer::getScreenHeight() - mSize.y()) / 2);
 	}
-	else {
-		// Set size based on ScreenHieght * .08f by the amount of keyboard rows there are.
-        //set width base on bButtons[0] (the SHIFT key) x 12 as SHIFT key is the widest
-		setSize(std::min(Renderer::getScreenWidth() * 0.99f, bButtons[0]->getSize().x() * 12 + Renderer::getScreenWidth() * 0.1f), mTitle->getFont()->getHeight() + textHeight + 40 + (Renderer::getScreenHeight() * 0.085f) * 6);
+	else
+	{
+		// Set size based on ScreenHeight * .08f by the amount of keyboard rows there are.
+        // set width base on bButtons[0] (the SHIFT key) x 12 as SHIFT key is the widest
+		setSize(std::min(Renderer::getScreenWidth() * 0.99f, mShiftButton->getSize().x() * 12 + Renderer::getScreenWidth() * 0.1f), mTitle->getFont()->getHeight() + textHeight + 40 + (Renderer::getScreenHeight() * 0.085f) * 6);
 		setPosition((Renderer::getScreenWidth() - mSize.x()) / 2, (Renderer::getScreenHeight() - mSize.y()) / 2);
 	}
 }
 
+std::shared_ptr<ButtonComponent> GuiTextEditPopupKeyboard::makeButton(const std::string& key, const std::string& shiftedKey)
+{
+    std::shared_ptr<ButtonComponent> button = std::make_shared<ButtonComponent>(mWindow, key, key, [this, key, shiftedKey] {
+        mText->startEditing();
+        if (mShift)
+        	mText->textInput(shiftedKey.c_str());
+        else
+        	mText->textInput(key.c_str());
+        mText->stopEditing();
+    }, false);
+    KeyboardButton kb(button, key, shiftedKey);
+    keyboardButtons.push_back(kb);
+    return button;
+}
 
 void GuiTextEditPopupKeyboard::onSizeChanged()
 {
@@ -235,12 +142,17 @@ void GuiTextEditPopupKeyboard::onSizeChanged()
 
 	mText->setSize(mSize.x() - 40, mText->getSize().y());
 
+	float fullHeight = mTitle->getFont()->getHeight() + mText->getSize().y() + mKeyboardGrid->getSize().y() + mButtons->getSize().y();
+
 	// update grid
-	mGrid.setRowHeightPerc(0, mTitle->getFont()->getHeight() / mSize.y());
-	mGrid.setRowHeightPerc(2, mKeyboardGrid->getSize().y() / mSize.y());
-	mGrid.setRowHeightPerc(6, mButtons->getSize().y() / mSize.y());
+	mGrid.setRowHeightPerc(0, mTitle->getFont()->getHeight() / fullHeight);
+	mGrid.setRowHeightPerc(1, mText->getSize().y() / fullHeight);
+	mGrid.setRowHeightPerc(2, mKeyboardGrid->getSize().y() / fullHeight);
+	mGrid.setRowHeightPerc(3, mButtons->getSize().y() / fullHeight);
 
 	mGrid.setSize(mSize);
+
+	mKeyboardGrid->onSizeChanged();
 }
 
 bool GuiTextEditPopupKeyboard::input(InputConfig* config, Input input)
@@ -266,17 +178,14 @@ bool GuiTextEditPopupKeyboard::input(InputConfig* config, Input input)
 	if (config->isMappedTo("PageDown", input) && input.value) {
 		mText->startEditing();
 		mText->textInput(" ");
+		mText->stopEditing();
 	}
 
 	// For Shifting (Y)
 	if (config->isMappedTo("y", input) && input.value) {
-		if (mShift) mShift = false;
-		else mShift = true;
-		shiftKeys();
+		switchShift();
 	}
 
-	
-
 	return false;
 }
 
@@ -286,57 +195,19 @@ void GuiTextEditPopupKeyboard::update(int deltatime)
 }
 
 // Shifts the keys when user hits the shift button.
-void GuiTextEditPopupKeyboard::shiftKeys() {
-	if (mShift) {
-		// FOR SHIFTING UP
-		// Change Shift button color
-		bButtons[0]->setColorShift(0xFF0000FF);
-		// Change Special chara
-		kButtons[10]->setText("[", "[");
-		kButtons[11]->setText("]", "]");
-		hButtons[9]->setText(":", ":");
-		hButtons[10]->setText("'", "'");
-		hButtons[11]->setText("\\", "\\");
-		bButtons[1]->setText("`", "`");
-		bButtons[9]->setText("<", "<");
-		bButtons[10]->setText(">", ">");
-		bButtons[11]->setText("/", "/");
-		// Resize Special chara key
-		/*kButtons[10]->setSize((Renderer::getScreenWidth() * 0.95f) / 12, (mText->getFont()->getHeight() + 6));
-		kButtons[11]->setSize((Renderer::getScreenWidth() * 0.95f) / 12, (mText->getFont()->getHeight() + 6));
-		hButtons[9]->setSize((Renderer::getScreenWidth() * 0.95f) / 12, (mText->getFont()->getHeight() + 6));
-		hButtons[10]->setSize((Renderer::getScreenWidth() * 0.95f) / 12, (mText->getFont()->getHeight() + 6));
-		hButtons[11]->setSize((Renderer::getScreenWidth() * 0.95f) / 12, (mText->getFont()->getHeight() + 6));
-		bButtons[1]->setSize((Renderer::getScreenWidth() * 0.95f) / 12, (mText->getFont()->getHeight() + 6));
-		bButtons[9]->setSize((Renderer::getScreenWidth() * 0.95f) / 12, (mText->getFont()->getHeight() + 6));
-		bButtons[10]->setSize((Renderer::getScreenWidth() * 0.95f) / 12, (mText->getFont()->getHeight() + 6));
-		bButtons[11]->setSize((Renderer::getScreenWidth() * 0.95f) / 12, (mText->getFont()->getHeight() + 6));*/
-	} else {
-		// UNSHIFTING
-		// Remove button color
-		bButtons[0]->removeColorShift();
-		// Change Special chara
-		kButtons[10]->setText("{", "{");
-		kButtons[11]->setText("}", "}");
-		hButtons[9]->setText(";", ";");
-		hButtons[10]->setText("\"", "\"");
-		hButtons[11]->setText("|", "|");
-		bButtons[1]->setText("~", "~");
-		bButtons[9]->setText(",", ",");
-		bButtons[10]->setText(".", ".");
-		bButtons[11]->setText("?", "?");
-		// Resize Special chara key
-		/*kButtons[10]->setSize((Renderer::getScreenWidth() * 0.95f) / 12, (mText->getFont()->getHeight() + 6));
-		kButtons[11]->setSize((Renderer::getScreenWidth() * 0.95f) / 12, (mText->getFont()->getHeight() + 6));
-		hButtons[9]->setSize((Renderer::getScreenWidth() * 0.95f) / 12, (mText->getFont()->getHeight() + 6));
-		hButtons[10]->setSize((Renderer::getScreenWidth() * 0.95f) / 12, (mText->getFont()->getHeight() + 6));
-		hButtons[11]->setSize((Renderer::getScreenWidth() * 0.95f) / 12, (mText->getFont()->getHeight() + 6));
-		bButtons[1]->setSize((Renderer::getScreenWidth() * 0.95f) / 12, (mText->getFont()->getHeight() + 6));
-		bButtons[9]->setSize((Renderer::getScreenWidth() * 0.95f) / 12, (mText->getFont()->getHeight() + 6));
-		bButtons[10]->setSize((Renderer::getScreenWidth() * 0.95f) / 12, (mText->getFont()->getHeight() + 6));
-		bButtons[11]->setSize((Renderer::getScreenWidth() * 0.95f) / 12, (mText->getFont()->getHeight() + 6));*/
-	}
-
+void GuiTextEditPopupKeyboard::switchShift()
+{
+	mShift = !mShift;
+	if (mShift)
+		mShiftButton->setColorShift(0xFF0000FF);
+	else
+		mShiftButton->removeColorShift();
+
+    for (auto & kb: keyboardButtons)
+    {
+		const std::string& text = mShift ? kb.shiftedKey : kb.key;
+    	kb.button->setText(text, text, false);
+    }
 }
 
 std::vector<HelpPrompt> GuiTextEditPopupKeyboard::getHelpPrompts()
diff --git a/es-core/src/guis/GuiTextEditPopupKeyboard.h b/es-core/src/guis/GuiTextEditPopupKeyboard.h
index 909db1e0..859b9630 100644
--- a/es-core/src/guis/GuiTextEditPopupKeyboard.h
+++ b/es-core/src/guis/GuiTextEditPopupKeyboard.h
@@ -18,42 +18,31 @@
 	std::vector<HelpPrompt> getHelpPrompts() override;
 
 private:
-	void shiftKeys();
+    class KeyboardButton
+    {
+    public:
+        std::shared_ptr<ButtonComponent> button;
+		const std::string key;
+		const std::string shiftedKey;
+        KeyboardButton(const std::shared_ptr<ButtonComponent> b, const std::string& k, const std::string& sk): button(b), key(k), shiftedKey(sk) {};
+    };
 
-	NinePatchComponent mBackground;
+	void switchShift();
+    std::shared_ptr<ButtonComponent> makeButton(const std::string& key, const std::string& shiftedKey);
+
+    NinePatchComponent mBackground;
 	ComponentGrid mGrid;
 
-	// Vectors for button rows
-	std::vector< std::shared_ptr<ButtonComponent> > buttons;
-	std::vector< std::shared_ptr<ButtonComponent> > kButtons;
-	std::vector< std::shared_ptr<ButtonComponent> > hButtons;
-	std::vector< std::shared_ptr<ButtonComponent> > bButtons;
-	std::vector< std::shared_ptr<ButtonComponent> > digitButtons;
-	std::vector< std::shared_ptr<ButtonComponent> > sButtons;
+	std::vector< KeyboardButton > keyboardButtons;
 
 	std::shared_ptr<TextComponent> mTitle;
 	std::shared_ptr<TextEditComponent> mText;
 	std::shared_ptr<ComponentGrid> mKeyboardGrid;
 	std::shared_ptr<ComponentGrid> mButtonGrid;
-	std::shared_ptr<ComponentGrid> mNewGrid;
 	std::shared_ptr<ComponentGrid> mButtons;
 
-	// Define keyboard key rows.
-	const char* numRow[12] = { "1","2","3","4","5","6","7","8","9","0","_","+" };
-	const char* numRowUp[12] = { "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "=" };
-	const char* specialRow[12] = { "à","ä","è","ë","ì","ï","ò","ö","ù","ü","¨","¿" };
-	const char* specialRowUp[12] = { "á", "â", "é", "ê", "í", "î", "ó", "ô", "ú", "û", "ñ", "¡" };
-	const char* topRow[12] = { "q","w","e","r","t","y","u","i","o","p","{","}" };
-	const char* topRowUp[12] = { "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "[", "]" };		// Just so I don't have to deal with toupper
-	const char* homeRow[12] = { "a","s","d","f","g","h","j","k","l",";","\"","|" };
-	const char* homeRowUp[12] = { "A", "S", "D", "F", "G", "H", "J", "K", "L", ":", "'", "\\" };
-	const char* bottomRow[11] = { "~","z","x","c","v","b","n","m",",",".","?" };						// Shift is handled in the constructor
-	const char* bottomRowUp[11] = { "`", "Z", "X", "C", "V", "B", "N", "M", "<", ">", "/" };
-
-	int mxIndex = 0;		// Stores the X index and makes every grid the same.
-
 	bool mMultiLine;
 	bool mShift = false;
-	bool mShiftChange = false;
+	std::shared_ptr<ButtonComponent> mShiftButton;
 };
 
