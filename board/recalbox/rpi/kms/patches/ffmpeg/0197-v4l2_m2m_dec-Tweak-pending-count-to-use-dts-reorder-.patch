From 9f48aa8159aa3abe3e3e9c8fd8f91fca719e96e6 Mon Sep 17 00:00:00 2001
From: John Cox <jc@kynesim.co.uk>
Date: Sun, 4 Jun 2023 13:37:59 +0000
Subject: [PATCH 197/222] v4l2_m2m_dec: Tweak pending count to use dts &
 reorder size

(cherry picked from commit ca438b382c90f9a5f58f4708205e6ac25395db2a)
---
 libavcodec/v4l2_m2m.h     |  1 +
 libavcodec/v4l2_m2m_dec.c | 53 +++++++++++++++++++++++++++++++--------
 2 files changed, 43 insertions(+), 11 deletions(-)

diff --git a/libavcodec/v4l2_m2m.h b/libavcodec/v4l2_m2m.h
index ded1478a49..a506e69d67 100644
--- a/libavcodec/v4l2_m2m.h
+++ b/libavcodec/v4l2_m2m.h
@@ -115,6 +115,7 @@ typedef struct V4L2m2mContext {
 
     /* req pkt */
     int req_pkt;
+    int reorder_size;
 
     /* Ext data sent */
     int extdata_sent;
diff --git a/libavcodec/v4l2_m2m_dec.c b/libavcodec/v4l2_m2m_dec.c
index b25779fd3e..80d131eae4 100644
--- a/libavcodec/v4l2_m2m_dec.c
+++ b/libavcodec/v4l2_m2m_dec.c
@@ -121,13 +121,18 @@ log_dump(void * logctx, int lvl, const void * const data, const size_t len)
 }
 #endif
 
-static int64_t pts_stats_guess(const pts_stats_t * const stats)
+static unsigned int pts_stats_interval(const pts_stats_t * const stats)
+{
+    return stats->last_interval;
+}
+
+static int64_t pts_stats_guess(const pts_stats_t * const stats, const int fail_bad_guess)
 {
     if (stats->last_count <= 1)
         return stats->last_pts;
     if (stats->last_pts == AV_NOPTS_VALUE ||
-            stats->last_interval == 0 ||
-            stats->last_count >= STATS_LAST_COUNT_MAX)
+            fail_bad_guess && (stats->last_interval == 0 ||
+                               stats->last_count >= STATS_LAST_COUNT_MAX))
         return AV_NOPTS_VALUE;
     return stats->last_pts + (int64_t)(stats->last_count - 1) * (int64_t)stats->last_interval;
 }
@@ -350,7 +355,7 @@ FF_DISABLE_DEPRECATION_WARNINGS
     frame->pkt_pts = frame->pts;
 FF_ENABLE_DEPRECATION_WARNINGS
 #endif
-    frame->best_effort_timestamp = pts_stats_guess(ps);
+    frame->best_effort_timestamp = pts_stats_guess(ps, 1);
     // If we can't guess from just PTS - try DTS
     if (frame->best_effort_timestamp == AV_NOPTS_VALUE)
         frame->best_effort_timestamp = frame->pkt_dts;
@@ -385,15 +390,25 @@ xlat_init(xlat_track_t * const x)
 }
 
 static int
-xlat_pending(const xlat_track_t * const x)
+xlat_pending(const V4L2m2mContext * const s)
 {
+    const xlat_track_t *const x = &s->xlat;
     unsigned int n = x->track_no % FF_V4L2_M2M_TRACK_SIZE;
     int i;
-    const int64_t now = x->last_pts;
+    const int64_t now = pts_stats_guess(&s->pts_stat, 0);
+    int64_t first_dts = AV_NOPTS_VALUE;
+    int no_dts_count = 0;
+    unsigned int interval = pts_stats_interval(&s->pts_stat);
 
     for (i = 0; i < FF_V4L2_M2M_TRACK_SIZE; ++i, n = (n - 1) & (FF_V4L2_M2M_TRACK_SIZE - 1)) {
         const V4L2m2mTrackEl * const t = x->track_els + n;
 
+        if (first_dts == AV_NOPTS_VALUE)
+            if (t->dts == AV_NOPTS_VALUE)
+                ++no_dts_count;
+            else
+                first_dts = t->dts;
+
         // Discard only set on never-set or flushed entries
         // So if we get here we've never successfully decoded a frame so allow
         // more frames into the buffer before stalling
@@ -413,6 +428,18 @@ xlat_pending(const xlat_track_t * const x)
             break;
     }
 
+    if (first_dts != AV_NOPTS_VALUE && now != AV_NOPTS_VALUE && interval != 0 && s->reorder_size != 0) {
+        const int iframes = (first_dts - now) / (int)interval;
+        const int t = iframes - s->reorder_size + no_dts_count;
+
+//        av_log(s->avctx, AV_LOG_DEBUG, "Last:%"PRId64", Now:%"PRId64", First:%"PRId64", delta=%"PRId64", frames=%d, nodts=%d\n",
+//               x->last_dts, now, first_dts, first_dts - now, iframes, no_dts_count);
+
+        if (iframes > 0 && iframes < 64 && t < i) {
+            return t;
+        }
+    }
+
     return i;
 }
 
@@ -593,12 +620,12 @@ static int qbuf_wait(AVCodecContext * const avctx, V4L2Context * const ctx)
 static int v4l2_receive_frame(AVCodecContext *avctx, AVFrame *frame)
 {
     V4L2m2mContext *const s = ((V4L2m2mPriv*)avctx->priv_data)->context;
-    int src_rv = NQ_OK;
+    int src_rv = -1;
     int dst_rv = 1;  // Non-zero (done), non-negative (error) number
     unsigned int i = 0;
 
     do {
-        const int pending = xlat_pending(&s->xlat);
+        const int pending = xlat_pending(s);
         const int prefer_dq = (pending > 4);
         const int last_src_rv = src_rv;
 
@@ -974,8 +1001,10 @@ static uint32_t max_coded_size(const AVCodecContext * const avctx)
 }
 
 static void
-parse_extradata(AVCodecContext *avctx)
+parse_extradata(AVCodecContext * const avctx, V4L2m2mContext * const s)
 {
+    s->reorder_size = 0;
+
     if (!avctx->extradata || !avctx->extradata_size)
         return;
 
@@ -1004,6 +1033,7 @@ parse_extradata(AVCodecContext *avctx)
                     avctx->profile = ff_h264_get_profile(sps);
                     avctx->level = sps->level_idc;
                 }
+                s->reorder_size = sps->num_reorder_frames;
             }
             ff_h264_ps_uninit(&ps);
             break;
@@ -1033,6 +1063,7 @@ parse_extradata(AVCodecContext *avctx)
                 if (sps) {
                     avctx->profile = sps->ptl.general_ptl.profile_idc;
                     avctx->level   = sps->ptl.general_ptl.level_idc;
+                    s->reorder_size = sps->temporal_layer[sps->max_sub_layers - 1].max_dec_pic_buffering;
                 }
             }
             ff_hevc_ps_uninit(&ps);
@@ -1065,12 +1096,12 @@ static av_cold int v4l2_decode_init(AVCodecContext *avctx)
         avctx->ticks_per_frame = 2;
     }
 
-    parse_extradata(avctx);
-
     ret = ff_v4l2_m2m_create_context(priv, &s);
     if (ret < 0)
         return ret;
 
+    parse_extradata(avctx, s);
+
     xlat_init(&s->xlat);
     pts_stats_init(&s->pts_stat, avctx, "decoder");
 
-- 
2.45.2

