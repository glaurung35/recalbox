--- kodi-18.5-Leia/xbmc/utils/EGLUtils.cpp.orig	2020-05-16 23:24:11.734327978 +0200
+++ kodi-18.5-Leia/xbmc/utils/EGLUtils.cpp	2020-05-16 23:22:47.567437974 +0200
@@ -98,7 +98,7 @@
 std::map<EGLint, const char*> eglErrorType =
 {
 //! @todo remove when Raspberry Pi updates their EGL headers
-#if !defined(TARGET_RASPBERRY_PI)
+#if !defined(TARGET_RASPBERRY_PI) && !__GBM__
   X(EGL_DEBUG_MSG_CRITICAL_KHR),
   X(EGL_DEBUG_MSG_ERROR_KHR),
   X(EGL_DEBUG_MSG_WARN_KHR),
@@ -110,7 +110,7 @@
 } // namespace
 
 //! @todo remove when Raspberry Pi updates their EGL headers
-#if !defined(TARGET_RASPBERRY_PI)
+#if !defined(TARGET_RASPBERRY_PI) && !__GBM__
 void EglErrorCallback(EGLenum error, const char *command, EGLint messageType, EGLLabelKHR threadLabel, EGLLabelKHR objectLabel, const char* message)
 {
   std::string errorStr;
@@ -190,7 +190,7 @@
 : m_platform{platform}
 {
 //! @todo remove when Raspberry Pi updates their EGL headers
-#if !defined(TARGET_RASPBERRY_PI)
+#if !defined(TARGET_RASPBERRY_PI) && !__GBM__
   if (CEGLUtils::HasClientExtension("EGL_KHR_debug"))
   {
     auto eglDebugMessageControl = CEGLUtils::GetRequiredProcAddress<PFNEGLDEBUGMESSAGECONTROLKHRPROC>("eglDebugMessageControlKHR");
80c80
< #if defined(GL_KHR_debug) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI)
---
> #if defined(GL_KHR_debug) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI) && !__GBM__
45c45
< #if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI)
---
> #if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI) && !__GBM__
58c58
< #if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI)
---
> #if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI) && !__GBM__
72c72
< #if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI)
---
> #if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI) && !__GBM__
--- kodi-18.5-Leia/xbmc/rendering/gles/RenderSystemGLES.cpp.orig	2020-05-19 12:34:35.971395396 +0200
+++ kodi-18.5-Leia/xbmc/rendering/gles/RenderSystemGLES.cpp	2020-05-19 12:34:39.787339392 +0200
@@ -77,7 +77,7 @@
   m_RenderExtensions += " ";
 
 //! @todo remove TARGET_RASPBERRY_PI when Raspberry Pi updates their GL headers
-#if defined(GL_KHR_debug) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI)
+#if defined(GL_KHR_debug) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI) && !__GBM__
   if (CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_openGlDebugging)
   {
     if (IsExtSupported("GL_KHR_debug"))
--- kodi-18.5-Leia/xbmc/utils/GLUtils.cpp.orig	2020-05-19 13:54:50.269268157 +0200
+++ kodi-18.5-Leia/xbmc/utils/GLUtils.cpp	2020-05-19 13:55:41.332529120 +0200
@@ -42,7 +42,7 @@
 std::map<GLenum, const char*> glErrorSource =
 {
 //! @todo remove TARGET_RASPBERRY_PI when Raspberry Pi updates their GL headers
-#if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI)
+#if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI) && !__GBM__
   X(GL_DEBUG_SOURCE_API_KHR),
   X(GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR),
   X(GL_DEBUG_SOURCE_SHADER_COMPILER_KHR),
@@ -55,7 +55,7 @@
 std::map<GLenum, const char*> glErrorType =
 {
 //! @todo remove TARGET_RASPBERRY_PI when Raspberry Pi updates their GL headers
-#if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI)
+#if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI) && !__GBM__
   X(GL_DEBUG_TYPE_ERROR_KHR),
   X(GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR),
   X(GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR),
@@ -69,7 +69,7 @@
 std::map<GLenum, const char*> glErrorSeverity =
 {
 //! @todo remove TARGET_RASPBERRY_PI when Raspberry Pi updates their GL headers
-#if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI)
+#if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI) && !__GBM__
   X(GL_DEBUG_SEVERITY_HIGH_KHR),
   X(GL_DEBUG_SEVERITY_MEDIUM_KHR),
   X(GL_DEBUG_SEVERITY_LOW_KHR),
