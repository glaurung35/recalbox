diff --git a/src/frontend-common/sdl_controller_interface.cpp b/src/frontend-common/sdl_controller_interface.cpp
index 20e81daf..becec032 100644
--- a/src/frontend-common/sdl_controller_interface.cpp
+++ b/src/frontend-common/sdl_controller_interface.cpp
@@ -44,6 +44,7 @@ bool SDLControllerInterface::Initialize(CommonHostInterface* host_interface)
     Log_ErrorPrintf("SDL_InitSubSystem(SDL_INIT_JOYSTICK |SDL_INIT_GAMECONTROLLER | SDL_INIT_HAPTIC) failed");
     return false;
   }
+  SDL_JoystickEventState(SDL_ENABLE);
 
   // we should open the controllers as the connected events come in, so no need to do any more here
   m_sdl_subsystem_initialized = true;
@@ -95,7 +96,7 @@ bool SDLControllerInterface::ProcessSDLEvent(const SDL_Event* event)
 {
   switch (event->type)
   {
-    case SDL_CONTROLLERDEVICEADDED:
+    /*case SDL_CONTROLLERDEVICEADDED:
     {
       Log_InfoPrintf("Controller %d inserted", event->cdevice.which);
       OpenGameController(event->cdevice.which);
@@ -114,11 +115,11 @@ bool SDLControllerInterface::ProcessSDLEvent(const SDL_Event* event)
 
     case SDL_CONTROLLERBUTTONDOWN:
     case SDL_CONTROLLERBUTTONUP:
-      return HandleControllerButtonEvent(&event->cbutton);
+      return HandleControllerButtonEvent(&event->cbutton);*/
 
     case SDL_JOYDEVICEADDED:
-      if (SDL_IsGameController(event->jdevice.which))
-        return true;
+      //if (SDL_IsGameController(event->jdevice.which))
+      //  return true;
 
       Log_InfoPrintf("Joystick %d inserted", event->jdevice.which);
       OpenJoystick(event->jdevice.which);
diff --git a/src/frontend-common/sdl_controller_interface.h b/src/frontend-common/sdl_controller_interface.h
index 06963a5c..c1b5d569 100644
--- a/src/frontend-common/sdl_controller_interface.h
+++ b/src/frontend-common/sdl_controller_interface.h
@@ -46,7 +46,7 @@ private:
   enum : int
   {
     MAX_NUM_AXES = 7,
-    MAX_NUM_BUTTONS = 16,
+    MAX_NUM_BUTTONS = 32,
   };
 
   struct ControllerData
@@ -68,7 +68,7 @@ private:
     std::array<AxisCallback, MAX_NUM_BUTTONS> button_axis_mapping;
     std::vector<std::array<ButtonCallback, 4>> hat_button_mapping;
 
-    ALWAYS_INLINE bool IsGameController() const { return (game_controller != nullptr); }
+    ALWAYS_INLINE bool IsGameController() const { return false; /*(game_controller != nullptr);*/ }
   };
 
   using ControllerDataVector = std::vector<ControllerData>;
