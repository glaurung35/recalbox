diff --git a/src/core/analog_controller.cpp b/src/core/analog_controller.cpp
index 5da66129..fb5a8cc2 100644
--- a/src/core/analog_controller.cpp
+++ b/src/core/analog_controller.cpp
@@ -147,6 +147,18 @@ bool AnalogController::GetButtonState(s32 button_code) const
 
 void AnalogController::SetButtonState(Button button, bool pressed)
 {
+  if (button == Button::Start)
+  {
+    m_start_pressed = pressed;
+    //Log_ErrorPrintf("AnalogController: START %s", pressed ? "PRESSED" : "RELEASED");
+  }
+  if (button == Button::Hotkey)
+  {
+    m_hotkey_pressed = pressed;
+    //Log_ErrorPrintf("AnalogController: HOTKEY %s", pressed ? "PRESSED" : "RELEASED");
+  }
+  if (QuitRequested()) g_host_interface->RequestExit();
+
   if (button == Button::Analog)
   {
     // analog toggle
@@ -742,6 +754,7 @@ std::optional<s32> AnalogController::StaticGetButtonCodeByName(std::string_view
   BUTTON(Cross);
   BUTTON(Square);
   BUTTON(Analog);
+  BUTTON(Hotkey);
 
   return std::nullopt;
 
@@ -774,7 +787,8 @@ Controller::ButtonList AnalogController::StaticGetButtonNames()
           {TRANSLATABLE("AnalogController", "R2"), static_cast<s32>(Button::R2)},
           {TRANSLATABLE("AnalogController", "L3"), static_cast<s32>(Button::L3)},
           {TRANSLATABLE("AnalogController", "R3"), static_cast<s32>(Button::R3)},
-          {TRANSLATABLE("AnalogController", "Analog"), static_cast<s32>(Button::Analog)}};
+          {TRANSLATABLE("AnalogController", "Analog"), static_cast<s32>(Button::Analog)},
+          {TRANSLATABLE("AnalogController", "Hotkey"), static_cast<s32>(Button::Hotkey)}};
 }
 
 u32 AnalogController::StaticGetVibrationMotorCount()
diff --git a/src/core/analog_controller.h b/src/core/analog_controller.h
index 659516d1..a273801a 100644
--- a/src/core/analog_controller.h
+++ b/src/core/analog_controller.h
@@ -36,6 +36,7 @@ public:
     Cross = 14,
     Square = 15,
     Analog = 16,
+    Hotkey = 17,
     Count
   };
 
diff --git a/src/core/controller.cpp b/src/core/controller.cpp
index e4fd7b22..6ea5790b 100644
--- a/src/core/controller.cpp
+++ b/src/core/controller.cpp
@@ -7,7 +7,11 @@
 #include "negcon.h"
 #include "playstation_mouse.h"
 
-Controller::Controller() = default;
+Controller::Controller()
+  : m_start_pressed(false)
+  , m_hotkey_pressed(false)
+{
+}
 
 Controller::~Controller() = default;
 
diff --git a/src/core/controller.h b/src/core/controller.h
index 28dafd4e..c1e5969c 100644
--- a/src/core/controller.h
+++ b/src/core/controller.h
@@ -13,6 +13,10 @@ class HostInterface;
 
 class Controller
 {
+protected:
+  bool m_start_pressed;
+  bool m_hotkey_pressed;
+
 public:
   enum class AxisType : u8
   {
@@ -27,6 +31,9 @@ public:
   Controller();
   virtual ~Controller();
 
+  /// Returns Quit request (HK+Start)
+  bool QuitRequested() const { return m_start_pressed && m_hotkey_pressed; }
+
   /// Returns the type of controller.
   virtual ControllerType GetType() const = 0;
 
diff --git a/src/core/digital_controller.cpp b/src/core/digital_controller.cpp
index 8b4af20c..9a003140 100644
--- a/src/core/digital_controller.cpp
+++ b/src/core/digital_controller.cpp
@@ -1,8 +1,10 @@
 #include "digital_controller.h"
+#include "common/log.h"
 #include "common/assert.h"
 #include "common/state_wrapper.h"
 #include "host_interface.h"
 #include "system.h"
+Log_SetChannel(DigitalController);
 
 DigitalController::DigitalController() = default;
 
@@ -53,6 +55,18 @@ bool DigitalController::GetButtonState(s32 button_code) const
 
 void DigitalController::SetButtonState(Button button, bool pressed)
 {
+  if (button == Button::Start)
+  {
+    m_start_pressed = pressed;
+    //Log_ErrorPrintf("AnalogController: START %s", pressed ? "PRESSED" : "RELEASED");
+  }
+  if (button == Button::Hotkey)
+  {
+    m_hotkey_pressed = pressed;
+    //Log_ErrorPrintf("AnalogController: HOTKEY %s", pressed ? "PRESSED" : "RELEASED");
+  }
+  if (QuitRequested()) g_host_interface->RequestExit();
+
   const u16 bit = u16(1) << static_cast<u8>(button);
   if (pressed)
   {
@@ -180,6 +194,7 @@ std::optional<s32> DigitalController::StaticGetButtonCodeByName(std::string_view
   BUTTON(Circle);
   BUTTON(Cross);
   BUTTON(Square);
+  BUTTON(Hotkey);
 
   return std::nullopt;
 
@@ -206,7 +221,8 @@ Controller::ButtonList DigitalController::StaticGetButtonNames()
           {TRANSLATABLE("DigitalController", "L1"), static_cast<s32>(Button::L1)},
           {TRANSLATABLE("DigitalController", "L2"), static_cast<s32>(Button::L2)},
           {TRANSLATABLE("DigitalController", "R1"), static_cast<s32>(Button::R1)},
-          {TRANSLATABLE("DigitalController", "R2"), static_cast<s32>(Button::R2)}};
+          {TRANSLATABLE("DigitalController", "R2"), static_cast<s32>(Button::R2)},
+          {TRANSLATABLE("DigitalController", "Hotkey"), static_cast<s32>(Button::Hotkey)}};
 }
 
 u32 DigitalController::StaticGetVibrationMotorCount()
diff --git a/src/core/digital_controller.h b/src/core/digital_controller.h
index 8d3f1f29..313815a7 100644
--- a/src/core/digital_controller.h
+++ b/src/core/digital_controller.h
@@ -25,6 +25,7 @@ public:
     Circle = 13,
     Cross = 14,
     Square = 15,
+    Hotkey = 16,
     Count
   };
 
diff --git a/src/core/host_interface.h b/src/core/host_interface.h
index 0b03a90f..814ed16c 100644
--- a/src/core/host_interface.h
+++ b/src/core/host_interface.h
@@ -39,6 +39,9 @@ public:
   HostInterface();
   virtual ~HostInterface();
 
+  /// Request the frontend to exit.
+  virtual void RequestExit() = 0;
+
   /// Access to host display.
   ALWAYS_INLINE HostDisplay* GetDisplay() const { return m_display.get(); }
 
diff --git a/src/frontend-common/common_host_interface.h b/src/frontend-common/common_host_interface.h
index 202a3627..68b10ebb 100644
--- a/src/frontend-common/common_host_interface.h
+++ b/src/frontend-common/common_host_interface.h
@@ -103,9 +103,6 @@ public:
   /// Returns the name of the frontend.
   virtual const char* GetFrontendName() const = 0;
 
-  /// Request the frontend to exit.
-  virtual void RequestExit() = 0;
-
   /// Runs an event next frame as part of the event loop.
   virtual void RunLater(std::function<void()> func) = 0;
 
