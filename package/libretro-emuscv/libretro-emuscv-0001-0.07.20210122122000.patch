diff --git a/Makefile.libretro b/Makefile.libretro
index d1ad0b2..d309e21 100755
--- a/Makefile.libretro
+++ b/Makefile.libretro
@@ -3,7 +3,7 @@ TARGET_NAME := emuscv
 EMUSCV_VERSION_MAJOR := 0
 EMUSCV_VERSION_MINOR := 07
 #EMUSCV_VERSION_DATETIME := $(shell date -u +'%Y%m%d%H%M%S')
-EMUSCV_VERSION_DATETIME := '20210115130800'
+EMUSCV_VERSION_DATETIME := '20210122122000'
 EMUSCV_VERSION := $(EMUSCV_VERSION_MAJOR).$(EMUSCV_VERSION_MINOR).$(EMUSCV_VERSION_DATETIME)
 
 DEBUG = 1
@@ -87,20 +87,30 @@ ifneq (,$(findstring unix,$(platform)))
 		CXXFLAGS += $(CFLAGS)
 		ifneq (,$(findstring rpi0,$(platform)))
 			PLATFORM_DEFINES += -D_RASPBERRYPI0
+			PLATFORM_DEFINES += -D_RESOLUTION_AUTO_LOW
 			# CFLAGS += -march=armv6j -mfpu=vfp -mfloat-abi=hard
 		else ifneq (,$(findstring rpi1,$(platform)))
 			PLATFORM_DEFINES += -D_RASPBERRYPI1
+			PLATFORM_DEFINES += -D_RESOLUTION_AUTO_LOW
 			CFLAGS += -march=armv6j -mfpu=vfp -mfloat-abi=hard
 		else ifneq (,$(findstring rpi2,$(platform)))
 			PLATFORM_DEFINES += -D_RASPBERRYPI2
+			PLATFORM_DEFINES += -D_RESOLUTION_AUTO_LOW
 			CFLAGS += -mcpu=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard
 		else ifneq (,$(findstring rpi3,$(platform)))
 			PLATFORM_DEFINES += -D_RASPBERRYPI3
+			PLATFORM_DEFINES += -D_RESOLUTION_AUTO_LOW
 			CFLAGS += -mcpu=cortex-a53 -mfpu=neon-fp-armv8 -mfloat-abi=hard
 		else ifneq (,$(findstring rpi4,$(platform)))
 			PLATFORM_DEFINES += -D_RASPBERRYPI4
+			PLATFORM_DEFINES += -D_RESOLUTION_AUTO_LOW
 			CFLAGS += -mcpu=cortex-a72 -mfpu=neon-fp-armv8 -mfloat-abi=hard
+		else
+			PLATFORM_DEFINES += -D_RASPBERRYPI
+			PLATFORM_DEFINES += -D_RESOLUTION_AUTO_MEDIUM
 		endif
+	else
+		PLATFORM_DEFINES += -D_RESOLUTION_AUTO_HIGH
 	endif
 	
 ## (armv7 a7, hard point, neon based) ### 
@@ -133,6 +143,7 @@ ifneq (,$(findstring unix,$(platform)))
 # OS X
 else ifeq ($(platform),osx)
 	PLATFORM_DEFINES := -D_OSX -D__APPLE__
+	PLATFORM_DEFINES += -D_RESOLUTION_AUTO_HIGH
 	TARGET := $(TARGET_NAME)_libretro.dylib
 	CC = clang
 	CXX = c++
@@ -580,6 +591,7 @@ else ifeq ($(platform),osx)
 # Windows
 else
 	PLATFORM_DEFINES := -D_WIN32
+	PLATFORM_DEFINES += -D_RESOLUTION_AUTO_HIGH
 	TARGET := $(TARGET_NAME)_libretro.dll
 	HAVE_NETWORK = 1
 	CC = gcc
diff --git a/changelog.txt b/changelog.txt
index f506f2d..a5fe077 100755
--- a/changelog.txt
+++ b/changelog.txt
@@ -15,9 +15,10 @@ Libretro-EmuSCV (EPOCH/YENO Super Cassette Vision Emulator)
 
 
 ***********************************************************
-* Libretro-EmuSCV v0.07.20210115130800
+* Libretro-EmuSCV v0.07.20210122122000
 ***********************************************************
-- Added Audio (enhanced support for PCM channel)
+- Added Audio (enhanced support for PCM, noise and square channels)
+- Modified audio support
 
 ***********************************************************
 * Libretro-EmuSCV v0.06.20201223231000
diff --git a/src/common.cpp b/src/common.cpp
index 9d8c131..ca2b5cb 100755
--- a/src/common.cpp
+++ b/src/common.cpp
@@ -4,6 +4,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2013.01.17-
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ common ]
 */
 
diff --git a/src/common.h b/src/common.h
index f7eb566..281b659 100755
--- a/src/common.h
+++ b/src/common.h
@@ -4,6 +4,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.18 -
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ common header ]
 */
 
diff --git a/src/config.cpp b/src/config.cpp
index 783e918..64c333f 100755
--- a/src/config.cpp
+++ b/src/config.cpp
@@ -4,6 +4,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.18 -
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ config ]
 */
 
@@ -707,9 +711,9 @@ void DLL_PREFIX apply_display_config()
 			break;
 		case SETTING_RESOLUTION_AUTO_VAL:
 		default:
-#if defined(_RASPBERRYPI0) || defined(_RASPBERRYPI1) || defined(_RASPBERRYPI2) || defined(_RASPBERRYPI3)
+#if defined(_RESOLUTION_AUTO_LOW)
 			config.window_resolution = SETTING_RESOLUTION_LOW_VAL;
-#elif defined(_RASPBERRYPI4)
+#elif defined(_RESOLUTION_AUTO_MEDIUM)
 			config.window_resolution = SETTING_RESOLUTION_MEDIUM_VAL;
 #else
 			config.window_resolution = SETTING_RESOLUTION_HIGH_VAL;
diff --git a/src/config.h b/src/config.h
index 842695d..8c507fa 100755
--- a/src/config.h
+++ b/src/config.h
@@ -4,6 +4,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.18 -
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ config ]
 */
 
diff --git a/src/emu.cpp b/src/emu.cpp
index 0e6454e..090344e 100755
--- a/src/emu.cpp
+++ b/src/emu.cpp
@@ -4,7 +4,11 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.18 -
 
-	[ win32 emulation i/f ]
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
+	[ Emulation i/f ]
 */
 
 #if defined(_USE_QT)
@@ -196,10 +200,10 @@ bool EMU::is_frame_skippable()
 
 int EMU::run()
 {
-	if(now_suspended) {
-		osd->restore();
-		now_suspended = false;
-	}
+//	if(now_suspended) {
+//		osd->restore();
+//		now_suspended = false;
+//	}
 	osd->update_input();
 #ifdef USE_AUTO_KEY
 	update_auto_key();
@@ -208,18 +212,18 @@ int EMU::run()
 	update_joystick();
 #endif
 
-#ifdef USE_SOCKET
-#if !defined(_USE_QT) // Temporally
-	osd->update_socket();
-#endif
-#endif
-	update_media();
+//#ifdef USE_SOCKET
+//#if !defined(_USE_QT) // Temporally
+//	osd->update_socket();
+//#endif
+//#endif
+//	update_media();
 
 	// virtual machine may be driven to fill sound buffer
 	int extra_frames = 0;
 	osd->update_sound(&extra_frames);
-
-	// drive virtual machine
+//
+//	// drive virtual machine
 	if(extra_frames == 0)
 	{
 		osd->lock_vm();
@@ -258,7 +262,7 @@ void EMU::reset()
 #endif
 	if(reinitialize) {
 		// stop sound
-		osd->stop_sound();
+//		osd->stop_sound();
 		// reinitialize virtual machine
 		osd->lock_vm();
 		delete vm;
@@ -322,7 +326,7 @@ void EMU::power_off()
 {
 	osd->power_off();
 }
-
+/*
 void EMU::suspend()
 {
 	if(!now_suspended) {
@@ -330,7 +334,7 @@ void EMU::suspend()
 		now_suspended = true;
 	}
 }
-
+*/
 void EMU::lock_vm()
 {
 	osd->lock_vm();
@@ -1555,11 +1559,11 @@ bool EMU::is_video_recording()
 // sound
 // ----------------------------------------------------------------------------
 
+/*
 void EMU::mute_sound()
 {
 	osd->mute_sound();
 }
-/*
 void EMU::start_record_sound()
 {
 	osd->start_record_sound();
diff --git a/src/emu.h b/src/emu.h
index 69b39db..2470447 100755
--- a/src/emu.h
+++ b/src/emu.h
@@ -4,7 +4,11 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.18 -
 
-	[ win32 emulation i/f ]
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
+	[ Emulation i/f ]
 */
 
 #ifndef _EMUSCV_INC_EMU_H_
@@ -227,7 +231,7 @@ public:
 	void notify_power_off();
 #endif
 	void power_off();
-	void suspend();
+//	void suspend();
 	void lock_vm();
 	void unlock_vm();
 	void force_unlock_vm();
diff --git a/src/emuscv.cpp b/src/emuscv.cpp
index d9e3c62..defab06 100755
--- a/src/emuscv.cpp
+++ b/src/emuscv.cpp
@@ -1,3 +1,12 @@
+/*
+	Libretro-EmuSCV
+
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
+	[ Libretro core ]
+*/
+
 #include "emuscv.h"
 
 #include "config.h"
@@ -1353,6 +1362,9 @@ cEmuSCV::cEmuSCV()
 	key_pressed_pause = false;
 	key_pressed_reset = false;
 
+	button_keyboard_pressed = false;
+	button_menu_pressed = false;
+
 	start_up_counter_power = 0;
 	start_up_counter_logo = 0;
 
@@ -1935,8 +1947,7 @@ bool cEmuSCV::RetroLoadGame(const struct retro_game_info *info)
 //		RetroLogPrintf(RETRO_LOG_DEBUG, "[%s] Settings not updated, already loaded\n", EMUSCV_NAME);
 
 	// Create SDL main frame surface
-    frame_surface = SDL_CreateRGBSurface(0, config.window_width, config.window_height, 8*sizeof(uint32_t), 0x00ff0000, 0x0000ff00, 0x000000ff, 0xff000000);
-//frame_surface = SDL_CreateRGBSurface(0, WINDOW_WIDTH_EMUSCV, WINDOW_HEIGHT_EMUSCV, 8*sizeof(uint32_t), 0x00ff0000, 0x0000ff00, 0x000000ff, 0xff000000);
+    frame_surface = SDL_CreateRGBSurface(SDL_SWSURFACE, config.window_width, config.window_height, 8*sizeof(uint32_t), 0x00FF0000, 0x0000FF00, 0x000000FF, 0xFF000000);
     if (frame_surface == NULL)
 	{
 		RetroLogPrintf(RETRO_LOG_ERROR, "[%s] SDL main surface creation failed! %s\n", EMUSCV_NAME, SDL_GetError());
@@ -1954,7 +1965,7 @@ bool cEmuSCV::RetroLoadGame(const struct retro_game_info *info)
 //	RetroLogPrintf(RETRO_LOG_DEBUG, "[%s] SDL main surface renderer created\n", EMUSCV_NAME);
 
 	// create SDL TV static noise surface
-    noise_surface = SDL_CreateRGBSurface(0, 2*NOISE_WIDTH, 2*NOISE_HEIGHT, 8*sizeof(uint32_t), 0x00ff0000, 0x0000ff00, 0x000000ff, 0xff000000);
+    noise_surface = SDL_CreateRGBSurface(SDL_SWSURFACE, 2*NOISE_WIDTH, 2*NOISE_HEIGHT, 8*sizeof(uint32_t), 0x00FF0000, 0x0000FF00, 0x000000FF, 0xFF000000);
     if (noise_surface == NULL)
 	{
 		RetroLogPrintf(RETRO_LOG_ERROR, "[%s] SDL secondary surface creation failed! %s\n", EMUSCV_NAME, SDL_GetError());
@@ -2518,7 +2529,7 @@ void cEmuSCV::RetroRun(void)
 //			RetroLogPrintf(RETRO_LOG_DEBUG, "[%s] No SDL main surface, nothing to destroy\n", EMUSCV_NAME);
 
 		// Create SDL main frame surface
-		frame_surface = SDL_CreateRGBSurface(0, config.window_width, config.window_height, 8*sizeof(uint32_t), 0x00ff0000, 0x0000ff00, 0x000000ff, 0xff000000);
+		frame_surface = SDL_CreateRGBSurface(SDL_SWSURFACE, config.window_width, config.window_height, 8*sizeof(uint32_t), 0x00FF0000, 0x0000FF00, 0x000000FF, 0xFF000000);
 		if (frame_surface == NULL)
 		{
 			RetroLogPrintf(RETRO_LOG_ERROR, "[%s] SDL main surface creation failed! %s\n", EMUSCV_NAME, SDL_GetError());
@@ -2536,7 +2547,7 @@ void cEmuSCV::RetroRun(void)
 //		RetroLogPrintf(RETRO_LOG_DEBUG, "[%s] SDL main surface renderer created\n", EMUSCV_NAME);
 /*
 		// Create SDL TV static noise surface
-		noise_surface = SDL_CreateRGBSurface(0, 2*NOISE_WIDTH, 2*NOISE_HEIGHT, 8*sizeof(uint32_t), 0x00ff0000, 0x0000ff00, 0x000000ff, 0xff000000);
+		noise_surface = SDL_CreateRGBSurface(SDL_SWSURFACE, 2*NOISE_WIDTH, 2*NOISE_HEIGHT, 8*sizeof(uint32_t), 0x00FF0000, 0x0000FF00, 0x000000FF, 0xFF000000);
 		if (noise_surface == NULL)
 		{
 			RetroLogPrintf(RETRO_LOG_ERROR, "[%s] SDL secondary surface creation failed! %s\n", EMUSCV_NAME, SDL_GetError());
@@ -2626,8 +2637,7 @@ void cEmuSCV::RetroRun(void)
             || RetroInputState(port0, RETRO_DEVICE_KEYBOARD, 0, RETROK_DELETE);
 	keyPower = RetroInputState(port0, RETRO_DEVICE_KEYBOARD, 0, RETROK_F12);
 	keyReset = RetroInputState(port0, RETRO_DEVICE_KEYBOARD, 0, RETROK_F11);
-	keyPause = RetroInputState(port0, RETRO_DEVICE_KEYBOARD, 0, RETROK_F9)
-	        || RetroInputState(port0, RETRO_DEVICE_KEYBOARD, 0, RETROK_r);
+	keyPause = RetroInputState(port0, RETRO_DEVICE_KEYBOARD, 0, RETROK_F9);
 //	RetroLogPrintf(RETRO_LOG_DEBUG, "[%s] Imputs parsed\n", EMUSCV_NAME);
 
 	bool updated = false;
@@ -2641,8 +2651,8 @@ void cEmuSCV::RetroRun(void)
 //	else
 //		RetroLogPrintf(RETRO_LOG_DEBUG, "[%s] Settings (variables) unchanged, already loaded\n", EMUSCV_NAME);
 
-	if(escv_emu)
-	{
+//	if(!is_keyboard_displayed && !is_menu_displayed && escv_emu)
+//	{
 //		RetroLogPrintf(RETRO_LOG_DEBUG, "[%s] escv_emu exists\n", EMUSCV_NAME);
 
 		// LEFT CONTROLLER 1, orange
@@ -2666,7 +2676,7 @@ void cEmuSCV::RetroRun(void)
 												(ret1 & (1 << RETRO_DEVICE_ID_JOYPAD_B)) || (ret1 & (1 << RETRO_DEVICE_ID_JOYPAD_L)) || (ret1 & (1 << RETRO_DEVICE_ID_JOYPAD_START)),
 												(ret1 & (1 << RETRO_DEVICE_ID_JOYPAD_A)) || (ret1 & (1 << RETRO_DEVICE_ID_JOYPAD_R)) || (ret1 & (1 << RETRO_DEVICE_ID_JOYPAD_START)),
 												false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, 0, 0, 0);
-	}
+//	}
 //	else
 //		RetroLogPrintf(RETRO_LOG_DEBUG, "[%s] escv_emu don't exists\n", EMUSCV_NAME);	
 
@@ -2674,14 +2684,32 @@ void cEmuSCV::RetroRun(void)
 	// open configuration
 	if ((ret0 & (1 << RETRO_DEVICE_ID_JOYPAD_SELECT)) || (ret1 & (1 << RETRO_DEVICE_ID_JOYPAD_SELECT)))
 	{
+		if(!button_menu_pressed)
+		{
+			button_menu_pressed = true;
+//			is_menu_displayed = !is_menu_displayed
+			if(is_menu_displayed)
+				is_keyboard_displayed = false;
+		}
 	}
-
+	else
+		button_menu_pressed = false;
+	
 	// Other buttons
 	// open the console keyboard overlay
 	if((ret0 & (1 << RETRO_DEVICE_ID_JOYPAD_X)) || (ret0 & (1 << RETRO_DEVICE_ID_JOYPAD_Y)) || (ret0 & (1 << RETRO_DEVICE_ID_JOYPAD_L2)) || (ret0 & (1 << RETRO_DEVICE_ID_JOYPAD_R2)) || (ret0 & (1 << RETRO_DEVICE_ID_JOYPAD_L3)) || (ret0 & (1 << RETRO_DEVICE_ID_JOYPAD_R3))
 	|| (ret1 & (1 << RETRO_DEVICE_ID_JOYPAD_X)) || (ret1 & (1 << RETRO_DEVICE_ID_JOYPAD_Y)) || (ret1 & (1 << RETRO_DEVICE_ID_JOYPAD_L2)) || (ret1 & (1 << RETRO_DEVICE_ID_JOYPAD_R2)) || (ret1 & (1 << RETRO_DEVICE_ID_JOYPAD_L3)) || (ret1 & (1 << RETRO_DEVICE_ID_JOYPAD_R3)))
 	{
+		if(!button_keyboard_pressed)
+		{
+			button_keyboard_pressed = true;
+			is_keyboard_displayed = !is_keyboard_displayed;
+			if(is_keyboard_displayed)
+				is_menu_displayed = false;
+		}
 	}
+	else
+		button_menu_pressed = false;
 
 	if(start_up_counter_power < 150)
 	{
@@ -3073,7 +3101,18 @@ void cEmuSCV::RetroRun(void)
 //				pixelRGBA(frame_renderer, posx+x, posy+sizy-y, image_data[4*(x+y*sizx)], image_data[4*(x+y*sizx)+1], image_data[4*(x+y*sizx)+2], image_data[4*(x+y*sizx)+3]);
 //	}
 
-	// Display controls over picture?
+	// Display keyboard over picture?
+	if(is_keyboard_displayed)
+	{
+		
+	}
+	// Display menu over picture?
+	else if(is_menu_displayed)
+	{
+
+	}
+
+	// Display controls over all?
 	if(config.scv_displayinputs == SETTING_DISPLAYINPUTS_YES_VAL)
 	{
 		if(config.window_resolution == SETTING_RESOLUTION_HIGH_VAL)
@@ -3542,7 +3581,6 @@ void cEmuSCV::RetroRun(void)
 		boxRGBA(frame_renderer, posx+3+9*space, posy+7+6*space, posx+11*space, posy+5+8*space, R_OF_COLOR(color), G_OF_COLOR(color), B_OF_COLOR(color), alpha);
 //		RetroLogPrintf(RETRO_LOG_DEBUG, "[%s] Inputs drawn\n", EMUSCV_NAME);
 	}
-
 /*
 	// Call audio callback manually if not set
 	if (retro_use_audio_cb == false)
@@ -3553,11 +3591,9 @@ void cEmuSCV::RetroRun(void)
 	else
 		RetroLogPrintf(RETRO_LOG_DEBUG, "[%s] retro_use_audio_cb == true => nothing to do\n", EMUSCV_NAME);
 */
-
 	// Call audio callback
-	size_t buffer_length = AUDIO_SAMPLING_RATE/config.window_fps + 0.5;
-	size_t buffer_size = 2 * buffer_length;
-	int16_t sound_buffer[buffer_size];
+	size_t buffer_size = (AUDIO_SAMPLING_RATE / config.window_fps + 0.5);
+	int16_t sound_buffer[(buffer_size<<1)];
 	if(escv_emu && is_power_on)
 	{
 		int16_t *sound_ptr = escv_emu->get_osd()->get_sound_ptr();
@@ -3566,13 +3602,23 @@ void cEmuSCV::RetroRun(void)
 			memset(sound_buffer, 0, sizeof(sound_buffer));
 			sound_ptr = sound_buffer;
 		}
-		RetroAudioSampleBatch(sound_ptr, buffer_length);
+		else
+		{
+//			memcpy(sound_buffer, sound_ptr, sizeof(sound_buffer));
+			for(uint32_t i = 0; i < (buffer_size<<1); i++)
+			{
+//				if(sound_buffer[i] != sound_buffer[0])
+//					bool stop = true;
+				sound_buffer[i] = sound_ptr[i];
+			}
+		}
+		RetroAudioSampleBatch(sound_buffer, buffer_size);
 	}
 	else
 	{
-		for (uint32_t i = 0; i < buffer_size; i++)
+		for (uint32_t i = 0; i < (buffer_size<<1); i++)
 			sound_buffer[i] = (rand() % 256) - 128;
-		RetroAudioSampleBatch(sound_buffer, buffer_length);
+		RetroAudioSampleBatch(sound_buffer, buffer_size);
 	}
 //	RetroLogPrintf(RETRO_LOG_DEBUG, "[%s] => RetroAudioSampleBatch()\n", EMUSCV_NAME);
 
@@ -3868,6 +3914,10 @@ void cEmuSCV::RetroLoadSettings(void)
 	}
 
 	apply_display_config();
+
+	if(escv_emu)
+		escv_emu->get_osd()->reset_sound();
+
 //	RetroLogPrintf(RETRO_LOG_DEBUG, "[%s] apply_display_config()\n", EMUSCV_NAME);
 }
 
diff --git a/src/emuscv.h b/src/emuscv.h
index 8f81fd1..00b361c 100755
--- a/src/emuscv.h
+++ b/src/emuscv.h
@@ -1,3 +1,12 @@
+/*
+	Libretro-EmuSCV
+
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
+	[ Libretro core ]
+*/
+
 #ifndef _EMUSCV_INC_EMUSCV_H_
 #define _EMUSCV_INC_EMUSCV_H_
 
@@ -84,9 +93,6 @@ class cEmuSCV
 		void RetroInit(retro_audio_callback_t retro_audio_cb, retro_audio_set_state_callback_t retro_audio_set_state_cb, retro_frame_time_callback_t retro_frame_time_cb);												// Libretro: initialize the core
 		void RetroDeinit(void);												// Libretro: deinitialize the core
 		void RetroSetControllerPortDevice(unsigned port, unsigned device);	// Libretro: set controller port device
-/*
-		void RetroAudioCb(void);											// Libretro: audio callback
-*/
 		void RetroAudioSetStateCb(bool enable);								// Libretro: audio set state enable/disable callback
 		void RetroFrameTimeCb(retro_usec_t usec);							// Libretro: retro frame time callback
 		bool RetroLoadGame(const struct retro_game_info *info);				// Libretro: load game
@@ -107,10 +113,6 @@ class cEmuSCV
 		retro_input_state_t			RetroInputState;
 
 		bool retro_core_initialized;		// Is the libretro core initialized ?
-/*
-		bool retro_use_audio_cb;			// Is the libretro audio callback used ?
-		uint16_t retro_audio_phase;
-*/
 		bool retro_audio_enable;			// Is the libretro audio enabled ?
 		uint64_t retro_frame_counter;
 		retro_usec_t retro_frame_time;
@@ -139,14 +141,6 @@ class cEmuSCV
 		int run_frames_last;
 		int run_frames_total;
 		int draw_frames_total;
-//		int skip_frames;
-//		DWORD next_time;
-//		struct timespec next_time;
-//		bool prev_skip;
-//		DWORD update_fps_time;
-//		struct timespec update_fps_time;
-//		DWORD update_status_bar_time;
-//		DWORD disable_screen_saver_time;
 
 		bool key_pressed_0;
 		bool key_pressed_1;
@@ -164,6 +158,9 @@ class cEmuSCV
 		bool key_pressed_pause;
 		bool key_pressed_reset;
 
+		bool button_keyboard_pressed;
+		bool button_menu_pressed;
+
 		uint64_t start_up_counter_power;
 		uint64_t start_up_counter_logo;
 
diff --git a/src/fifo.cpp b/src/fifo.cpp
index a243115..bae8150 100755
--- a/src/fifo.cpp
+++ b/src/fifo.cpp
@@ -4,12 +4,16 @@
 	Author : Takeda.Toshiya
 	Date   : 2014.12.19-
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ fifo buffer ]
 */
 
-#include <stdlib.h>
+#include <stdlib.h>
 #ifndef _OSX 
-	#include <malloc.h>
+	#include <malloc.h>
 #endif
 #include "fifo.h"
 #include "fileio.h"
diff --git a/src/fifo.h b/src/fifo.h
index cecac39..22e0f5c 100755
--- a/src/fifo.h
+++ b/src/fifo.h
@@ -4,6 +4,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.09.17-
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ fifo buffer ]
 */
 
diff --git a/src/fileio.cpp b/src/fileio.cpp
index e0fa9c5..a920900 100755
--- a/src/fileio.cpp
+++ b/src/fileio.cpp
@@ -4,6 +4,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.18 -
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ file i/o ]
 */
 
diff --git a/src/fileio.h b/src/fileio.h
index 30cd9cf..034da7f 100755
--- a/src/fileio.h
+++ b/src/fileio.h
@@ -4,6 +4,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.18 -
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ file i/o ]
 */
 
diff --git a/src/libretro.cpp b/src/libretro.cpp
index 5b799b7..75d3442 100755
--- a/src/libretro.cpp
+++ b/src/libretro.cpp
@@ -1,3 +1,12 @@
+/*
+	Libretro-EmuSCV
+	
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
+	[Libretro mapping]
+*/
+
 // EmuSCV includes
 #include "emuscv.h"
 
diff --git a/src/md5.cpp b/src/md5.cpp
index 989635d..8e0ab88 100755
--- a/src/md5.cpp
+++ b/src/md5.cpp
@@ -1,9 +1,12 @@
 /* MD5
- Modified for use by emuSCV
  
  converted to C++ class by Frank Thilo (thilo@unix-ag.org)
  for bzflag (http://www.bzflag.org)
- 
+
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
    based on:
  
    md5.h and md5.c
diff --git a/src/md5.h b/src/md5.h
index 11ef7c6..41d3a35 100755
--- a/src/md5.h
+++ b/src/md5.h
@@ -1,9 +1,12 @@
 /* MD5
- Modified for use by emuSCV
 
  converted to C++ class by Frank Thilo (thilo@unix-ag.org)
  for bzflag (http://www.bzflag.org)
- 
+
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
    based on:
  
    md5.h and md5.c
diff --git a/src/osd/libretro/osd.cpp b/src/osd/libretro/osd.cpp
index 9be1d90..35d06dc 100755
--- a/src/osd/libretro/osd.cpp
+++ b/src/osd/libretro/osd.cpp
@@ -1,10 +1,11 @@
 /*
 	Skelton for retropc emulator
 
-	Author : Takeda.Toshiya
-	Date   : 2015.11.20-
+	For Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
 
-	[ libretro dependent ]
+	[ Libretro main ]
 */
 
 #include "osd.h"
@@ -23,7 +24,7 @@ void OSD::initialize(int rate)//, int samples)
 */
 	initialize_input();
 	initialize_screen();
-	initialize_sound(rate);//, samples);
+	initialize_sound();//rate, samples);
 /*
 #if defined(USE_MOVIE_PLAYER) || defined(USE_VIDEO_CAPTURE)
 	CoInitialize(NULL);
@@ -60,29 +61,27 @@ void OSD::power_off()
 */
 }
 
+/*
 void OSD::suspend()
 {
-/*
 #ifdef USE_MOVIE_PLAYER
 	if(now_movie_play && !now_movie_pause) {
 		pause_movie();
 		now_movie_pause = false;
 	}
 #endif
-*/
 	mute_sound();
 }
 
 void OSD::restore()
-{
-/*
+
 #ifdef USE_MOVIE_PLAYER
 	if(now_movie_play && !now_movie_pause) {
 		play_movie();
 	}
 #endif
-*/
 }
+*/
 
 void OSD::lock_vm()
 {
diff --git a/src/osd/libretro/osd.h b/src/osd/libretro/osd.h
index 78ef751..bc97643 100755
--- a/src/osd/libretro/osd.h
+++ b/src/osd/libretro/osd.h
@@ -1,10 +1,11 @@
 /*
 	Skelton for retropc emulator
 
-	Author : Marconato.Maxime
-	Date   : 2020.01.31-
+	For Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
 
-	[ libretro dependent ]
+	[ libretro ]
 */
 
 #ifndef _EMUSCV_INC_OSD_LIBRETRO_OSD_H_
@@ -16,7 +17,7 @@
 #include <unistd.h>
 #endif
 #include <SDL2/SDL.h>
-#include <SDL2_gfx/SDL2_gfxPrimitives.h>
+//#include <SDL2_gfx/SDL2_gfxPrimitives.h>
 
 /*
 #ifndef _WIN32_WINNT
@@ -405,11 +406,11 @@ private:
 	bool self_invalidate;
 
 	// sound
-	void initialize_sound(int rate);//, int samples);
+	void initialize_sound();//int rate, int samples);
 	void release_sound();
 
-	int sound_rate, sound_samples;
-	bool sound_available, sound_started, sound_muted;
+//	int sound_rate, sound_samples;
+//	bool sound_available, sound_started, sound_muted;
 	int16_t* sound_ptr;
 /*
 	LPDIRECTSOUND lpds;
@@ -485,8 +486,8 @@ public:
 	void initialize(int rate);//, int samples);
 	void release();
 	void power_off();
-	void suspend();
-	void restore();
+//	void suspend();
+//	void restore();
 	void lock_vm();
 	void unlock_vm();
 	bool is_vm_locked()
@@ -625,9 +626,10 @@ public:
 */
 	// common sound
 	void update_sound(int* extra_frames);
-	void mute_sound();
-	void stop_sound();
-	int16_t *get_sound_ptr() { return sound_ptr; };
+//	void mute_sound();
+//	void stop_sound();
+	int16_t *get_sound_ptr();
+	void reset_sound();
 /*
 	void start_record_sound();
 	void stop_record_sound();
diff --git a/src/osd/libretro/osd_console.cpp b/src/osd/libretro/osd_console.cpp
index 1e45077..b2766d1 100755
--- a/src/osd/libretro/osd_console.cpp
+++ b/src/osd/libretro/osd_console.cpp
@@ -1,10 +1,11 @@
 /*
 	Skelton for retropc emulator
 
-	Author : Takeda.Toshiya
-	Date   : 2015.11.26-
+	For Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
 
-	[ win32 console ]
+	[ Libretro console ]
 */
 
 #include "osd.h"
diff --git a/src/osd/libretro/osd_input.cpp b/src/osd/libretro/osd_input.cpp
index dde6838..aaac028 100755
--- a/src/osd/libretro/osd_input.cpp
+++ b/src/osd/libretro/osd_input.cpp
@@ -1,10 +1,11 @@
 /*
 	Skelton for retropc emulator
 
-	Author : Takeda.Toshiya
-	Date   : 2015.11.26-
+	For Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
 
-	[ win32 input ]
+	[ Libretro input ]
 */
 
 #include "osd.h"
diff --git a/src/osd/libretro/osd_screen.cpp b/src/osd/libretro/osd_screen.cpp
index bc3e7fd..cd93729 100755
--- a/src/osd/libretro/osd_screen.cpp
+++ b/src/osd/libretro/osd_screen.cpp
@@ -1,10 +1,11 @@
 /*
 	Skelton for retropc emulator
 
-	Author : Takeda.Toshiya
-	Date   : 2015.11.20-
+	For Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
 
-	[ libretro screen ]
+	[ Libretro screen ]
 */
 
 #include "osd.h"
@@ -586,7 +587,7 @@ void OSD::initialize_screen_buffer(bitmap_t *buffer, int width, int height, int
 */
 
 	// SDL frame surface
-    buffer->frame_surface = SDL_CreateRGBSurface(0, width, height, 8*sizeof(uint32_t), 0x00ff0000, 0x0000ff00, 0x000000ff, 0xff000000);
+    buffer->frame_surface = SDL_CreateRGBSurface(SDL_SWSURFACE, width, height, 8*sizeof(uint32_t), 0x00FF0000, 0x0000FF00, 0x000000FF, 0xFF000000);
     if (buffer->frame_surface == NULL)
 	{
 	}
diff --git a/src/osd/libretro/osd_socket.cpp b/src/osd/libretro/osd_socket.cpp
index 17ad310..b3e8d27 100755
--- a/src/osd/libretro/osd_socket.cpp
+++ b/src/osd/libretro/osd_socket.cpp
@@ -1,10 +1,11 @@
 /*
 	Skelton for retropc emulator
 
-	Author : Takeda.Toshiya
-	Date   : 2015.11.26-
+	For Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
 
-	[ win32 socket ]
+	[ Libretro socket ]
 */
 #include "osd.h"
 /*
diff --git a/src/osd/libretro/osd_sound.cpp b/src/osd/libretro/osd_sound.cpp
index 28b4930..ab7afaa 100755
--- a/src/osd/libretro/osd_sound.cpp
+++ b/src/osd/libretro/osd_sound.cpp
@@ -1,10 +1,11 @@
 /*
 	Skelton for retropc emulator
 
-	Author : Takeda.Toshiya
-	Date   : 2015.11.26-
+	For Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
 
-	[ win32 sound ]
+	[ Libretro sound ]
 */
 
 #include "osd.h"
@@ -15,11 +16,11 @@
 #define DSOUND_BUFFER_SIZE (DWORD)(sound_samples * 8)
 #define DSOUND_BUFFER_HALF (DWORD)(sound_samples * 4)
 */
-void OSD::initialize_sound(int rate)//, int samples)
+void OSD::initialize_sound()//int rate, int samples)
 {
-	sound_rate = rate;
-	sound_samples = (int)(sound_rate/FRAMES_PER_SEC_MIN+0.5);//samples;
-	sound_available = sound_started = sound_muted = false;
+//	sound_rate = rate;
+//	sound_samples = (int)(sound_rate/FRAMES_PER_SEC_MIN+0.5);//samples;
+//	sound_available = sound_started = sound_muted = false;
 	sound_ptr = NULL;
 /*
 // TODO_MM
@@ -73,8 +74,8 @@ void OSD::initialize_sound(int rate)//, int samples)
 		return;
 	}
 	sound_first_half = true;
-*/
 	sound_available = true;
+*/
 }
 
 void OSD::release_sound()
@@ -108,21 +109,17 @@ void OSD::update_sound(int* extra_frames)
 //	}
 #endif
 
+/*
 	sound_muted = false;
 	if(sound_available) {
-/*
 		DWORD play_c, write_c, offset, size1, size2;
 		WORD *ptr1, *ptr2;
-*/
 		// start play
 		if(!sound_started) {
-/*
 			lpdsSecondaryBuffer->Play(0, 0, DSBPLAY_LOOPING);
-*/
 			sound_started = true;
 			return;
 		}
-/*
 		// check current position
 		if(FAILED(lpdsSecondaryBuffer->GetCurrentPosition(&play_c, &write_c))) {
 			return;
@@ -166,7 +163,7 @@ void OSD::update_sound(int* extra_frames)
 					} else if(rec_video_frames < -2) {
 						rec_video_run_frames -= (rec_video_frames + 2);
 					}
-//					rec_video_run_frames -= rec_video_frames;
+					rec_video_run_frames -= rec_video_frames;
 				}
 			}
 			rec_sound_buffer_ptr = 0;
@@ -184,15 +181,14 @@ void OSD::update_sound(int* extra_frames)
 		}
 		lpdsSecondaryBuffer->Unlock(ptr1, size1, ptr2, size2);
 		sound_first_half = !sound_first_half;
-*/
 	}
+*/
 }
 
+/*
 void OSD::mute_sound()
 {
 	if(sound_available && !sound_muted) {
-/*
-// TODO_MM
 		// check current position
 		DWORD size1, size2;
 		WORD *ptr1, *ptr2;
@@ -207,7 +203,6 @@ void OSD::mute_sound()
 			ZeroMemory(ptr2, size2);
 		}
 		lpdsSecondaryBuffer->Unlock(ptr1, size1, ptr2, size2);
-*/
 	}
 	sound_muted = true;
 }
@@ -216,10 +211,18 @@ void OSD::stop_sound()
 {
 	if(sound_available && sound_started)
 	{
-/*
-// TODO_MM
 		lpdsSecondaryBuffer->Stop();
-*/
 		sound_started = false;
 	}
 }
+*/
+
+int16_t *OSD::get_sound_ptr()
+{
+	return sound_ptr;
+}
+
+void OSD::reset_sound()
+{
+	vm->reset_sound();
+}
diff --git a/src/osd/libretro/osd_video.cpp b/src/osd/libretro/osd_video.cpp
index 897a908..fc6fdb8 100755
--- a/src/osd/libretro/osd_video.cpp
+++ b/src/osd/libretro/osd_video.cpp
@@ -1,10 +1,11 @@
 /*
 	Skelton for retropc emulator
 
-	Author : Takeda.Toshiya
-	Date   : 2015.11.26-
+	For Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
 
-	[ win32 DirectShow ]
+	[ Libretro video ]
 */
 #include "osd.h"
 /*
diff --git a/src/vm/debugger.h b/src/vm/debugger.h
index b4e2b53..40a08b2 100755
--- a/src/vm/debugger.h
+++ b/src/vm/debugger.h
@@ -4,6 +4,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2014.09.02-
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ debugger ]
 */
 
diff --git a/src/vm/device.h b/src/vm/device.h
index 1568403..cf4e3df 100755
--- a/src/vm/device.h
+++ b/src/vm/device.h
@@ -4,6 +4,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.18 -
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ device base class ]
 */
 
@@ -707,7 +711,7 @@ public:
 	virtual void event_hsync(int v, int h, int clock) {}
 
 	// sound
-	virtual void mix(int32_t* buffer, int cnt) {}
+	virtual void mix(int16_t* buffer, uint32_t cnt) {}
 	virtual void set_volume(int ch, int decibel_l, int decibel_r) {} // +1 equals +0.5dB (same as fmgen)
 
 #ifdef USE_DEBUGGER
diff --git a/src/vm/event.cpp b/src/vm/event.cpp
index a6c378d..0e20362 100755
--- a/src/vm/event.cpp
+++ b/src/vm/event.cpp
@@ -4,6 +4,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.11.29-
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ event manager ]
 */
 
@@ -20,14 +24,15 @@ void EVENT::initialize()
 		config.cpu_power = 0;
 	power = config.cpu_power;
 	
-	// initialize sound buffer
-	sound_buffer = NULL;
-	sound_tmp = NULL;
-	
-	dont_skip_frames = 0;
-	prev_skip = next_skip = false;
-	sound_changed = false;
-	
+	// initialize sound
+	sound_buffer_1 = NULL;
+	sound_buffer_2 = NULL;
+	sound_buffer_1_start = NULL;
+	sound_buffer_2_start = NULL;
+	sound_buffer_read = NULL;
+	sound_buffer_write = NULL;
+	sound_buffer_write_index = 0;
+
 	vline_start_clock = 0;
 	cur_vline = 0;
 
@@ -40,13 +45,21 @@ void EVENT::initialize_sound(int rate)//, int samples)
 {
 	// initialize sound
 	sound_rate = rate;
-	sound_samples = (int)(sound_rate/FRAMES_PER_SEC_MIN+0.5);// samples;
-	sound_tmp_samples = (int)(2*sound_rate/FRAMES_PER_SEC_MIN+0.5);//samples*2;
-	sound_buffer = (int16_t*)malloc(sound_samples * sizeof(int16_t) * 2);
-	memset(sound_buffer, 0, sound_samples * sizeof(int16_t) * 2);
-	sound_tmp = (int32_t*)malloc(sound_tmp_samples * sizeof(int32_t) * 2);
-	memset(sound_tmp, 0, sound_tmp_samples * sizeof(int32_t) * 2);
-	buffer_ptr = 0;
+	sound_size = (int)(sound_rate / FRAMES_PER_SEC_MIN + 0.5);
+	sound_samples = (int)(sound_rate/config.window_fps+0.5);
+	sound_buffer_1 = (int16_t*)malloc(sound_size * sizeof(int16_t) * 2 + 1);
+	memset(sound_buffer_1, 0, ((sound_size << 1) * sizeof(int16_t)) + 1);
+	sound_buffer_1_start = sound_buffer_1;
+	if((uint64_t)sound_buffer_1_start & 1)
+		sound_buffer_1++;
+	sound_buffer_2 = (int16_t*)malloc(sound_size * sizeof(int16_t) * 2 + 1);
+	memset(sound_buffer_2, 0, ((sound_size << 1) * sizeof(int16_t)) + 1);
+	sound_buffer_2_start = sound_buffer_2;
+	if((uint64_t)sound_buffer_2_start & 1)
+		sound_buffer_2++;
+	sound_buffer_read = sound_buffer_2_start;
+	sound_buffer_write = sound_buffer_1_start;
+	sound_buffer_write_index = 0;
 	mix_counter = 1;
 	mix_limit = (int)((double)(emu->get_sound_rate() / 2000.0)); // per 0.5ms.
 	
@@ -57,10 +70,17 @@ void EVENT::initialize_sound(int rate)//, int samples)
 void EVENT::release()
 {
 	// release sound
-	if(sound_buffer)
-		free(sound_buffer);
-	if(sound_tmp)
-		free(sound_tmp);
+	if(sound_buffer_1)
+		free(sound_buffer_1);
+	if(sound_buffer_2)
+		free(sound_buffer_2);
+	sound_buffer_1 = NULL;
+	sound_buffer_2 = NULL;
+	sound_buffer_1_start = NULL;
+	sound_buffer_2_start = NULL;
+	sound_buffer_read = NULL;
+	sound_buffer_write = NULL;
+	sound_buffer_write_index = 0;
 }
 
 void EVENT::reset()
@@ -76,12 +96,15 @@ void EVENT::reset()
 	cpu_remain = cpu_accum = cpu_done = 0;
 	
 	// reset sound
-	if(sound_buffer)
-		memset(sound_buffer, 0, sound_samples * sizeof(int16_t) * 2);
-	if(sound_tmp)
-		memset(sound_tmp, 0, sound_tmp_samples * sizeof(int32_t) * 2);
-//	buffer_ptr = 0;
-	
+	sound_samples = (int)(sound_rate/config.window_fps+0.5);
+	if(sound_buffer_1)
+		memset(sound_buffer_1, 0, ((sound_size << 1) * sizeof(int16_t)) + 1);
+	if(sound_buffer_2)
+		memset(sound_buffer_2, 0, ((sound_size << 1) * sizeof(int16_t)) + 1);
+	sound_buffer_read = sound_buffer_2_start;
+	sound_buffer_write = sound_buffer_1_start;
+	sound_buffer_write_index = 0;
+
 #ifdef _DEBUG_LOG
 	initialize_done = true;
 #endif
@@ -499,9 +522,9 @@ void EVENT::touch_sound()
 {
 	if(!(config.sound_strict_rendering || (need_mix > 0)))
 	{
-		int samples = mix_counter;
-		if(samples >= (sound_tmp_samples - buffer_ptr))
-			samples = sound_tmp_samples - buffer_ptr;
+		uint32_t samples = mix_counter;
+		if(samples > sound_samples - sound_buffer_write_index)
+			samples = sound_samples - sound_buffer_write_index;
 		if(samples > 0)
 		{
 			mix_sound(samples);
@@ -530,156 +553,44 @@ void EVENT::set_realtime_render(DEVICE* device, bool flag)
 void EVENT::event_callback(int event_id, int err)
 {
 	// mix sound
-	if(prev_skip && dont_skip_frames == 0 && !sound_changed)
-		buffer_ptr = 0;
-	int remain = sound_tmp_samples - buffer_ptr;
-	
-	if(remain > 0)
+	if(mix_counter >= sound_samples)	
 	{
-		int samples = mix_counter;
-		
-		if(config.sound_strict_rendering || (need_mix > 0))
-		{
-			if(samples < 1)
-				samples = 1;
-		}
-		if(samples >= remain)
-			samples = remain;
-		if(config.sound_strict_rendering || (need_mix > 0))
-		{
-			if(samples > 0)
-				mix_sound(samples);
-			mix_counter = 1;
-		}
-		else
-		{
-			if(samples > 0 && mix_counter >= mix_limit)
-			{
-				mix_sound(samples);
-				mix_counter -= samples;
-			}
-			mix_counter++;
-		}
+		mix_sound(sound_samples);
+		mix_counter -= sound_samples;
 	}
+	mix_counter++;
 }
 
-void EVENT::mix_sound(int samples)
+void EVENT::mix_sound(uint32_t samples)
 {
-	if(samples > 0)
-	{
-		int32_t* buffer = sound_tmp + buffer_ptr * 2;
-		memset(buffer, 0, samples * sizeof(int32_t) * 2);
-		for(int i = 0; i < dcount_sound; i++)
-			d_sound[i]->mix(buffer, samples);
-		if(!sound_changed)
-		{
-			for(int i = 0; i < samples * 2; i += 2)
-			{
-				if(buffer[i] != sound_tmp[0] || buffer[i + 1] != sound_tmp[1])
-				{
-					sound_changed = true;
-					break;
-				}
-			}
-		}
-		buffer_ptr += samples;
-	}
-	else
-	{
-		// notify to sound devices
-		for(int i = 0; i < dcount_sound; i++)
-			d_sound[i]->mix(sound_tmp + buffer_ptr * 2, 0);
-	}
+	d_sound[0]->mix(sound_buffer_write + (sound_buffer_write_index << 1), samples);	// Only one audio device for the Super Cassette Vision
+	sound_buffer_write_index += samples;
 }
 
 int16_t* EVENT::create_sound(int* extra_frames)
 {
-	if(prev_skip && dont_skip_frames == 0 && !sound_changed)
-	{
-		memset(sound_buffer, 0, sound_samples * sizeof(int16_t) * 2);
-		*extra_frames = 0;
-		return sound_buffer;
-	}
-	int frames = 0;
-	
-	// drive extra frames to fill the sound buffer
-	while(sound_samples > buffer_ptr)
-	{
-		drive();
-		frames++;
-	}
-#ifdef LOW_PASS_FILTER
-	// low-pass filter
-	for(int i = 0; i < sound_samples - 1; i++)
+	for(uint32_t i = 0; i < (sound_samples<<1); i++)
 	{
-		sound_tmp[i * 2    ] = (sound_tmp[i * 2    ] + sound_tmp[i * 2 + 2]) / 2; // L
-		sound_tmp[i * 2 + 1] = (sound_tmp[i * 2 + 1] + sound_tmp[i * 2 + 3]) / 2; // R
+		if(sound_buffer_read[i] == 0)
+			bool stop = true;
 	}
-#endif
-	// copy to buffer
-	for(int i = 0; i < 2 * sound_samples; i++)
+
+	if(sound_buffer_write_index >= sound_samples)
 	{
-/*		int dat = sound_tmp[i];
-		int16_t highlow = (int16_t)(dat & 0x0000ffff);
-		if((dat > 0) && (highlow >= 0x8000))
+		if(sound_buffer_write == sound_buffer_1_start)
 		{
-			sound_buffer[i] = 0x7fff;
-			continue;
+			sound_buffer_read = sound_buffer_1_start;
+			sound_buffer_write = sound_buffer_2_start;
 		}
-		if((dat < 0) && (highlow < 0x8000))
+		else
 		{
-			sound_buffer[i] = 0x8000;
-			continue;
+			sound_buffer_read = sound_buffer_2_start;
+			sound_buffer_write = sound_buffer_1_start;
 		}
-		sound_buffer[i] = (int16_t)highlow;
-*/
-//		sound_buffer[i] = (int16_t)((int)sound_tmp[i]/5 & 0x0000ffff);
-//		sound_buffer[i] = (int16_t)(sound_tmp[i]);
-		sound_tmp[i] = sound_tmp[i] / 5;
-		if(sound_tmp[i] <= INT16_MIN)
-			sound_buffer[i] = INT16_MIN;
-		else if(sound_tmp[i] >= INT16_MAX)
-			sound_buffer[i] = INT16_MAX;
-		else
-			sound_buffer[i] = sound_tmp[i];
-	}
-	if(buffer_ptr > sound_samples)
-	{
-		buffer_ptr -= sound_samples;
-		memcpy(sound_tmp, sound_tmp + sound_samples * 2, buffer_ptr * sizeof(int32_t) * 2);
+		sound_buffer_write_index = 0;
 	}
-	else
-		buffer_ptr = 0;
-	*extra_frames = frames;
-	return sound_buffer;
-}
 
-int EVENT::get_sound_buffer_ptr()
-{
-	return buffer_ptr;
-}
-
-void EVENT::request_skip_frames()
-{
-	next_skip = true;
-}
-
-bool EVENT::is_frame_skippable()
-{
-	bool value = next_skip;
-	
-	if(sound_changed || (prev_skip && !next_skip))
-		dont_skip_frames = (int)frames_per_sec;
-	if(dont_skip_frames > 0)
-	{
-		value = false;
-		dont_skip_frames--;
-	}
-	prev_skip = next_skip;
-	next_skip = false;
-	sound_changed = false;
-	
-	return value;
+	return sound_buffer_read;
 }
 
 void EVENT::update_config()
@@ -756,11 +667,13 @@ bool EVENT::process_state(FILEIO* state_fio, bool loading)
 	// post process
 	if(loading)
 	{
-		if(sound_buffer)
-			memset(sound_buffer, 0, sound_samples * sizeof(int16_t) * 2);
-		if(sound_tmp)
-			memset(sound_tmp, 0, sound_tmp_samples * sizeof(int32_t) * 2);
-		buffer_ptr = 0;
+		if(sound_buffer_1)
+			memset(sound_buffer_1, 0, ((sound_size << 1) * sizeof(int16_t)) + 1);
+		if(sound_buffer_2)
+			memset(sound_buffer_2, 0, ((sound_size << 1) * sizeof(int16_t)) + 1);
+		sound_buffer_read = sound_buffer_2_start;
+		sound_buffer_write = sound_buffer_1_start;
+		sound_buffer_write_index = 0;
 		mix_counter = 1;
 		mix_limit = (int)((double)(emu->get_sound_rate() / 2000.0));  // per 0.5ms.
 	}
diff --git a/src/vm/event.h b/src/vm/event.h
index 649ad38..e74be0a 100755
--- a/src/vm/event.h
+++ b/src/vm/event.h
@@ -4,6 +4,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.11.29-
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ event manager ]
 */
 
@@ -12,12 +16,13 @@
 
 #include "device.h"
 
-#define MAX_DEVICE	64
-#define MAX_CPU		8
-#define MAX_SOUND	32
-#define MAX_LINES	1024
-#define MAX_EVENT	64
-#define NO_EVENT	-1
+#define MAX_DEVICE   64
+#define MAX_CPU       8
+#define MAX_SOUND    32
+#define MAX_LINES  1024
+#define MAX_EVENT    64
+#define NO_EVENT     -1
+
 
 class EVENT : public DEVICE
 {
@@ -71,23 +76,23 @@ private:
 	DEVICE* d_sound[MAX_SOUND];
 	int dcount_sound;
 
-	int16_t* sound_buffer;
-	int32_t* sound_tmp;
-	int buffer_ptr;
+	int16_t* sound_buffer_1;
+	int16_t* sound_buffer_2;
+	int16_t* sound_buffer_1_start;
+	int16_t* sound_buffer_2_start;
+	int16_t* sound_buffer_read;
+	int16_t* sound_buffer_write;
+	uint32_t sound_buffer_write_index;
 	int sound_rate;
 	int sound_samples;
-	int sound_tmp_samples;
-
-	int dont_skip_frames;
-	bool prev_skip, next_skip;
-	bool sound_changed;
+	int sound_size;
 
 	int mix_counter;
 	int mix_limit;
 	bool dev_need_mix[MAX_DEVICE];
 	int need_mix;
 
-	void mix_sound(int samples);
+	void mix_sound(uint32_t samples);
 	void* get_event(int index);
 
 #ifdef _DEBUG_LOG
@@ -182,7 +187,6 @@ public:
 		return vclocks[cur_vline];
 	}
 	uint32_t get_cpu_pc(int index);
-	void request_skip_frames();
 	void touch_sound();
 	void set_realtime_render(DEVICE* device, bool flag);
 
@@ -195,7 +199,6 @@ public:
 
 	void initialize_sound(int rate);//, int samples);
 	int16_t* create_sound(int* extra_frames);
-	int get_sound_buffer_ptr();
 
 	void set_context_cpu(DEVICE* device, uint32_t clocks)
 	{
@@ -228,7 +231,6 @@ public:
 		assert(dcount_sound < MAX_SOUND);
 		d_sound[dcount_sound++] = device;
 	}
-	bool is_frame_skippable();
 };
 
 #endif	// _EMUSCV_INC_VM_EVENT_H_
diff --git a/src/vm/scv/io.cpp b/src/vm/scv/io.cpp
index d1844cb..a3f5e85 100755
--- a/src/vm/scv/io.cpp
+++ b/src/vm/scv/io.cpp
@@ -4,6 +4,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.21 -
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ i/o ]
 */
 
diff --git a/src/vm/scv/io.h b/src/vm/scv/io.h
index ddb6641..6184735 100755
--- a/src/vm/scv/io.h
+++ b/src/vm/scv/io.h
@@ -4,6 +4,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.21 -
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ i/o ]
 */
 
diff --git a/src/vm/scv/memory.cpp b/src/vm/scv/memory.cpp
index 9b7ef3f..e6ca7e3 100755
--- a/src/vm/scv/memory.cpp
+++ b/src/vm/scv/memory.cpp
@@ -4,7 +4,9 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.21 -
 
-	Modified by MaaaX for EmuSCV
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
 
 	[ memory ]
 */
@@ -461,15 +463,6 @@ void MEMORY::open_cart(const _TCHAR* file_path)
 		memset(raw, 0, sizeof(raw));
 		// First chance
 		read_size = fiocart->Fread(&raw, sizeof(raw), 1);
-/*
-		if(read_size > 0)
-		{
-			// Second chance
-			read_size = fiocart->Fread(&raw+sizeof(raw)-read_size, read_size, 1);
-			if(read_size > 0)
-				goto lbl_rom_error;	// Fatal error
-		}
-*/
 
 		// Get MD5
 		memset(raw_md5, 0, sizeof(raw_md5));
@@ -613,15 +606,6 @@ void MEMORY::open_cart(const _TCHAR* file_path)
 				memset(raw, 0, sizeof(raw));
 				// First chance
 				read_size = fiocart->Fread(&raw, sizeof(raw), 1);
-/*
-				if(read_size > 0)
-				{
-					// Second chance
-					read_size = fiocart->Fread(&raw+sizeof(raw)-read_size, read_size, 1);
-					if(read_size > 0)
-						goto lbl_rom_error;	// Fatal error
-				}
-*/
 
 				// Get MD5
 				memset(raw_md5, 0, sizeof(raw_md5));
@@ -644,15 +628,6 @@ void MEMORY::open_cart(const _TCHAR* file_path)
 				memset(raw, 0, sizeof(raw));
 				// First chance
 				read_size = fiocart->Fread(&raw, sizeof(raw), 1);
-/*
-				if(read_size > 0)
-				{
-					// Second chance
-					read_size = fiocart->Fread(&raw+sizeof(raw)-read_size, read_size, 1);
-					if(read_size > 0)
-						goto lbl_rom_error;	// Fatal error
-				}
-*/
 
 				// Get MD5
 				memset(raw_md5, 0, sizeof(raw_md5));
@@ -675,15 +650,6 @@ void MEMORY::open_cart(const _TCHAR* file_path)
 				memset(raw, 0, sizeof(raw));
 				// First chance
 				read_size = fiocart->Fread(&raw, sizeof(raw), 1);
-/*
-				if(read_size > 0)
-				{
-					// Second chance
-					read_size = fiocart->Fread(&raw+sizeof(raw)-read_size, read_size, 1);
-					if(read_size > 0)
-						goto lbl_rom_error;	// Fatal error
-				}
-*/
 
 				// Get MD5
 				memset(raw_md5, 0, sizeof(raw_md5));
@@ -706,15 +672,6 @@ void MEMORY::open_cart(const _TCHAR* file_path)
 				memset(raw, 0, sizeof(raw));
 				// First chance
 				read_size = fiocart->Fread(&raw, sizeof(raw), 1);
-/*
-				if(read_size > 0)
-				{
-					// Second chance
-					read_size = fiocart->Fread(&raw+sizeof(raw)-read_size, read_size, 1);
-					if(read_size > 0)
-						goto lbl_rom_error;	// Fatal error
-				}
-*/
 
 				// Get MD5
 				memset(raw_md5, 0, sizeof(raw_md5));
@@ -738,15 +695,6 @@ void MEMORY::open_cart(const _TCHAR* file_path)
 				memset(raw, 0, sizeof(raw));
 				// First chance
 				read_size = fiocart->Fread(&raw, sizeof(raw), 1);
-/*
-				if(read_size > 0)
-				{
-					// Second chance
-					read_size = fiocart->Fread(&raw+sizeof(raw)-read_size, read_size, 1);
-					if(read_size > 0)
-						goto lbl_rom_error;	// Fatal error
-				}
-*/
 
 				// Get MD5
 				memset(raw_md5, 0, sizeof(raw_md5));
@@ -771,15 +719,6 @@ void MEMORY::open_cart(const _TCHAR* file_path)
 				memset(raw, 0, sizeof(raw));
 				// First chance
 				read_size = fiocart->Fread(&raw, sizeof(raw), 1);
-/*
-				if(read_size > 0)
-				{
-					// Second chance
-					read_size = fiocart->Fread(&raw+sizeof(raw)-read_size, read_size, 1);
-					if(read_size > 0)
-						goto lbl_rom_error;	// Fatal error
-				}
-*/
 
 				// Get MD5
 				memset(raw_md5, 0, sizeof(raw_md5));
@@ -804,15 +743,6 @@ void MEMORY::open_cart(const _TCHAR* file_path)
 				memset(raw, 0, sizeof(raw));
 				// First chance
 				read_size = fiocart->Fread(&raw, sizeof(raw), 1);
-/*
-				if(read_size > 0)
-				{
-					// Second chance
-					read_size = fiocart->Fread(&raw+sizeof(raw)-read_size, read_size, 1);
-					if(read_size > 0)
-						goto lbl_rom_error;	// Fatal error
-				}
-*/
 
 				// Get MD5
 				memset(raw_md5, 0, sizeof(raw_md5));
@@ -837,15 +767,6 @@ void MEMORY::open_cart(const _TCHAR* file_path)
 				memset(raw, 0, sizeof(raw));
 				// First chance
 				read_size = fiocart->Fread(&raw, sizeof(raw), 1);
-/*
-				if(read_size > 0)
-				{
-					// Second chance
-					read_size = fiocart->Fread(&raw+sizeof(raw)-read_size, read_size, 1);
-					if(read_size > 0)
-						goto lbl_rom_error;	// Fatal error
-				}
-*/
 
 				// Get MD5
 				memset(raw_md5, 0, sizeof(raw_md5));
@@ -870,15 +791,6 @@ void MEMORY::open_cart(const _TCHAR* file_path)
 				memset(raw, 0, sizeof(raw));
 				// First chance
 				read_size = fiocart->Fread(&raw, sizeof(raw), 1);
-/*
-				if(read_size > 0)
-				{
-					// Second chance
-					read_size = fiocart->Fread(&raw+sizeof(raw)-read_size, read_size, 1);
-					if(read_size > 0)
-						goto lbl_rom_error;	// Fatal error
-				}
-*/
 
 				// Get MD5
 				memset(raw_md5, 0, sizeof(raw_md5));
@@ -903,15 +815,6 @@ void MEMORY::open_cart(const _TCHAR* file_path)
 				memset(raw, 0, sizeof(raw));
 				// First chance
 				read_size = fiocart->Fread(&raw, sizeof(raw), 1);
-/*
-				if(read_size > 0)
-				{
-					// Second chance
-					read_size = fiocart->Fread(&raw+sizeof(raw)-read_size, read_size, 1);
-					if(read_size > 0)
-						goto lbl_rom_error;	// Fatal error
-				}
-*/
 
 				// Get MD5
 				memset(raw_md5, 0, sizeof(raw_md5));
@@ -936,15 +839,6 @@ void MEMORY::open_cart(const _TCHAR* file_path)
 				memset(raw, 0, sizeof(raw));
 				// First chance
 				read_size = fiocart->Fread(&raw, sizeof(raw), 1);
-/*
-				if(read_size > 0)
-				{
-					// Second chance
-					read_size = fiocart->Fread(&raw+sizeof(raw)-read_size, read_size, 1);
-					if(read_size > 0)
-						goto lbl_rom_error;	// Fatal error
-				}
-*/
 
 				// Get MD5
 				memset(raw_md5, 0, sizeof(raw_md5));
@@ -969,15 +863,6 @@ void MEMORY::open_cart(const _TCHAR* file_path)
 				memset(raw, 0, sizeof(raw));
 				// First chance
 				read_size = fiocart->Fread(&raw, sizeof(raw), 1);
-/*
-				if(read_size > 0)
-				{
-					// Second chance
-					read_size = fiocart->Fread(&raw+sizeof(raw)-read_size, read_size, 1);
-					if(read_size > 0)
-						goto lbl_rom_error;	// Fatal error
-				}
-*/
 
 				// Get MD5
 				memset(raw_md5, 0, sizeof(raw_md5));
@@ -1002,15 +887,6 @@ void MEMORY::open_cart(const _TCHAR* file_path)
 				memset(raw, 0, sizeof(raw));
 				// First chance
 				read_size = fiocart->Fread(&raw, sizeof(raw), 1);
-/*
-				if(read_size > 0)
-				{
-					// Second chance
-					read_size = fiocart->Fread(&raw+sizeof(raw)-read_size, read_size, 1);
-					if(read_size > 0)
-						goto lbl_rom_error;	// Fatal error
-				}
-*/
 
 				// Get MD5
 				memset(raw_md5, 0, sizeof(raw_md5));
@@ -1036,15 +912,7 @@ void MEMORY::open_cart(const _TCHAR* file_path)
 				memset(raw, 0, sizeof(raw));
 				// First chance
 				read_size = fiocart->Fread(&raw, sizeof(raw), 1);
-/*
-				if(read_size > 0)
-				{
-					// Second chance
-					read_size = fiocart->Fread(&raw+sizeof(raw)-read_size, read_size, 1);
-					if(read_size > 0)
-						goto lbl_rom_error;	// Fatal error
-				}
-*/
+
 				// Get MD5
 				memset(raw_md5, 0, sizeof(raw_md5));
 				strncpy(raw_md5, get_md5(raw, file_size), sizeof(raw_md5));
@@ -1068,15 +936,7 @@ void MEMORY::open_cart(const _TCHAR* file_path)
 				memset(raw, 0, sizeof(raw));
 				// First chance
 				read_size = fiocart->Fread(&raw, sizeof(raw), 1);
-/*
-				if(read_size > 0)
-				{
-					// Second chance
-					read_size = fiocart->Fread(&raw+sizeof(raw)-read_size, read_size, 1);
-					if(read_size > 0)
-						goto lbl_rom_error;	// Fatal error
-				}
-*/
+
 				// Get MD5
 				memset(raw_md5, 0, sizeof(raw_md5));
 				strncpy(raw_md5, get_md5(raw, file_size), sizeof(raw_md5));
@@ -1100,15 +960,7 @@ void MEMORY::open_cart(const _TCHAR* file_path)
 				memset(raw, 0, sizeof(raw));
 				// First chance
 				read_size = fiocart->Fread(&raw, sizeof(raw), 1);
-/*
-				if(read_size > 0)
-				{
-					// Second chance
-					read_size = fiocart->Fread(&raw+sizeof(raw)-read_size, read_size, 1);
-					if(read_size > 0)
-						goto lbl_rom_error;	// Fatal error
-				}
-*/
+
 				// Get MD5
 				memset(raw_md5, 0, sizeof(raw_md5));
 				strncpy(raw_md5, get_md5(raw, file_size), sizeof(raw_md5));
diff --git a/src/vm/scv/memory.h b/src/vm/scv/memory.h
index 0618a96..82cfe3d 100755
--- a/src/vm/scv/memory.h
+++ b/src/vm/scv/memory.h
@@ -4,7 +4,9 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.21 -
 
-	Modified by MaaaX for EmuSCV
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
 
 	[ memory ]
 */
diff --git a/src/vm/scv/scv.cpp b/src/vm/scv/scv.cpp
index 29119f3..cc475bf 100755
--- a/src/vm/scv/scv.cpp
+++ b/src/vm/scv/scv.cpp
@@ -4,13 +4,16 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.21 -
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ virtual machine ]
 */
 
 #include "scv.h"
 
 #include "../device.h"
-//#include "../../emu.h"
 #include "../event.h"
 #include "../upd7801.h"
 #include "io.h"
@@ -148,9 +151,9 @@ int16_t* VM::create_sound(int* extra_frames)
 	return event->create_sound(extra_frames);
 }
 
-int VM::get_sound_buffer_ptr()
+void VM::reset_sound()
 {
-	return event->get_sound_buffer_ptr();
+	event->reset();
 }
 
 #ifdef USE_SOUND_VOLUME
@@ -194,11 +197,6 @@ bool VM::is_cart_inserted(int drv)
 	}
 }
 
-bool VM::is_frame_skippable()
-{
-	return event->is_frame_skippable();
-}
-
 void VM::update_config()
 {
 	for(DEVICE* device = first_device; device; device = device->next_device)
diff --git a/src/vm/scv/scv.h b/src/vm/scv/scv.h
index cb3ed92..fe7c34b 100755
--- a/src/vm/scv/scv.h
+++ b/src/vm/scv/scv.h
@@ -4,6 +4,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.21 -
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ virtual machine ]
 */
 
@@ -15,7 +19,7 @@
 
 // Device informations for virtual machine
 #define LINES_PER_FRAME				262
-#define CPU_CLOCKS					4000000
+#define CPU_CLOCKS					3800000
 #define FRAMES_PER_SEC				60
 #define FRAMES_PER_SEC_MAX			FRAMES_PER_SEC
 #define FRAMES_PER_SEC_MIN			50
@@ -180,8 +184,6 @@ static const _TCHAR *sound_device_caption[] = { _T("PSG"), _T("PCM"), };
 class VM : public VM_TEMPLATE
 {
 protected:
-//	EMU* emu;
-
 	// devices
 	EVENT* event;
 
@@ -220,16 +222,15 @@ public:
 	// sound generation
 	void initialize_sound(int rate);//, int samples);
 	int16_t* create_sound(int* extra_frames);
-	int get_sound_buffer_ptr();
 #ifdef USE_SOUND_VOLUME
 	void set_sound_device_volume(int ch, int decibel_l, int decibel_r);
 #endif
+	void reset_sound();
 
 	// user interface
 	void open_cart(int drv, const _TCHAR* file_path);
 	void close_cart(int drv);
 	bool is_cart_inserted(int drv);
-	bool is_frame_skippable();
 
 	void update_config();
 	bool process_state(FILEIO* state_fio, bool loading);
@@ -245,9 +246,6 @@ public:
 
 	// devices
 	DEVICE* get_device(int id);
-//	DEVICE* dummy;
-//	DEVICE* first_device;
-//	DEVICE* last_device;
 };
 
 #endif	// _EMUSCV_INC_VM_SCV_SCV_H_
diff --git a/src/vm/scv/sound.cpp b/src/vm/scv/sound.cpp
index 4bbe011..000c296 100755
--- a/src/vm/scv/sound.cpp
+++ b/src/vm/scv/sound.cpp
@@ -4,7 +4,11 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.21 -
 
-	[ uPD1771C ]
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
+	[ NEC uPD1771C ]
 */
 
 #include <math.h>
@@ -58,8 +62,6 @@ void SOUND::write_data8(uint32_t addr, uint32_t data)
 			case CMD_PCM:
 				param_cnt = MAX_PARAM;
 				memset(pcm_table, 0, PCM_TABLE_SIZE+8);
-				//memset(pcm_table_smooth, 0, sizeof(pcm_table_smooth));
-				//memset(pcm_smooth, 0, sizeof(pcm_smooth));
 				pcm_len = pcm.ptr = 0;
 				break;
 		}
@@ -82,71 +84,32 @@ void SOUND::write_data8(uint32_t addr, uint32_t data)
 			// pcm command
 			if(param_ptr == 5)
 			{
-//				if(params[1] != 4 && params[1] != 6 && params[1] != 100)
-//					bool stop = 1;
 				pcm.period = 240000 - (params[1] & 0x06) * 17500;
-//				//params[1] 0?, 4, 6, 100?
-//				//params[2] 100?
-//				//params[3] 0, 1, 3
+//				params[1] 0?, 4, 6, 100?
+//				params[2] 100?
+//				params[3] 0, 1, 3
 //				param[4] = begin of data?
 			}
-/*
+
 			// Patch for Kung-Fu Road
 			if(param_ptr == 2 && (params[1] != 4 && params[1] != 6 && params[1] != 100))
 			{
 				param_cnt = 1;
 				clear_channel(&pcm);
 			}
-			else 
-*/
-			if(param_ptr >= 7)
+			else if(param_ptr >= 7)
 			{
 				// Patch for Star Speeder: 0xfe,0x00 = end of pcm, intf1 must not be done except star speeder
 				if(params[param_ptr - 2] == 0xfe && data == 0x00 && cmd_addr != 0xa765)
+				{
 					param_cnt = 1;
+				}
 				else
-					uint8_t data = params[param_ptr - 2];
 					// Add pcm wave to buffer
 					if(pcm_len < PCM_TABLE_SIZE-8)
 					{
+						uint8_t data = params[param_ptr - 2];
 						// Smooth sound
-/*
-						uint8_t v;
-						pcm_table_smooth[0] = (data & 0x80) ? 1 : 0;
-						pcm_table_smooth[1] = (data & 0x40) ? 1 : 0;
-						pcm_table_smooth[2] = (data & 0x20) ? 1 : 0;
-						pcm_table_smooth[3] = (data & 0x10) ? 1 : 0;
-						pcm_table_smooth[4] = (data & 0x08) ? 1 : 0;
-						pcm_table_smooth[5] = (data & 0x04) ? 1 : 0;
-						pcm_table_smooth[6] = (data & 0x02) ? 1 : 0;
-						if(pcm_len != 0)
-						{
-							v = ((pcm_table_smooth[7] << 1 + pcm_table_smooth[7]) + (pcm_table_smooth[0] << 1)) >> 2;
-							pcm_table[pcm_len - 1] = (v == 0 ? 0 : 1);
-						}
-						pcm_table_smooth[7] = (data & 0x01) ? 1 : 0;
-						for(uint8_t i = 0; i < 8; i++)
-						{
-							if(i < 1 && pcm_len == 0)
-								v = (pcm_table_smooth[i] >> 1 + pcm_table_smooth[i + 1]) / 3;
-							else if(i < 7)
-								v = (pcm_table_smooth[i - 1] + pcm_table_smooth[i] >> 1 + pcm_table_smooth[i + 1]) >> 2;
-							else
-								v = (pcm_table_smooth[i - 1] + pcm_table_smooth[i] >> 1) / 3;
-							pcm_table[pcm_len + i] = (v == 0 ? 0 : 1);
-						}
-						pcm_len += 8;
-*/
-/*
-						pcm_table[pcm_len++] = (data & 0x80) ? 1 : 0;
-						pcm_table[pcm_len++] = (data & 0x40) ? 1 : 0;
-						pcm_table[pcm_len++] = (data & 0x20) ? 1 : 0;
-						pcm_table[pcm_len++] = (data & 0x10) ? 1 : 0;
-						pcm_table[pcm_len++] = (data & 0x08) ? 1 : 0;
-						pcm_table[pcm_len++] = (data & 0x04) ? 1 : 0;
-						pcm_table[pcm_len++] = (data & 0x02) ? 1 : 0;
-						pcm_table[pcm_len++] = (data & 0x01) ? 1 : 0;
-*/
 						pcm_table[pcm_len++] = (data & 0x80) ? MAX_PCM : 0;
 						pcm_table[pcm_len++] = (data & 0x40) ? MAX_PCM : 0;
 						pcm_table[pcm_len++] = (data & 0x20) ? MAX_PCM : 0;
@@ -156,10 +119,10 @@ void SOUND::write_data8(uint32_t addr, uint32_t data)
 						pcm_table[pcm_len++] = (data & 0x02) ? MAX_PCM : 0;
 						pcm_table[pcm_len++] = (data & 0x01) ? MAX_PCM : 0;
 
-						if(!pcm.count)
+						if(pcm.count == 0)
 						{
-							pcm.count  = pcm.diff;
-							pcm.output = pcm_table[pcm_len - 8];
+							pcm.count  = 1;
+							pcm.output = pcm_table[0];
 						}
 					}
 			}
@@ -176,7 +139,6 @@ void SOUND::write_data8(uint32_t addr, uint32_t data)
 	// Process command
 	if(param_cnt <= 0)
 	{
-		bool stop;
 		touch_sound();
 		switch(params[0])
 		{
@@ -190,25 +152,41 @@ void SOUND::write_data8(uint32_t addr, uint32_t data)
 				break;
 
 			case CMD_NOISE:	// Noise & square
-				noise.timbre = (params[1] & 0xe0) >> 5;
-				noise.offset = (params[1] & 0x1f);
-				noise.ptr    = noise.offset;
-				noise.period = params[2] << 8;
-				//noise.period = ((uint32_t)params[2] + 1) << 7;
-				noise.volume = (MAX_NOISE * (params[3] > 0x1f ? 0x1f : params[3])) / 0x1f;
-				//noise.volume = volume_table[params[3] & 0x1f];
-				noise.output = (noise_table[noise.ptr] * noise.volume) >> 8;
-
-				square1.period = params[4] << 8;
-				square1.volume = (MAX_SQUARE * (params[7] > 0x7f ? 0x7f : params[7])) / 0x7f;
+				noise.timbre = (params[1] & 0xE0) << 1;
+				noise.offset = (params[1] & 0x1F) << 3;
+				noise.ptr    = rand() % (NOISE_TABLE_SIZE - 1);
+				noise.period = params[2] << 6;
+				noise.volume = MAX_NOISE * (params[3] & 0x1F) / 0x1F;
+				if(noise.period)
+					noise.output = (noise_table[noise.ptr] * noise.volume) >> 8;
+				else
+					noise.output = (noise_table[noise.ptr] * noise.volume) >> 9;
+
+				square1.ptr = rand() % NOISE_TABLE_SIZE;
+				square2.ptr = rand() % NOISE_TABLE_SIZE;
+				square3.ptr = rand() % NOISE_TABLE_SIZE;
+				square1.volume = MAX_SQUARE1 * (params[7] & 0x1F) / 0x1F;
+				square2.volume = MAX_SQUARE2 * (params[8] & 0x1F) / 0x1F;
+				square3.volume = MAX_SQUARE3 * (params[9] & 0x1F) / 0x1F;
+				if(params[1] == 0 && params[3] == 0)
+				{
+					square1.period = params[4] << 7;
+					if(params[4] > 1 && params[4] < 12)
+						square2.period = (params[5] * params[4]) << 2;
+					else
+						square2.period = params[5] << 8;
+				}
+				else
+				{
+					square1.period = params[4] << 7;
+					square2.period = params[5] << 8;
+					square1.volume = square1.volume >> 1;
+					square2.volume = square2.volume >> 1;
+					square3.volume = square3.volume >> 1;
+				}
+				square3.period = params[6] << 8;
 				square1.output = (square_table[square1.ptr] * square1.volume) >> 8;
-
-				square2.period = params[5] << 8;
-				square2.volume = (MAX_SQUARE * (params[8] > 0x7f ? 0x7f : params[8])) / 0x7f;
 				square2.output = (square_table[square2.ptr] * square2.volume) >> 8;
-
-				square3.period = params[6] << 8;
-				square3.volume = (MAX_SQUARE * (params[9] > 0x7f ? 0x7f : params[9])) / 0x7f;
 				square3.output = (square_table[square3.ptr] * square3.volume) >> 8;
 
 				// tone off
@@ -216,11 +194,11 @@ void SOUND::write_data8(uint32_t addr, uint32_t data)
 				break;
 
 			case CMD_TONE:	// note on : $02, timbre, period, volume ?
-				tone.timbre = (params[1] & 0xe0) >> 5;
-				tone.offset = (params[1] & 0x1f);
+				tone.timbre = (params[1] & 0xE0) >> 5;
+				tone.offset = (params[1] & 0x1F) << 3;
 				tone.ptr    = tone.offset;
-				tone.period = (params[2] * detune_table[tone.offset]);
-				tone.volume = volume_table[params[3] & 0x1f];
+				tone.period = params[2] * detune_table[tone.offset];
+				tone.volume = MAX_TONE * (params[3] & 0x1F) / 0x1F;
 				tone.output = (timbre_table[tone.timbre][tone.ptr] * tone.volume) >> 8;
 
 				// noise & square off
@@ -231,9 +209,6 @@ void SOUND::write_data8(uint32_t addr, uint32_t data)
 				break;
 
 			case CMD_PCM:	// PCM
-//				clear_channel(&pcm);
-				break;
-
 			default:
 				break;
 		}
@@ -261,11 +236,9 @@ void SOUND::write_io8(uint32_t addr, uint32_t data)
 		clear_channel(&square2);
 		clear_channel(&square3);
 
+// Patch for y2 monster land
 		if(cmd_addr == 0x8402)
 		{
-// PATCH y2 monster land
-//			bool pause = false;//(get_cpu_pc(0) == 0x96c);
-//			if(pause || !(params[0] == 0x1f && param_ptr > 5))
 			if(!(params[0] == 0x1f && param_ptr > 5))
 			{
 				// terminate command
@@ -273,13 +246,6 @@ void SOUND::write_io8(uint32_t addr, uint32_t data)
 					cancel_event(this, register_id);
 				memset(params, 0, sizeof(params));
 				param_cnt = param_ptr = 0;
-
-				// terminate pcm when pause
-// PATCH y2 monster land
-//				if(pause)
-//					clear_channel(&pcm);
-//			} else if(register_id == -1) {
-//				vm->register_callback(this, 0, 100, false, &register_id);
 			}
 		}
 		else
@@ -289,10 +255,7 @@ void SOUND::write_io8(uint32_t addr, uint32_t data)
 				// terminate command
 				memset(params, 0, sizeof(params));
 				param_cnt = param_ptr = 0;
-//				clear_channel(&pcm);
 			}
-//			if(register_id == -1)
-//				vm->register_callback(this, 0, 100, false, &register_id);
 		}
 
 #ifdef SOUND_DEBUG
@@ -317,24 +280,36 @@ void SOUND::event_callback(int event_id, int err)
 
 void SOUND::initialize_sound(int rate)
 {
+	// Clock difference
 	tone.diff    = (int)((TONE_CLOCK   / rate) * 128.0 * 16.0 + 0.5);
 	noise.diff   = (int)((NOISE_CLOCK  / rate) * 128.0 * 16.0 + 0.5);
 	square1.diff = (int)((SQUARE_CLOCK / rate) * 128.0 * 16.0 + 0.5);
 	square2.diff = (int)((SQUARE_CLOCK / rate) * 128.0 * 16.0 + 0.5);
 	square3.diff = (int)((SQUARE_CLOCK / rate) * 128.0 * 16.0 + 0.5);
 	pcm.diff     = (int)((PCM_CLOCK    / rate) * 128.0 * 16.0 + 0.5);
+
 	// create volume table
 	double vol = MAX_TONE;
 	for(int i = 0; i < 32; i++)
 	{
 		volume_table[31 - i] = (int) vol;
-		vol /= 1.12201845439369;//1.258925412;
+		vol /= 1.12201845439369;
 	}
 	volume_table[0] = 0;
 
 	// create detune table
-	for(int i = 0; i < 32; i++)
-		detune_table[i] = (int) (detune_rate[i] * 256.0 / 100.0 + 0.5);
+	for(int i = 31; i >= 0; i--)
+		detune_table[i] = (int) (detune_rate[i] * 256 / 100 + 0.5);
+
+	// Create noise table
+	for(int i = NOISE_TABLE_SIZE-1; i >= 0; i--)
+		noise_table[i] = (rand() % 510) - 255; 
+
+	// Create square table
+	for(int i = 0; i < SQUARE_TABLE_SIZE>>1; i++)
+		square_table[i] = 255; 
+	for(int i = 0; i < SQUARE_TABLE_SIZE>>1; i++)
+		square_table[i] = 255; 
 }
 
 inline void SOUND::clear_channel(channel_t *ch)
@@ -348,183 +323,138 @@ inline void SOUND::clear_channel(channel_t *ch)
 	ch->volume = 0;
 }
 
-void SOUND::mix(int32_t* buffer, int cnt)
+void SOUND::mix(int16_t* buffer, uint32_t cnt)
 {
-	int vol, vol_l, vol_r;
-/*
-	float c, v;
-	int o01, o03, o05, o07, o09, o11, o13, o15, o17, o19;
-*/
+	int64_t vol;
 
 	// create sound buffer
-	for(int i = 0; i < cnt; i++)
+	for(int i = cnt; i != 0; i--)
 	{
-		vol = vol_l = vol_r = 0;
+		vol = 0;
 
 		// mix pcm
-		if(pcm.count)
+		if(pcm.count != 0)
 		{
+			int64_t v = pcm.output;
+			int64_t c = 1;
 			pcm.count -= pcm.diff;
 			while(pcm.count <= 0)
 			{
 				pcm.count += pcm.period;
-
-				if(pcm.ptr < pcm_len)
+				for(int i = PCM_TABLE_DATA_SIZE - 1; i >= 0; i--)
 				{
-					// Smooth
-//					for(uint8_t i = 0; i < sizeof(pcm_smooth); i++)
-//					{
-//						if(pcm.ptr + i - 9 < 0 && pcm.ptr + i + 9 >= pcm_len)
-//							pcm_smooth[i] = 0;
-//						else
-//							pcm_smooth[i] = pcm_table[pcm.ptr + i];
-//					}
-/*
-					pcm.output = +MAX_PCM*(pcm_table[pcm.ptr]+pcm_table[pcm.ptr + 1]+pcm_table[pcm.ptr + 2]+pcm_table[pcm.ptr + 3])/4;
-					pcm.output = +MAX_PCM*(pcm_table[pcm.ptr]+pcm_table[pcm.ptr + 1]+pcm_table[pcm.ptr + 2]+pcm_table[pcm.ptr + 3]+pcm_table[pcm.ptr + 4]+pcm_table[pcm.ptr + 5]+pcm_table[pcm.ptr + 6]+pcm_table[pcm.ptr + 7])/8;
-*/
-/*
-					for(uint8_t i = 0; i < 19; i++)
-					{
-						v = c = 0;
-						if(pcm.ptr + i - 1 >= 0)
-						{
-							v += pcm_table[pcm.ptr + i - 1];
-							c++;
-						}
-						if(pcm.ptr + i < pcm_len)
-						{
-							v += 2*pcm_table[pcm.ptr + i];
-							c += 2;
-						}
-						if(pcm.ptr + i + 1 < pcm_len)
-						{
-							v += pcm_table[pcm.ptr + i + 1];
-							c++;
-						}
-						if(c != 0)
-							v = v / c;
-						if(v < 0.5)
-							pcm_smooth[i] = 0;
-						else
-							pcm_smooth[i] = MAX_PCM;
-//						pcm_smooth[i] = (pcm.ptr + i < pcm_len ? MAX_PCM * pcm_table[pcm.ptr + i] : 0);
-					}
-					// Mix 10 bands
-					// /!\ TODO_MM: MUST BE OPTIMIZED
-					o01 = pcm_smooth[9];
-					o03 = (181 * pcm_smooth[8] + 256 * pcm_smooth[9] + 181 * pcm_smooth[10]) / 618;
-					o05 = (128 * pcm_smooth[7] + 222 * pcm_smooth[8] + 256 * pcm_smooth[ 9] + 222 * pcm_smooth[10] + 128 * pcm_smooth[11]) / 956;
-//					o07 = ( 98 * pcm_smooth[6] + 181 * pcm_smooth[7] + 237 * pcm_smooth[ 8] + 256 * pcm_smooth[ 9] + 237 * pcm_smooth[10] + 181 * pcm_smooth[11] +  98 * pcm_smooth[12]) / 1288;
-//					o09 = ( 79 * pcm_smooth[5] + 150 * pcm_smooth[6] + 207 * pcm_smooth[ 7] + 243 * pcm_smooth[ 8] + 256 * pcm_smooth[ 9] + 243 * pcm_smooth[10] + 207 * pcm_smooth[11] + 150 * pcm_smooth[12] +  79 * pcm_smooth[13]) / 1614;
-					o11 = ( 66 * pcm_smooth[4] + 128 * pcm_smooth[5] + 181 * pcm_smooth[ 6] + 222 * pcm_smooth[ 7] + 247 * pcm_smooth[ 8] + 256 * pcm_smooth[ 9] + 247 * pcm_smooth[10] + 222 * pcm_smooth[11] + 181 * pcm_smooth[12] + 128 * pcm_smooth[13] +  66 * pcm_smooth[14]) / 1944;
-//					o13 = ( 57 * pcm_smooth[3] + 111 * pcm_smooth[4] + 160 * pcm_smooth[ 5] + 200 * pcm_smooth[ 6] + 231 * pcm_smooth[ 7] + 250 * pcm_smooth[ 8] + 256 * pcm_smooth[ 9] + 250 * pcm_smooth[10] + 231 * pcm_smooth[11] + 200 * pcm_smooth[12] + 160 * pcm_smooth[13] + 111 * pcm_smooth[14] +  57 * pcm_smooth[15]) / 2274;
-//					o15 = ( 50 * pcm_smooth[2] +  98 * pcm_smooth[3] + 142 * pcm_smooth[ 4] + 181 * pcm_smooth[ 5] + 213 * pcm_smooth[ 6] + 237 * pcm_smooth[ 7] + 251 * pcm_smooth[ 8] + 256 * pcm_smooth[ 9] + 251 * pcm_smooth[10] + 237 * pcm_smooth[11] + 213 * pcm_smooth[12] + 181 * pcm_smooth[13] + 142 * pcm_smooth[14] +  98 * pcm_smooth[15] +  50 * pcm_smooth[16]) / 2600;
-//					o17 = ( 44 * pcm_smooth[1] +  88 * pcm_smooth[2] + 128 * pcm_smooth[ 3] + 165 * pcm_smooth[ 4] + 196 * pcm_smooth[ 5] + 222 * pcm_smooth[ 6] + 241 * pcm_smooth[ 7] + 252 * pcm_smooth[ 8] + 256 * pcm_smooth[ 9] + 252 * pcm_smooth[10] + 241 * pcm_smooth[11] + 222 * pcm_smooth[12] + 196 * pcm_smooth[13] + 165 * pcm_smooth[14] + 128 * pcm_smooth[15] +  88 * pcm_smooth[16] +  44 * pcm_smooth[17]) / 2928;
-					o19 = ( 40 * pcm_smooth[0] +  79 * pcm_smooth[1] + 116 * pcm_smooth[ 2] + 150 * pcm_smooth[ 3] + 181 * pcm_smooth[ 4] + 207 * pcm_smooth[ 5] + 228 * pcm_smooth[ 6] + 243 * pcm_smooth[ 7] + 253 * pcm_smooth[ 8] + 256 * pcm_smooth[ 9] + 253 * pcm_smooth[10] + 243 * pcm_smooth[11] + 228 * pcm_smooth[12] + 207 * pcm_smooth[13] + 181 * pcm_smooth[14] + 150 * pcm_smooth[15] + 116 * pcm_smooth[16] + 79 * pcm_smooth[17] + 40 * pcm_smooth[18]) / 3250;
-//					pcm.output = (50 * o01 + 98 * o03 + 142 * o05 + 181 * o07 + 213 * o09 + 237 * o11 + 251 * o13 + 256 * o15 + 256 * o17 + 253 * o19) / (40+79+116+150+181+207+228+243+253+256);
-					pcm.output = (98 * o03 + 142 * o05 + 237 * o11 + 253 * o19) / (98+142+237+253);
-					pcm.output = (2 * pcm.output) - MAX_PCM;
-*/
-					pcm.output = (pcm_table[pcm.ptr] + pcm_table[pcm.ptr + 1] + pcm_table[pcm.ptr + 2] + pcm_table[pcm.ptr + 3] + pcm_table[pcm.ptr + 4] + pcm_table[pcm.ptr + 8] + pcm_table[pcm.ptr + 6] + pcm_table[pcm.ptr + 7]) >> 3;
+					if(pcm.ptr + i < pcm_len)
+						pcm_table_data[i] = pcm_table[pcm.ptr + i];
+					else
+						pcm_table_data[i] = 0;
 				}
-				else
-					pcm.output = 0;
+				pcm.output = (pcm_table_data[0]+pcm_table_data[1]+(pcm_table_data[2]+pcm_table_data[3]+pcm_table_data[4]+pcm_table_data[5]+pcm_table_data[6])<<1+pcm_table_data[7]) >> 3;
+				v += tone.output;
+				c++;
+
 				if(++pcm.ptr >= pcm_len)
 				{
 					pcm.count = 0;
 					break;
 				}
 			}
-			vol += pcm.output;
-//			vol_l = apply_volume(vol, pcm_volume_l);
-//			vol_r = apply_volume(vol, pcm_volume_r);
+			// Smooth sound
+			v = v/c;
+			vol += v;
 		}
-//		else
-//		{
-			// mix tone
-			if(tone.volume && tone.period)
-			{
-				tone.count -= tone.diff;
-				while(tone.count <= 0)
-				{
-					tone.count += tone.period;
-					tone.ptr++;
-					if(tone.ptr >= 256)
-						tone.ptr = tone.offset;
-					tone.output = (timbre_table[tone.timbre][tone.ptr] * tone.volume) >> 8;
-				}
 
-				vol += tone.output;
-			}
-			if(noise.volume && noise.period)
+		// mix tone
+		if(tone.volume && tone.period)
+		{
+			int64_t v = tone.output;
+			int64_t c = 1;
+			tone.count -= tone.diff;
+			while(tone.count <= 0)
 			{
+				tone.count += tone.period;
+				if(++tone.ptr >= 256)
+					tone.ptr = tone.offset;
+				tone.output = (timbre_table[tone.timbre][tone.ptr] * tone.volume) >> 8;
+				v += tone.output;
+				c++;
+			}
+			// Smooth sound
+			v = v/c;
+			vol += v;
+		}
+
+		// Mix noise
+		if(noise.volume)
+		{
+			if(noise.period)
+			{		
 				noise.count -= noise.diff;
 				while(noise.count <= 0)
 				{
 					noise.count += noise.period;
-					noise.ptr++;
-					if(noise.ptr >= 256)
-						noise.ptr = noise.offset;
+					noise.ptr    = (noise.ptr + 1) & (NOISE_TABLE_SIZE - 1);
 					noise.output = (noise_table[noise.ptr] * noise.volume) >> 8;
 				}
-				vol += noise.output;
 			}
-			if(square1.volume && square1.period)
+			else if(noise.timbre)	// Patch for Star Speeder
 			{
-				square1.count -= square1.diff;
-				while(square1.count <= 0)
+				noise.count -= noise.diff;
+				while(noise.count <= 0)
 				{
-					square1.count  += square1.period;
-					square1.ptr     = (square1.ptr + 1) & 0xff;
-					square1.output  = (square_table[square1.ptr] * square1.volume) >> 8;
+					noise.count += noise.timbre;
+					noise.ptr    = (noise.ptr + 1) & (NOISE_TABLE_SIZE - 1);
+					noise.output = (noise_table[noise.ptr] * noise.volume) >> 9;
 				}
-				vol += square1.output;
 			}
-			if(square2.volume && square2.period)
+			vol += noise.output;
+		}
+
+		// Mix square 1
+		if(square1.volume && square1.period)
+		{
+			square1.count -= square1.diff;
+			while(square1.count <= 0)
+			{
+				square1.count  += square1.period;
+				square1.ptr     = (square1.ptr + 1) & 0xFF;
+				square1.output  = (square_table[square1.ptr] * square1.volume) >> 8;
+			}
+			vol += square1.output;
+		}
+
+		// Mix square 2
+		if(square2.volume && square2.period)
+		{
+			square2.count -= square2.diff;
+			while(square2.count <= 0)
 			{
-				square2.count -= square2.diff;
-				while(square2.count <= 0)
-				{
-					square2.count  += square2.period;
-					square2.ptr     = (square2.ptr + 1) & 0xff;
-					square2.output  = (square_table[square2.ptr] * square2.volume) >> 8;
-				}
-				vol += square2.output;
+				square2.count  += square2.period;
+				square2.ptr     = (square2.ptr + 1) & 0xFF;
+				square2.output  = (square_table[square2.ptr] * square2.volume) >> 8;
 			}
-			if(square3.volume && square3.period)
+			vol += square2.output;
+		}
+
+		// Mix square 3
+		if(square3.volume && square3.period)
+		{
+			square3.count -= square3.diff;
+			while(square3.count <= 0)
 			{
-				square3.count -= square3.diff;
-				while(square3.count <= 0)
-				{
-					square3.count  += square3.period;
-					square3.ptr     = (square3.ptr + 1) & 0xff;
-					square3.output  = (square_table[square3.ptr] * square3.volume) >> 8;
-				}
-				vol += square3.output;
+				square3.count  += square3.period;
+				square3.ptr     = (square3.ptr + 1) & 0xFF;
+				square3.output  = (square_table[square3.ptr] * square3.volume) >> 8;
 			}
-//			vol_l = apply_volume(vol, psg_volume_l);
-//			vol_r = apply_volume(vol, psg_volume_r);
-//		}
-		vol_l = apply_volume(vol, 1024);
-		vol_r = apply_volume(vol, 1024);
-
-		*buffer++ += vol_l; // L
-		*buffer++ += vol_r; // R
-	}
-}
+			vol += square3.output;
+		}
 
-void SOUND::set_volume(int ch, int decibel_l, int decibel_r)
-{
-	if(ch == 0)
-	{
-		psg_volume_l = decibel_to_volume(decibel_l);
-		psg_volume_r = decibel_to_volume(decibel_r);
-	}
-	else if(ch == 1)
-	{
-		pcm_volume_l = decibel_to_volume(decibel_l);
-		pcm_volume_r = decibel_to_volume(decibel_r);
+		// Mix all channels
+		if(vol > INT16_MAX)
+			vol = INT16_MAX;
+		else if(vol < INT16_MIN)
+			vol = INT16_MIN;
+		*buffer++ = vol;	// Left
+		*buffer++ = vol;	// Right
 	}
 }
 
diff --git a/src/vm/scv/sound.h b/src/vm/scv/sound.h
index 79d366f..f65d5ac 100755
--- a/src/vm/scv/sound.h
+++ b/src/vm/scv/sound.h
@@ -4,7 +4,11 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.21 -
 
-	[ uPD1771C ]
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
+	[ NEC uPD1771C ]
 */
 
 #ifndef _EMUSCV_INC_VM_SCV_SOUND_H_
@@ -15,17 +19,23 @@
 #include "../device.h"
 
 #define TONE_CLOCK   1522400.0
-#define NOISE_CLOCK      760.0
+#define NOISE_CLOCK      750.0
 #define SQUARE_CLOCK  174000.0
 #define PCM_CLOCK    1522400.0
 
-#define MAX_TONE         16384
-#define MAX_NOISE         8192
-#define MAX_SQUARE        2048
-#define MAX_PCM          16384
+#define MAX_TONE          9000
+#define MAX_NOISE         9000
+#define MAX_SQUARE1       4500
+#define MAX_SQUARE2       4500
+#define MAX_SQUARE3       4500
+#define MAX_PCM          12000
 
 #define MAX_PARAM       0x8000
+
+#define NOISE_TABLE_SIZE  1024
+#define SQUARE_TABLE_SIZE  256
 #define PCM_TABLE_SIZE 0x40000
+#define PCM_TABLE_DATA_SIZE  8
 
 #define CMD_SILENCE	      0x00
 #define CMD_NOISE	      0x01
@@ -61,21 +71,19 @@ private:
 	int pcm_table[PCM_TABLE_SIZE+8];
 	uint32_t cmd_addr;
 	int pcm_len;
-//	int pcm_table_smooth[8];
-//	int pcm_smooth[19];
+	int pcm_table_data[PCM_TABLE_DATA_SIZE];
 
 	int volume_table[32];
 	int detune_table[32];
 
-	int psg_volume_l, psg_volume_r;
-	int pcm_volume_l, pcm_volume_r;
-
 	// command buffer
 	int param_cnt;
 	int param_ptr;
 	int register_id;
 	uint8_t params[MAX_PARAM];
 
+	int16_t noise_table[NOISE_TABLE_SIZE];
+	int16_t square_table[SQUARE_TABLE_SIZE];
 
 public:
 	SOUND(VM_TEMPLATE* parent_vm, EMU* parent_emu) : DEVICE(parent_vm, parent_emu)
@@ -89,8 +97,7 @@ public:
 	void write_data8(uint32_t addr, uint32_t data);
 	void write_io8(uint32_t addr, uint32_t data);
 	void event_callback(int event_id, int err);
-	void mix(int32_t* buffer, int cnt);
-	void set_volume(int ch, int decibel_l, int decibel_r);
+	void mix(int16_t* buffer, uint32_t cnt);
 	bool process_state(FILEIO* state_fio, bool loading);
 
 	// unique functions
diff --git a/src/vm/scv/sound_tbl.h b/src/vm/scv/sound_tbl.h
index d97034a..77b94ee 100755
--- a/src/vm/scv/sound_tbl.h
+++ b/src/vm/scv/sound_tbl.h
@@ -4,15 +4,19 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.21 -
 
-	[ uPD1771C table ]
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
+	[ NEC uPD1771C table ]
 */
 
 #ifndef _EMUSCV_INC_VM_SCV_SOUND_TBL_H_
 #define _EMUSCV_INC_VM_SCV_SOUND_TBL_H_
 
-static const int timbre_table[8][256] =
+static const int16_t timbre_table[8][256] =
 {
-	{
+	{	// Tone 0
 		  48,  167,  212,  220,  231,  239,  245,  247,  250,  253,  253,  255,  255,  255,  255,  255,
 		 255,  255,  253,  253,  253,  250,  242,  229,  218,  177,  129,   94,   64,   45,   29,   18,
 		   8,    2,    0,   -4,   -7,   -7,   -9,   -9,   -9,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
@@ -30,7 +34,7 @@ static const int timbre_table[8][256] =
 		-209, -219, -230, -238, -244, -249, -252, -252, -252, -252, -252, -249, -249, -249, -246, -244,
 		-241, -238, -238, -236, -236, -233, -230, -228, -225, -225, -219, -222, -219, -214, -190,  -74
 	},
-	{
+	{	// Tone 1
 		   3,   93,  139,  174,  197,  213,  220,  220,  220,  217,  217,  213,  213,  213,  213,  217,
 		 220,  223,  226,  226,  226,  220,  210,  194,  178,  168,  158,  152,  142,  116,   61,    0,
 		 -54,  -99, -138, -164, -186, -180, -141,  -96,  -54,  -15,   12,   35,   51,   42,   -2,  -50,
@@ -48,7 +52,7 @@ static const int timbre_table[8][256] =
 		 139,  110,   87,   71,   58,   55,   64,   77,   90,  103,  113,  119,  123,  106,   64,   16,
 		 -31,  -70,  -96, -122, -138, -148, -154, -157, -157, -157, -157, -157, -157, -154, -125,  -63
 	},
-	{
+	{	// Tone 2
 		  14,   35,   50,   53,   59,   62,   62,   62,   65,   92,  154,  199,  211,  217,  226,  229,
 		 232,  235,  238,  241,  244,  247,  250,  250,  250,  250,  244,  232,  223,  214,  199,  169,
 		 142,  122,   98,   80,   65,   53,   44,   38,   35,   35,   38,   44,   50,   53,   56,   62,
@@ -66,7 +70,7 @@ static const int timbre_table[8][256] =
 		  77,   95,  116,  142,  163,  181,  193,  202,  205,  184,  136,   83,   35,   -4,  -34,  -58,
 		 -79, -129, -198, -219, -225, -234, -240, -246, -249, -249, -240, -228, -168,  -94,  -43,   -1
 	 },
-	{
+	{	// Tone 3
 		  70,  182,  208,  220,  235,  241,  247,  244,  229,  220,  194,  135,   88,   52,   32,   32,
 		  38,   47,   52,   61,   64,   70,   73,   70,   67,   67,   67,   64,   64,   64,   64,   67,
 		  70,   73,   76,   76,   76,   79,   76,   67,   61,   55,   47,   44,   38,   35,   14,  -25,
@@ -84,7 +88,7 @@ static const int timbre_table[8][256] =
 		 211,  220,  232,  241,  247,  253,  255,  250,  235,  223,  203,  150,  102,   70,   52,   52,
 		  58,   67,   76,   82,   85,   88,   64,   14,  -40,  -90, -131, -163, -190, -204, -152,  -34
 	},
-	{
+	{	// Tone 4
 		   5,   26,   43,   56,   80,  107,  134,  158,  177,  185,  188,  188,  188,  188,  188,  188,
 		 185,  185,  180,  177,  172,  164,  153,  148,  140,  134,  132,  129,  129,  129,  129,  126,
 		 129,  129,  129,  123,  107,   83,   59,   40,   24,   10,    0,   -9,  -23,  -42,  -60,  -77,
@@ -103,6 +107,7 @@ static const int timbre_table[8][256] =
 		-228, -225, -222, -222, -219, -214, -209, -203, -201, -193, -179, -163, -128,  -87,  -50,  -17
 	},
 	{
+		// Tone 5
 		   2,   16,   24,   38,   68,  107,  143,  167,  173,  176,  176,  178,  173,  121,   55,    2,
 		 -43,  -76, -103, -122, -142, -158, -172, -183, -191, -197, -199, -202, -202, -202, -197, -197,
 		-194, -191, -191, -188, -177, -169, -161, -153, -144, -142, -136, -142, -175, -208, -216, -219,
@@ -121,6 +126,7 @@ static const int timbre_table[8][256] =
 		-111, -111, -111, -111, -111, -111, -111, -111, -111, -109, -109, -100,  -78,  -54,  -29,  -12
 	},
 	{
+		// Tone 6
 		   2,   10,   21,   32,   53,   83,  115,  142,  164,  180,  194,  202,  202,  202,  202,  202,
 		 202,  202,  202,  202,  202,  204,  207,  210,  212,  212,  215,  215,  218,  220,  223,  226,
 		 226,  229,  229,  231,  231,  234,  237,  239,  239,  242,  242,  242,  245,  245,  247,  250,
@@ -139,6 +145,7 @@ static const int timbre_table[8][256] =
 		-195, -193, -193, -190, -187, -184, -179, -163, -147, -133, -125, -112,  -90,  -63,  -36,  -15
 	},
 	{
+		// Tone 7
 		   0,   60,  118,  128,  140,  152,  161,  167,  170,  176,  185,  195,  204,  210,  216,  219,
 		 222,  225,  231,  237,  240,  246,  249,  249,  252,  252,  255,  255,  255,  255,  255,  255,
 		 255,  255,  252,  249,  246,  243,  240,  240,  237,  234,  228,  219,  213,  207,  201,  198,
@@ -158,46 +165,6 @@ static const int timbre_table[8][256] =
 	}
 };
 
-static const int square_table[256] =
-{
-	 255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
-	 255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
-	 255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
-	 255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
-	 255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
-	 255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
-	 255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
-	 255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
-	-255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255,
-	-255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255,
-	-255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255,
-	-255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255,
-	-255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255,
-	-255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255,
-	-255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255,
-	-255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255
-};
-
-static const int noise_table[256] =
-{
-	-229,  -47,   92,  240,  255,  201,  227,  176,  211,  163,   70,  220,  240,  147,  160,  115,
-	 192,  224,  131,  112,   80,  214,  112,   86,   64, -213, -159,    0,  163,  211,  204,   73,
-	 -37, -210, -242, -245, -239, -184,  -66,   76,  227,  224,  124,  -53, -210, -239, -248, -226,
-	 -66,   51,  224,  240,  121,  150,   80, -229, -117,   22,  217,  236,  102,  140,   83,  -50,
-	 -63,  217,  227,  204,    9, -127, -235, -242, -235, -155,    3,  195,  188, -229, -232, -226,
-	 -15,  115,  236,  243,  233,  176,   60, -149, -232, -232, -216,  -59,   16,  208,  252,  240,
-	 160,   22, -139, -223, -235, -203,    9,  160,  243,  246,  185,  204,   57, -226, -120,   12,
-	  80,  243,  243,  236,   70,  -56, -223, -235, -219,  -56,   83,  236,  252,  179,  204,  160,
-	  22,  227,  236,  227,   70,  -69, -219, -232, -232, -120,   35,  224,  243,  195,  182,  147,
-	 112,  147,  144, -171, -235, -223,  -75,    3,  182,  236,  236,  150,   -8, -194, -232, -229,
-	-203,  -31,  115,  233,  243,  147,  179,   99,  -50,   57,  227,  233,  112,  150,   64, -226,
-	-242, -213, -226, -235, -213,   41,  156,  236,  246,  236,  150,   57, -181, -226, -226, -155,
-	   9,   35,  240,  246,  236,  128,   -8, -210, -229, -219,  -95,   67,  230,  246,  240,  195,
-	 172,  233,  233,  153,    0, -171, -223, -235, -184,    9,  163,  233,  236,  182,  176,  192,
-	 233,  233,  214,   86,  -15, -216, -239, -229, -162,  -11,   22,  236,  243,  224,   51,  -75,
-	-219, -229, -229,  -79,   57,  230,  243,  179,  179,  144,   12,  227,  230,  220,   57,  -75
-};
-
 static const double detune_rate[32] =
 {
 	100.0,  97.8,  91.7,  91.3,  88.1,  85.2,  82.1,  79.2,
diff --git a/src/vm/scv/vdp.cpp b/src/vm/scv/vdp.cpp
index 74b377d..5d71a57 100755
--- a/src/vm/scv/vdp.cpp
+++ b/src/vm/scv/vdp.cpp
@@ -4,6 +4,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.21 -
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ EPOCH TV-1 ]
 */
 
diff --git a/src/vm/scv/vdp.h b/src/vm/scv/vdp.h
index 08011e0..f769265 100755
--- a/src/vm/scv/vdp.h
+++ b/src/vm/scv/vdp.h
@@ -4,6 +4,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.21 -
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ EPOCH TV-1 ]
 */
 
diff --git a/src/vm/scv/vdp_characters.h b/src/vm/scv/vdp_characters.h
index 9261b64..0e9acec 100755
--- a/src/vm/scv/vdp_characters.h
+++ b/src/vm/scv/vdp_characters.h
@@ -1,8 +1,12 @@
 /*
 	EPOCH/YENO Super Cassette Vision Emulator 'Libretro-EmuSCV'
 
-	Author : MaximeARCONATO (aka MaaaX)
-	Date   : 2020.11.14 -
+	Author : Takeda.Toshiya
+	Date   : 2006.08.21 -
+
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
 
 	[ EPOCH TV-1 table of characters ]
 */
diff --git a/src/vm/scv/vdp_colors.h b/src/vm/scv/vdp_colors.h
index 602cd7f..60da4ff 100755
--- a/src/vm/scv/vdp_colors.h
+++ b/src/vm/scv/vdp_colors.h
@@ -4,8 +4,9 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.21 -
 
-	Modifed by Maxime MARCONATO (aka MaaaX)
-	for Libretro-EmuSCV
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
 
 	[ EPOCH TV-1 palette of colors ]
 */
diff --git a/src/vm/upd7801.cpp b/src/vm/upd7801.cpp
index 7a8e42b..6238713 100755
--- a/src/vm/upd7801.cpp
+++ b/src/vm/upd7801.cpp
@@ -5,6 +5,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.21 -
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ uPD7801 ]
 */
 
diff --git a/src/vm/upd7801.h b/src/vm/upd7801.h
index b89e88e..31c9102 100755
--- a/src/vm/upd7801.h
+++ b/src/vm/upd7801.h
@@ -5,6 +5,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.21 -
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ uPD7801 ]
 */
 
diff --git a/src/vm/vm.h b/src/vm/vm.h
index 782fdcb..32aa1e2 100755
--- a/src/vm/vm.h
+++ b/src/vm/vm.h
@@ -4,6 +4,10 @@
 	Author : Takeda.Toshiya
 	Date   : 2006.08.18 -
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ common header ]
 */
 
diff --git a/src/vm/vm_template.h b/src/vm/vm_template.h
index 743e12e..ced10d7 100755
--- a/src/vm/vm_template.h
+++ b/src/vm/vm_template.h
@@ -4,6 +4,10 @@
 	Author : K.Ohta
 	Date   : 2018.10.10-
 
+	Modified for Libretro-EmuSCV
+	Author : MARCONATO Maxime (aka MaaaX)
+	Date   : 2019-12-05 - 
+
 	[ virtual machine template ]
 */
 
@@ -67,8 +71,9 @@ public:
 	// sound generation
 	virtual void initialize_sound(int rate) { }//, int samples) { }
 	virtual int16_t* create_sound(int* extra_frames) { return NULL; }
-	virtual int get_sound_buffer_ptr() { return 0; }
+//	virtual int get_sound_buffer_ptr() { return 0; }
 	virtual void set_sound_device_volume(int ch, int decibel_l, int decibel_r) { }
+	virtual void reset_sound() { }
 
 	// network
 	virtual void notify_socket_connected(int ch) { }
