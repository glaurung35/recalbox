diff --git a/Makefile.libretro b/Makefile.libretro
index e152334..289629e 100755
--- a/Makefile.libretro
+++ b/Makefile.libretro
@@ -1,9 +1,9 @@
 TARGET_NAME := emuscv
 
 EMUSCV_VERSION_MAJOR := 0
-EMUSCV_VERSION_MINOR := 07
+EMUSCV_VERSION_MINOR := 08
 #EMUSCV_VERSION_DATETIME := $(shell date -u +'%Y%m%d%H%M%S')
-EMUSCV_VERSION_DATETIME := '20210126134500'
+EMUSCV_VERSION_DATETIME := '20210126232500'
 EMUSCV_VERSION := $(EMUSCV_VERSION_MAJOR).$(EMUSCV_VERSION_MINOR).$(EMUSCV_VERSION_DATETIME)
 
 DEBUG = 1
diff --git a/changelog.txt b/changelog.txt
index ed3cb17..e69f9c6 100755
--- a/changelog.txt
+++ b/changelog.txt
@@ -6,12 +6,19 @@ Libretro-EmuSCV (EPOCH/YENO Super Cassette Vision Emulator)
 ***********************************************************
 * To do list
 ***********************************************************
-- Audio
 - Quick keyboard overlay (to do all with a controller, when there is any keyboard)
 - Savestates
 - In-game configuration menu
 - Native .zip ROMs support (actually supported via frontend's autoextract if supported)
 - In-game display of the resources contained in .zip ROMs
+- Enhance audio PCM 1-bitchannel quality
+
+
+
+***********************************************************
+* Libretro-EmuSCV v0.08.20210126232500
+***********************************************************
+- Added old NTSC wrong color palette (aka Never The Same Color) like in eSCV
 
 
 ***********************************************************
@@ -19,6 +26,7 @@ Libretro-EmuSCV (EPOCH/YENO Super Cassette Vision Emulator)
 ***********************************************************
 - Added Audio (support of PCM 1-bit, tone, noise and 3 square channels)
 
+
 ***********************************************************
 * Libretro-EmuSCV v0.06.20201223231000
 ***********************************************************
diff --git a/src/config.cpp b/src/config.cpp
index 64c333f..f97af0e 100755
--- a/src/config.cpp
+++ b/src/config.cpp
@@ -721,6 +721,18 @@ void DLL_PREFIX apply_display_config()
 			break;
 	}
 
+	switch(config.scv_palette)
+	{
+		case SETTING_PALETTE_STANDARD_VAL:
+		case SETTING_PALETTE_OLDNTSC_VAL:
+			config.window_palette = config.scv_palette;
+			break;
+		case SETTING_PALETTE_AUTO_VAL:
+		default:
+			config.window_palette = SETTING_PALETTE_STANDARD_VAL;
+			break;
+	}
+
 	if(config.scv_displayfullmemory == SETTING_DISPLAYFULLMEMORY_YES_VAL)
 	{
 		config.draw_x = DRAW_X_FULL;
diff --git a/src/config.h b/src/config.h
index 8c507fa..354ec91 100755
--- a/src/config.h
+++ b/src/config.h
@@ -274,6 +274,7 @@ typedef struct {
 		int scv_display;
 		int scv_pixelaspect;
 		int scv_resolution;
+		int scv_palette;
 		int scv_fps;
 		int scv_displayfullmemory;
 		int scv_displayinputs;
@@ -290,6 +291,7 @@ typedef struct {
 		int window_console;
 		int window_pixelaspect;
 		int window_resolution;
+		int window_palette;
 		int window_width;
 		int window_height;
 		float window_aspect_ratio;
diff --git a/src/emuscv.cpp b/src/emuscv.cpp
index ab941a7..98f024b 100755
--- a/src/emuscv.cpp
+++ b/src/emuscv.cpp
@@ -1501,6 +1501,7 @@ void cEmuSCV::RetroSetEnvironment(retro_environment_t cb)
 		{ SETTING_DISPLAY_KEY, "DISPLAY; AUTO|EMUSCV|EPOCH|YENO" },
 		{ SETTING_PIXELASPECT_KEY, "PIXELASPECT; AUTO|RECTANGULAR|SQUARE" },
 		{ SETTING_RESOLUTION_KEY, "RESOLUTION; AUTO|LOW|MEDIUM|HIGH" },
+		{ SETTING_PALETTE_KEY, "PALETTE; AUTO|STANDARD|OLDNTSC" },
 		{ SETTING_FPS_KEY, "FPS; AUTO|EPOCH60|YENO50" },
 		{ SETTING_DISPLAYFULLMEMORY_KEY, "DISPLAYFULLMEMORY; AUTO|YES|NO" },
 		{ SETTING_DISPLAYINPUTS_KEY, "DISPLAYINPUTS; AUTO|YES|NO" },
@@ -3570,6 +3571,34 @@ void cEmuSCV::RetroLoadSettings(void)
 			break;
 	}
 
+	// PALETTE
+	config.scv_palette = SETTING_PALETTE_AUTO_VAL;
+	var.key   = SETTING_PALETTE_KEY;
+	var.value = NULL;
+	if (RetroEnvironment(RETRO_ENVIRONMENT_GET_VARIABLE, &var) && var.value)
+	{
+		_TCHAR str[sizeof(var.value)];
+		memset(str, 0, sizeof(str));
+		strncpy(str, var.value, sizeof(str));
+		if(strcmp(str, _T(SETTING_PALETTE_STANDARD_KEY)) == 0)
+			config.scv_palette = SETTING_PALETTE_STANDARD_VAL;
+		else if(strcmp(str, _T(SETTING_PALETTE_OLDNTSC_KEY)) == 0)
+			config.scv_palette = SETTING_PALETTE_OLDNTSC_VAL;
+	}
+	switch(config.scv_palette)
+	{
+		case SETTING_PALETTE_STANDARD_VAL:
+			RetroLogPrintf(RETRO_LOG_INFO, "[%s] Palette setting: standard PAL/NEW NTSC colors\n", EMUSCV_NAME);
+			break;
+		case SETTING_PALETTE_OLDNTSC_VAL:
+			RetroLogPrintf(RETRO_LOG_INFO, "[%s] Resolution setting: old NTSC colors\n", EMUSCV_NAME);
+			break;
+		case SETTING_PALETTE_AUTO_VAL:
+		default:
+			RetroLogPrintf(RETRO_LOG_INFO, "[%s] Resolution setting: automatic (standard PAL/NEW NTSC colors)\n", EMUSCV_NAME);
+			break;
+	}
+
 	// FPS
 	config.scv_fps = SETTING_FPS_AUTO_VAL;
 	var.key   = SETTING_FPS_KEY;
@@ -3715,10 +3744,16 @@ void cEmuSCV::RetroLoadSettings(void)
 			break;
 	}
 
-	apply_display_config();
-
+	apply_display_config();	
+	if(config.window_palette == SETTING_PALETTE_OLDNTSC_VAL)
+		palette_pc = (scrntype_t *)palette_ntsc;
+	else
+		palette_pc = (scrntype_t *)palette_pal;
 	if(escv_emu)
+	{
+		escv_emu->get_osd()->reset_palette();
 		escv_emu->get_osd()->reset_sound();
+	}
 	sound_buffer_samples = (AUDIO_SAMPLING_RATE / config.window_fps + 0.5);
 
 //	RetroLogPrintf(RETRO_LOG_DEBUG, "[%s] apply_display_config()\n", EMUSCV_NAME);
@@ -3733,7 +3768,7 @@ void cEmuSCV::RetroSaveSettings(void)
 //	RetroLogPrintf(RETRO_LOG_DEBUG, "[%s] ================================================================================\n", EMUSCV_NAME);
 //	RetroLogPrintf(RETRO_LOG_INFO, "[%s] cEmuSCV::RetroSaveSettings()\n", EMUSCV_NAME);
 
-	struct retro_variable variable[10];
+	struct retro_variable variable[11];
 
 	variable[0].key = SETTING_CONSOLE_KEY;
 	switch(config.scv_console)
@@ -3804,86 +3839,101 @@ void cEmuSCV::RetroSaveSettings(void)
 			break;
 	}
 	
-	variable[4].key = SETTING_FPS_KEY;
+	variable[4].key = SETTING_PALETTE_KEY;
+	switch(config.scv_palette)
+	{
+		case SETTING_PALETTE_STANDARD_VAL:
+			variable[4].value = "PALETTE; STANDARD";
+			break;
+		case SETTING_PALETTE_OLDNTSC_VAL:
+			variable[4].value = "PALETTE; OLDNTSC";
+			break;
+		case SETTING_PALETTE_AUTO_VAL:
+		default:
+			variable[4].value = "PALETTE; AUTO";
+			break;
+	}
+	
+	variable[5].key = SETTING_FPS_KEY;
 	switch(config.scv_fps)
 	{
 		case SETTING_FPS_EPOCH60_VAL:
-			variable[4].value = "FPS; EPOCH60";
+			variable[5].value = "FPS; EPOCH60";
 			break;
 		case SETTING_FPS_YENO50_VAL:
-			variable[4].value = "FPS; YENO50";
+			variable[5].value = "FPS; YENO50";
 			break;
 		case SETTING_FPS_AUTO_VAL:
 		default:
-			variable[4].value = "FPS; AUTO";
+			variable[5].value = "FPS; AUTO";
 			break;
 	}
 
-	variable[5].key = SETTING_DISPLAYFULLMEMORY_KEY;
+	variable[6].key = SETTING_DISPLAYFULLMEMORY_KEY;
 	switch(config.scv_displayfullmemory)
 	{
 		case SETTING_DISPLAYFULLMEMORY_YES_VAL:
-			variable[5].value = "DISPLAYFULLMEMORY; YES";
+			variable[6].value = "DISPLAYFULLMEMORY; YES";
 			break;
 		case SETTING_DISPLAYFULLMEMORY_NO_VAL:
-			variable[5].value = "DISPLAYFULLMEMORY; NO";
+			variable[6].value = "DISPLAYFULLMEMORY; NO";
 			break;
 		case SETTING_DISPLAYFULLMEMORY_AUTO_VAL:
 		default:
-			variable[5].value = "DISPLAYFULLMEMORY; AUTO";
+			variable[6].value = "DISPLAYFULLMEMORY; AUTO";
 			break;
 	}
 	
-	variable[6].key = SETTING_DISPLAYINPUTS_KEY;
+	variable[7].key = SETTING_DISPLAYINPUTS_KEY;
 	switch(config.scv_displayinputs)
 	{
 		case SETTING_DISPLAYINPUTS_YES_VAL:
-			variable[6].value = "DISPLAYINPUTS; YES";
+			variable[7].value = "DISPLAYINPUTS; YES";
 			break;
 		case SETTING_DISPLAYINPUTS_NO_VAL:
-			variable[6].value = "DISPLAYINPUTS; NO";
+			variable[7].value = "DISPLAYINPUTS; NO";
 			break;
 		case SETTING_DISPLAYINPUTS_AUTO_VAL:
 		default:
-			variable[6].value = "DISPLAYINPUTS; AUTO";
+			variable[7].value = "DISPLAYINPUTS; AUTO";
 			break;
 	}
 	
-	variable[7].key = SETTING_LANGAGE_KEY;
+	variable[8].key = SETTING_LANGAGE_KEY;
 	switch(config.scv_langage)
 	{
 		case SETTING_LANGAGE_JP_VAL:
-			variable[7].value = "LANGAGE; JP";
+			variable[8].value = "LANGAGE; JP";
 			break;
 		case SETTING_LANGAGE_FR_VAL:
-			variable[7].value = "LANGAGE; FR";
+			variable[8].value = "LANGAGE; FR";
 			break;
 		case SETTING_LANGAGE_EN_VAL:
-			variable[7].value = "LANGAGE; EN";
+			variable[8].value = "LANGAGE; EN";
 			break;
 		case SETTING_LANGAGE_AUTO_VAL:
 		default:
-			variable[7].value = "LANGAGE; AUTO";
+			variable[8].value = "LANGAGE; AUTO";
 			break;
 	}
 	
-	variable[8].key = SETTING_CHECKBIOS_KEY;
+	variable[9].key = SETTING_CHECKBIOS_KEY;
 	switch(config.scv_checkbios)
 	{
 		case SETTING_CHECKBIOS_NO_VAL:
-			variable[8].value = "CHECK BIOS; NO";
+			variable[9].value = "CHECK BIOS; NO";
 			break;
 		case SETTING_CHECKBIOS_YES_VAL:
-			variable[8].value = "CHECK BIOS; YES";
+			variable[9].value = "CHECK BIOS; YES";
 			break;
 		case SETTING_CHECKBIOS_AUTO_VAL:
 		default:
-			variable[8].value = "CHECK BIOS; AUTO";
+			variable[9].value = "CHECK BIOS; AUTO";
 			break;
 	}
 
-	variable[9].key = NULL;
-	variable[9].value = NULL;
+	variable[10].key = NULL;
+	variable[10].value = NULL;
 
 	RetroEnvironment(RETRO_ENVIRONMENT_SET_VARIABLES, variable);
 
@@ -3892,12 +3942,25 @@ void cEmuSCV::RetroSaveSettings(void)
 	variable[1].value = "DISPLAY; AUTO|EMUSCV|EPOCH|YENO";
 	variable[2].value = "PIXELASPECT; AUTO|RECTANGULAR|SQUARE";
 	variable[3].value = "RESOLUTION; AUTO|LOW|MEDIUM|HIGH";
-	variable[4].value = "FPS; AUTO|EPOCH60|YENO50";
-	variable[5].value = "DISPLAYFULLMEMORY; AUTO|YES|NO";
-	variable[6].value = "DISPLAYINPUTS; AUTO|YES|NO";
-	variable[7].value = "LANGAGE; AUTO|JP|FR|EN";
-	variable[8].value = "CHECKBIOS; AUTO|YES|NO";
+	variable[4].value = "PALETTE; AUTO|STANDARD|OLDNTSC";
+	variable[5].value = "FPS; AUTO|EPOCH60|YENO50";
+	variable[6].value = "DISPLAYFULLMEMORY; AUTO|YES|NO";
+	variable[7].value = "DISPLAYINPUTS; AUTO|YES|NO";
+	variable[8].value = "LANGAGE; AUTO|JP|FR|EN";
+	variable[9].value = "CHECKBIOS; AUTO|YES|NO";
 	RetroEnvironment(RETRO_ENVIRONMENT_SET_VARIABLES, variable);
+
+	apply_display_config();
+	if(config.window_palette == SETTING_PALETTE_OLDNTSC_VAL)
+		palette_pc = (scrntype_t *)palette_ntsc;
+	else
+		palette_pc = (scrntype_t *)palette_pal;
+	if(escv_emu)
+	{
+		escv_emu->get_osd()->reset_palette();
+		escv_emu->get_osd()->reset_sound();
+	}
+	sound_buffer_samples = (AUDIO_SAMPLING_RATE / config.window_fps + 0.5);
 }
 
 //
diff --git a/src/osd/libretro/osd.h b/src/osd/libretro/osd.h
index bc97643..eef19c3 100755
--- a/src/osd/libretro/osd.h
+++ b/src/osd/libretro/osd.h
@@ -601,7 +601,7 @@ public:
 	scrntype_t* get_vm_screen_ptr();
 	scrntype_t* get_vm_line_ptr(int y);
 	scrntype_t* get_vm_pixel_ptr(int x, int y);
-	
+	void reset_palette();
 	int draw_screen();
 /*
 #ifdef ONE_BOARD_MICRO_COMPUTER
diff --git a/src/osd/libretro/osd_screen.cpp b/src/osd/libretro/osd_screen.cpp
index cd93729..d42292f 100755
--- a/src/osd/libretro/osd_screen.cpp
+++ b/src/osd/libretro/osd_screen.cpp
@@ -195,6 +195,11 @@ scrntype_t* OSD::get_vm_pixel_ptr(int x, int y)
 	return vm_screen_buffer.get_pixel_ptr(x, y);
 }
 
+void OSD::reset_palette()
+{
+	vm->reset_palette();
+}
+
 int OSD::draw_screen()
 {
 /*
diff --git a/src/vm/scv/scv.cpp b/src/vm/scv/scv.cpp
index cc475bf..c989c66 100755
--- a/src/vm/scv/scv.cpp
+++ b/src/vm/scv/scv.cpp
@@ -128,6 +128,11 @@ DEVICE *VM::get_cpu(int index)
 // draw screen
 // ----------------------------------------------------------------------------
 
+void VM::reset_palette()
+{
+	vdp->reset_palette();
+}
+
 void VM::draw_screen()
 {
 	vdp->draw_screen();
diff --git a/src/vm/scv/scv.h b/src/vm/scv/scv.h
index fe7c34b..d09a54c 100755
--- a/src/vm/scv/scv.h
+++ b/src/vm/scv/scv.h
@@ -119,6 +119,15 @@
 #define SETTING_RESOLUTION_HIGH_KEY			"HIGH"
 #define SETTING_RESOLUTION_HIGH_VAL			3
 
+#define SETTING_PALETTE_KEY					"emuscv_palette"
+#define SETTING_PALETTE_VAL					"PALETTE"
+#define SETTING_PALETTE_AUTO_KEY			"AUTO"
+#define SETTING_PALETTE_AUTO_VAL			0
+#define SETTING_PALETTE_STANDARD_KEY		"STANDARD"
+#define SETTING_PALETTE_STANDARD_VAL		1
+#define SETTING_PALETTE_OLDNTSC_KEY			"OLDNTSC"
+#define SETTING_PALETTE_OLDNTSC_VAL			2
+
 #define SETTING_FPS_KEY						"emuscv_fps"
 #define SETTING_FPS_VAL						"FPS"
 #define SETTING_FPS_AUTO_KEY				"AUTO"
@@ -217,6 +226,7 @@ public:
 #endif
 
 	// draw screen
+	void reset_palette();
 	void draw_screen();
 
 	// sound generation
diff --git a/src/vm/scv/vdp.cpp b/src/vm/scv/vdp.cpp
index 5d71a57..e3a50f8 100755
--- a/src/vm/scv/vdp.cpp
+++ b/src/vm/scv/vdp.cpp
@@ -15,12 +15,21 @@
 #include "scv.h"
 #include "../upd7801.h"
 
+void VDP::reset_palette()
+{
+	if(config.window_palette == SETTING_PALETTE_OLDNTSC_VAL)
+		palette_pc = (scrntype_t *)palette_ntsc;
+	else
+		palette_pc = (scrntype_t *)palette_pal;
+}
+
 void VDP::initialize()
 {
 	resetting = true;
 	resetscanband = int(SCREEN_HEIGHT*rand()/RAND_MAX);
 	// register event to interrupt
 	register_vline_event(this);
+	reset_palette();
 }
 
 void VDP::reset()
diff --git a/src/vm/scv/vdp.h b/src/vm/scv/vdp.h
index f769265..55877f0 100755
--- a/src/vm/scv/vdp.h
+++ b/src/vm/scv/vdp.h
@@ -52,6 +52,7 @@ public:
 	~VDP() {}
 
 	// common functions
+	void reset_palette();
 	void initialize();
 	void reset();
 	void event_vline(int v, int clock);
diff --git a/src/vm/scv/vdp_colors.h b/src/vm/scv/vdp_colors.h
index 60da4ff..038b70a 100755
--- a/src/vm/scv/vdp_colors.h
+++ b/src/vm/scv/vdp_colors.h
@@ -17,7 +17,7 @@
 #define XXX 0x0	// Not tested
 #define OOO 0x8	// Tested but unable to find color
 
-static const scrntype_t palette_pc[16] =
+static const scrntype_t palette_pal[16] =
 {
 	RGB_COLOR(  0,   0, 136),	//  0 0x0 BLUE 1 (MEDIUM) for text  / TRANSPARENT for sprites
 	RGB_COLOR(  8,   8,   8),	//  1 0x1 BLACK
@@ -42,6 +42,29 @@ static const scrntype_t palette_pc[16] =
 // 128 136 144 152 160 168 176 184
 // 192 200 208 216 224 232 240 248
 
+
+static const scrntype_t palette_ntsc[16] =
+{
+	RGB_COLOR(  0,  90, 156),
+	RGB_COLOR(  0,   0,   0),
+	RGB_COLOR( 58, 148, 255),
+	RGB_COLOR(  0,   0, 255),
+	RGB_COLOR( 16, 214,   0),
+	RGB_COLOR( 66, 255,  16),
+	RGB_COLOR(123, 230, 197),
+	RGB_COLOR(  0, 173,   0),
+	RGB_COLOR(255,  41, 148),
+	RGB_COLOR(255,  49,  16),
+	RGB_COLOR(255,  58, 255),
+	RGB_COLOR(239, 156, 255),
+	RGB_COLOR(255, 206, 33),
+	RGB_COLOR( 74, 123, 16),
+	RGB_COLOR(165, 148, 165),
+	RGB_COLOR(255, 255, 255)
+};
+
+static scrntype_t *palette_pc;
+
 // Pairs of color used for two colors sprtites
 //                                        0x0  0x1  0x2  0x3  0x4  0x5  0x6  0x7  0x8  0x9  0xA  0xB  0xC  0xD  0xE  0xF
 static const uint8_t color_pair_x[16]  = {XXX, XXX, 0x8, 0x9, 0x2, 0x3, 0xA, 0xB, 0x4, 0x5, 0xB, 0xC, 0x6, 0x4, 0xE, XXX};
diff --git a/src/vm/vm_template.h b/src/vm/vm_template.h
index ced10d7..f9ca970 100755
--- a/src/vm/vm_template.h
+++ b/src/vm/vm_template.h
@@ -63,6 +63,7 @@ public:
 	virtual void update_dipswitch(void) { }
 
 	// draw screen
+	virtual void reset_palette() { }
 	virtual void draw_screen() { }
 
 	// multimedia
