diff --git a/Makefile.libretro b/Makefile.libretro
index 289629e..81ce007 100755
--- a/Makefile.libretro
+++ b/Makefile.libretro
@@ -3,7 +3,7 @@ TARGET_NAME := emuscv
 EMUSCV_VERSION_MAJOR := 0
 EMUSCV_VERSION_MINOR := 08
 #EMUSCV_VERSION_DATETIME := $(shell date -u +'%Y%m%d%H%M%S')
-EMUSCV_VERSION_DATETIME := '20210126232500'
+EMUSCV_VERSION_DATETIME := '20210128000000'
 EMUSCV_VERSION := $(EMUSCV_VERSION_MAJOR).$(EMUSCV_VERSION_MINOR).$(EMUSCV_VERSION_DATETIME)
 
 DEBUG = 1
diff --git a/changelog.txt b/changelog.txt
index e69f9c6..65a2ef6 100755
--- a/changelog.txt
+++ b/changelog.txt
@@ -16,9 +16,10 @@ Libretro-EmuSCV (EPOCH/YENO Super Cassette Vision Emulator)
 
 
 ***********************************************************
-* Libretro-EmuSCV v0.08.20210126232500
+* Libretro-EmuSCV v0.08.20210128000000
 ***********************************************************
 - Added old NTSC wrong color palette (aka Never The Same Color) like in eSCV
+- Enhanced audio quality for PCM 1-bit channel
 
 
 ***********************************************************
diff --git a/src/vm/scv/sound.cpp b/src/vm/scv/sound.cpp
index 2581427..dcfcec9 100755
--- a/src/vm/scv/sound.cpp
+++ b/src/vm/scv/sound.cpp
@@ -62,7 +62,9 @@ void SOUND::write_data8(uint32_t addr, uint32_t data)
 			case CMD_PCM:
 				param_cnt = MAX_PARAM;
 				memset(pcm_table, 0, PCM_TABLE_SIZE+8);
+				memset(pcm_table_smooth, 0, PCM_TABLE_SMOOTH_SIZE);
 				pcm_len = pcm.ptr = 0;
+				pcm_table_smooth_index = 0;
 				break;
 		}
 		param_ptr = 0;
@@ -323,6 +325,7 @@ void SOUND::mix(int16_t* buffer, uint32_t cnt)
 {
 	int64_t vol;
 
+
 	// create sound buffer
 	for(int i = cnt; i != 0; i--)
 	{
@@ -331,8 +334,6 @@ void SOUND::mix(int16_t* buffer, uint32_t cnt)
 		// mix pcm
 		if(pcm.count != 0)
 		{
-//			int64_t v = pcm.output;
-//			int64_t c = 1;
 			pcm.count -= pcm.diff;
 			while(pcm.count <= 0)
 			{
@@ -344,9 +345,13 @@ void SOUND::mix(int16_t* buffer, uint32_t cnt)
 					else
 						pcm_table_data[i] = 0;
 				}
-				pcm.output = (pcm_table_data[0]+pcm_table_data[1]+pcm_table_data[4]+pcm_table_data[5]+pcm_table_data[6]+(pcm_table_data[2]+pcm_table_data[3]+pcm_table_data[4]+pcm_table_data[5]+pcm_table_data[6]+pcm_table_data[7]+pcm_table_data[8])<<1+pcm_table_data[9]) >> 4;
-//				v += tone.output;
-//				c++;
+
+				pcm.output =  pcm_table_data[0]+pcm_table_data[1]+pcm_table_data[2]+pcm_table_data[3]+pcm_table_data[4]+pcm_table_data[5]+pcm_table_data[6]+pcm_table_data[7]
+				           +                    pcm_table_data[1]+pcm_table_data[2]+pcm_table_data[3]+pcm_table_data[4]+pcm_table_data[5]+pcm_table_data[6]
+				           +                                      pcm_table_data[2]+pcm_table_data[3]+pcm_table_data[4]+pcm_table_data[5]
+				           +                                                        pcm_table_data[3]+pcm_table_data[4];
+				pcm.output = pcm.output >> 4;
+
 				if(++pcm.ptr >= pcm_len)
 				{
 					pcm.count = 0;
@@ -354,16 +359,18 @@ void SOUND::mix(int16_t* buffer, uint32_t cnt)
 				}
 			}
 			// Smooth sound
-//			v = v/c;
-//			vol += v;
-			vol += pcm.output;
+			pcm_table_smooth[pcm_table_smooth_index] = pcm.output;
+			if(++pcm_table_smooth_index >= PCM_TABLE_SMOOTH_SIZE)
+				pcm_table_smooth_index = 0;
+			int64_t v = pcm_table_smooth[0];
+			for(int i = PCM_TABLE_SMOOTH_SIZE-1; i > 0; i--)
+				v += pcm_table_smooth[i];
+			vol += v>>3;	// Optimization for: vol += v/PCM_TABLE_SMOOTH_SIZE;
 		}
 
 		// mix tone
 		if(tone.volume && tone.period)
 		{
-//			int64_t v = tone.output;
-//			int64_t c = 1;
 			tone.count -= tone.diff;
 			while(tone.count <= 0)
 			{
@@ -371,12 +378,7 @@ void SOUND::mix(int16_t* buffer, uint32_t cnt)
 				if(++tone.ptr >= 256)
 					tone.ptr = tone.offset;
 				tone.output = (timbre_table[tone.timbre][tone.ptr] * tone.volume) >> 8;
-//				v += tone.output;
-//				c++;
 			}
-			// Smooth sound
-//			v = v/c;
-//			vol += v;
 			vol += tone.output;
 		}
 
diff --git a/src/vm/scv/sound.h b/src/vm/scv/sound.h
index 1d9a008..0c457c6 100755
--- a/src/vm/scv/sound.h
+++ b/src/vm/scv/sound.h
@@ -18,29 +18,30 @@
 #include "../../emu.h"
 #include "../device.h"
 
-#define TONE_CLOCK   1500000.0
-#define NOISE_CLOCK      750.0
-#define SQUARE_CLOCK  175000.0
-#define PCM_CLOCK    1500000.0
-
-#define MAX_TONE          9000
-#define MAX_NOISE         3000
-#define MAX_SQUARE1       1500
-#define MAX_SQUARE2       1500
-#define MAX_SQUARE3       1500
-#define MAX_PCM          12000
-
-#define MAX_PARAM       0x8000
-
-#define NOISE_TABLE_SIZE  1024
-#define SQUARE_TABLE_SIZE  256
-#define PCM_TABLE_SIZE 0x40000
-#define PCM_TABLE_DATA_SIZE 10
-
-#define CMD_SILENCE	      0x00
-#define CMD_NOISE	      0x01
-#define CMD_TONE	      0x02
-#define CMD_PCM		      0x1F
+#define TONE_CLOCK    1500000.0
+#define NOISE_CLOCK       750.0
+#define SQUARE_CLOCK   175000.0
+#define PCM_CLOCK     1500000.0
+
+#define MAX_TONE           9000
+#define MAX_NOISE          3000
+#define MAX_SQUARE1        1500
+#define MAX_SQUARE2        1500
+#define MAX_SQUARE3        1500
+#define MAX_PCM           12000
+
+#define MAX_PARAM        0x8000
+
+#define NOISE_TABLE_SIZE   1024
+#define SQUARE_TABLE_SIZE   256
+#define PCM_TABLE_SIZE  0x40000
+#define PCM_TABLE_DATA_SIZE   8
+#define PCM_TABLE_SMOOTH_SIZE 8
+
+#define CMD_SILENCE	       0x00
+#define CMD_NOISE	       0x01
+#define CMD_TONE	       0x02
+#define CMD_PCM		       0x1F
 
 typedef struct
 {
@@ -72,6 +73,8 @@ private:
 	uint32_t cmd_addr;
 	int pcm_len;
 	int pcm_table_data[PCM_TABLE_DATA_SIZE];
+	int pcm_table_smooth[PCM_TABLE_SMOOTH_SIZE];
+	int pcm_table_smooth_index;
 
 	int volume_table[32];
 	int detune_table[32];
