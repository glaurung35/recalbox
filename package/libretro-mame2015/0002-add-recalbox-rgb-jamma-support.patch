diff --git a/src/osd/retro/libretro.c b/src/osd/retro/libretro.c
index f50b5ff7d2..2bf0f02d6e 100755
--- a/src/osd/retro/libretro.c
+++ b/src/osd/retro/libretro.c
@@ -702,7 +702,39 @@ size_t retro_get_memory_size(unsigned type) { return 0; }
 bool retro_load_game_special(unsigned game_type, const struct retro_game_info *info, size_t num_info) {return false; }
 void retro_cheat_reset(void) {}
 void retro_cheat_set(unsigned unused, bool unused1, const char* unused2) {}
-void retro_set_controller_port_device(unsigned in_port, unsigned device) {}
+
+extern unsigned int retro_input_device_type[];
+#define MAX_PLAYERS 4
+struct retro_controller_info controller_infos[MAX_PLAYERS+1];
+
+void SetControllerInfo()
+{
+  log_cb(RETRO_LOG_INFO, "Setting controllers info\n");
+
+  static const struct retro_controller_description controller_description[] = {
+      { "Classic", RETROPAD_CLASSIC },
+      { "Recalbox Jamma (NeoLine)", RETRO_RB_JAMMA_NEOLINE },
+      { "Recalbox Jamma (NeoSquare)", RETRO_RB_JAMMA_NEOSQUARE }
+  };
+
+
+  for (int i = 0; i < MAX_PLAYERS; i++)
+  {
+    controller_infos[i].types = controller_description;
+    controller_infos[i].num_types = sizeof(controller_description) / sizeof(controller_description[0]);
+  }
+
+  controller_infos[MAX_PLAYERS].types = NULL;
+  controller_infos[MAX_PLAYERS].num_types = 0;
+
+  log_cb(RETRO_LOG_INFO, "Waiting for retro controllers infos\n");
+  environ_cb(RETRO_ENVIRONMENT_SET_CONTROLLER_INFO, controller_infos);
+}
+void retro_set_controller_port_device(unsigned in_port, unsigned device) {
+  	log_cb(RETRO_LOG_INFO, "RETRO_SET_CONTROLLER_PORT_DEVICE: port %d device %d\n", in_port, device);
+    if(in_port <=3)
+      retro_input_device_type[in_port] = device;
+}
 
 void *retro_get_fb_ptr(void)
 {
diff --git a/src/osd/retro/libretro.h b/src/osd/retro/libretro.h
index c8fb1472a6..96915b8647 100755
--- a/src/osd/retro/libretro.h
+++ b/src/osd/retro/libretro.h
@@ -1919,6 +1919,13 @@ unsigned retro_get_region(void);
 void *retro_get_memory_data(unsigned id);
 size_t retro_get_memory_size(unsigned id);
 
+#define RETROPAD_CLASSIC	RETRO_DEVICE_ANALOG
+#define RETRO_RB_JAMMA_NEOLINE		RETRO_DEVICE_SUBCLASS(RETRO_DEVICE_ANALOG, 3)
+#define RETRO_RB_JAMMA_NEOSQUARE		RETRO_DEVICE_SUBCLASS(RETRO_DEVICE_ANALOG, 4)
+#define RB_JAMMA(a) ((a) == RETRO_RB_JAMMA_NEOLINE || (a) == RETRO_RB_JAMMA_NEOSQUARE)
+
+void SetControllerInfo();
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/src/osd/retro/retromain.c b/src/osd/retro/retromain.c
index 751ea4432a..27001a8fa7 100755
--- a/src/osd/retro/retromain.c
+++ b/src/osd/retro/retromain.c
@@ -813,7 +813,7 @@ input_item_id PAD_DIR[4][4]=
 //    Default : A ->B1 | B ->B2 | X ->B3 | Y ->B4 | L ->B5 | R ->B6 | keyboard c ->B7 | keyboard v -> B8
 int   Buttons_mapping[8]={RETROPAD_A,RETROPAD_B,RETROPAD_X,RETROPAD_Y,RETROPAD_L,RETROPAD_R,RETROK_c,RETROK_v};
 
-static void Input_Binding(running_machine &machine);
+static void Input_Binding(running_machine &machine, int player);
 
 static INT32 retrokbd_get_state(void *device_internal, void *item_internal)
 {
@@ -916,6 +916,9 @@ void process_mouse_state(void)
    }
 }
 
+unsigned int retro_input_device_type[4] = {0};
+
+
 static void initInput(running_machine &machine)
 {
    int i,j,button;
@@ -958,11 +961,13 @@ static void initInput(running_machine &machine)
 
    //JOY/PAD
 
-   Input_Binding(machine);
+   log_cb(RETRO_LOG_INFO, "Calling setControllerInfo\n");
+   SetControllerInfo();
 
    for(i=0;i<4;i++)
    {
       sprintf(defname, "Joy%d", i);
+      Input_Binding(machine, i);
       joy_device[i]=machine.input().device_class(DEVICE_CLASS_JOYSTICK).add_device(defname);
 
       // add the axes
@@ -1015,7 +1020,7 @@ static void initInput(running_machine &machine)
    }
 }
 
-static void Input_Binding(running_machine &machine)
+static void Input_Binding(running_machine &machine, int player)
 {
    fprintf(stderr, "SOURCE FILE: %s\n", machine.system().source_file);
    fprintf(stderr, "PARENT: %s\n", machine.system().parent);
@@ -1024,12 +1029,21 @@ static void Input_Binding(running_machine &machine)
    fprintf(stderr, "YEAR: %s\n", machine.system().year);
    fprintf(stderr, "MANUFACTURER: %s\n", machine.system().manufacturer);
 
-   Buttons_mapping[0]=RETROPAD_A;
-   Buttons_mapping[1]=RETROPAD_B;
-   Buttons_mapping[2]=RETROPAD_X;
-   Buttons_mapping[3]=RETROPAD_Y;
-   Buttons_mapping[4]=RETROPAD_L;
-   Buttons_mapping[5]=RETROPAD_R;
+   if(RB_JAMMA(retro_input_device_type[player])){
+     Buttons_mapping[0]=RETROPAD_A;
+     Buttons_mapping[1]=RETROPAD_B;
+     Buttons_mapping[2]=RETROPAD_Y;
+     Buttons_mapping[3]=RETROPAD_X;
+     Buttons_mapping[4]=RETROPAD_L;
+     Buttons_mapping[5]=RETROPAD_R;
+   } else {
+     Buttons_mapping[0]=RETROPAD_A;
+     Buttons_mapping[1]=RETROPAD_B;
+     Buttons_mapping[2]=RETROPAD_X;
+     Buttons_mapping[3]=RETROPAD_Y;
+     Buttons_mapping[4]=RETROPAD_L;
+     Buttons_mapping[5]=RETROPAD_R;
+   }
 
    if (
          (core_stricmp(machine.system().name, "tekken") == 0) ||
@@ -1124,7 +1138,7 @@ static void Input_Binding(running_machine &machine)
       Buttons_mapping[5]=RETROPAD_A;
 
    }
-   else if (
+   else if (  !RB_JAMMA(retro_input_device_type[player]) && (
               (core_stricmp(machine.system().name, "dstlk") == 0) ||
               (core_stricmp(machine.system().parent, "dstlk") == 0) ||
               (core_stricmp(machine.system().name, "hsf2") == 0) ||
@@ -1181,7 +1195,7 @@ static void Input_Binding(running_machine &machine)
               (core_stricmp(machine.system().parent, "xmcota") == 0) ||
               (core_stricmp(machine.system().name, "xmvsf") == 0) ||
               (core_stricmp(machine.system().parent, "xmvsf") == 0)
-           )
+           ))
    {
       /* Capcom CPS-1 and CPS-2 6-button fighting games */
 
@@ -1283,13 +1297,28 @@ static void Input_Binding(running_machine &machine)
            )
    {
       /* Neo Geo */
-
-      Buttons_mapping[0]=RETROPAD_B;
-      Buttons_mapping[1]=RETROPAD_A;
-      Buttons_mapping[2]=RETROPAD_Y;
-      Buttons_mapping[3]=RETROPAD_X;
-      Buttons_mapping[4]=RETROPAD_L;
-      Buttons_mapping[5]=RETROPAD_R;
+      if(retro_input_device_type[player] == RETRO_RB_JAMMA_NEOLINE){
+        Buttons_mapping[0] = RETROPAD_X;
+        Buttons_mapping[1] = RETROPAD_B;
+        Buttons_mapping[2] = RETROPAD_A;
+        Buttons_mapping[3] = RETROPAD_Y;
+        Buttons_mapping[4] = RETROPAD_R;
+        Buttons_mapping[5] = RETROPAD_L;
+      } else if (retro_input_device_type[player] == RETRO_RB_JAMMA_NEOSQUARE) {
+        Buttons_mapping[0] = RETROPAD_B;
+        Buttons_mapping[1] = RETROPAD_X;
+        Buttons_mapping[2] = RETROPAD_A;
+        Buttons_mapping[3] = RETROPAD_L;
+        Buttons_mapping[4] = RETROPAD_Y;
+        Buttons_mapping[5] = RETROPAD_R;
+      } else {
+        Buttons_mapping[0] = RETROPAD_B;
+        Buttons_mapping[1] = RETROPAD_A;
+        Buttons_mapping[2] = RETROPAD_Y;
+        Buttons_mapping[3] = RETROPAD_X;
+        Buttons_mapping[4] = RETROPAD_L;
+        Buttons_mapping[5] = RETROPAD_R;
+      }
    }
    else if (
               (core_stricmp(machine.system().name, "kinst") == 0) ||
