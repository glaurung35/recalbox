--- a/engines/scumm/gfx.cpp	2024-05-07 23:22:23.934459419 +0200
+++ b/engines/scumm/gfx.cpp.new	2024-05-07 23:03:18.125150083 +0200
@@ -4071,13 +4071,10 @@
 #pragma mark -
 
 void ScummEngine::fadeIn(int effect) {
-	if (_disableFadeInEffect || (_game.id == GID_MANIAC && _game.platform == Common::kPlatformAmiga)) {
+	if (_disableFadeInEffect) {
 		// fadeIn() calls can be disabled in TheDig after a SMUSH movie
 		// has been played. Like the original interpreter, we introduce
 		// an extra flag to handle this.
-
-		// Screen fades are also disabled in the Amiga version of
-		// Maniac Mansion, verified on WinUAE
 		_disableFadeInEffect = false;
 		_doEffect = false;
 		_screenEffectFlag = true;
@@ -4129,14 +4126,6 @@
 }
 
 void ScummEngine::fadeOut(int effect) {
-	// Screen fades are disabled in the Amiga version of
-	// Maniac Mansion, verified on WinUAE
-	if (_game.id == GID_MANIAC && _game.platform == Common::kPlatformAmiga) {
-		_doEffect = false;
-		_screenEffectFlag = false;
-		return;
-	}
-
 	towns_waitForScroll(0);
 
 	VirtScreen *vs = &_virtscr[kMainVirtScreen];
@@ -4217,6 +4206,11 @@
 	int delay, numOfIterations;
 	const int height = MIN((int)_virtscr[kMainVirtScreen].h, _screenHeight);
 
+	if (_game.id == GID_MANIAC && _game.platform == Common::kPlatformAmiga) {
+		// No transitions in the Amiga version of Maniac Mansion, verified on WinUAE.
+		return;
+	}
+
 	if (VAR_FADE_DELAY == 0xFF) {
 		if (_game.platform == Common::kPlatformC64) {
 			delay = kC64Delay;
@@ -4297,7 +4291,7 @@
 		// Draw the current state to the screen and wait
 		// for the appropriate number of quarter frames
 		if (!_fastMode) {
-			waitForTimer(delay, true);
+			waitForTimer(delay);
 		}
 	}
 }
@@ -4455,9 +4449,9 @@
 		if (canHalt) {
 			canHalt = false;
 			if (_game.platform == Common::kPlatformAmiga) {
-				waitForTimer(4, true);
+				waitForTimer(4);
 			} else {
-				waitForTimer(1, true);
+				waitForTimer(1);
 			}
 		}
 	}
@@ -4518,7 +4512,7 @@
 					vs->w * m, step * m);
 			}
 
-			waitForTimer(delay, true);
+			waitForTimer(delay);
 			y += step;
 		}
 		break;
@@ -4540,7 +4534,7 @@
 					vs->w * m, step * m);
 			}
 
-			waitForTimer(delay, true);
+			waitForTimer(delay);
 			y += step;
 		}
 		break;
@@ -4556,7 +4550,7 @@
 				(vs->w - step) * m, 0,
 				step * m, vs->h * m);
 
-			waitForTimer(delay, true);
+			waitForTimer(delay);
 			x += step;
 		}
 		break;
@@ -4572,7 +4566,7 @@
 				0, 0,
 				step, vs->h);
 
-			waitForTimer(delay, true);
+			waitForTimer(delay);
 			x += step;
 		}
 		break;
