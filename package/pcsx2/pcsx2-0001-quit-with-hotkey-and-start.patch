diff --git a/pcsx2/PAD/Linux/SDL/joystick.cpp b/pcsx2/PAD/Linux/SDL/joystick.cpp
index 0e32c1fcb..87d271dda 100644
--- a/pcsx2/PAD/Linux/SDL/joystick.cpp
+++ b/pcsx2/PAD/Linux/SDL/joystick.cpp
@@ -24,6 +24,9 @@
 // opens handles to all possible joysticks
 void JoystickInfo::EnumerateJoysticks(std::vector<std::unique_ptr<GamePad>>& vjoysticks)
 {
+    fprintf(stderr, "Tagada! pf\n");
+	fprintf(stderr, "PAD: failed to open joystick\n");
+
 	uint32_t flag = SDL_INIT_JOYSTICK | SDL_INIT_HAPTIC | SDL_INIT_EVENTS | SDL_INIT_GAMECONTROLLER;
 
 	if ((SDL_WasInit(0) & flag) != flag)
@@ -277,6 +280,7 @@ bool JoystickInfo::TestForce(float strength = 0.60)
 
 int JoystickInfo::GetInput(gamePadValues input)
 {
+    Console.Error("GetInput()");
 	float k = g_conf.get_sensibility() / 100.0; // convert sensibility to float
 
 	// Handle analog inputs which range from -32k to +32k. Range conversion is handled later in the controller
diff --git a/pcsx2/PAD/Linux/linux.cpp b/pcsx2/PAD/Linux/linux.cpp
index ada5a99c5..e4352da11 100644
--- a/pcsx2/PAD/Linux/linux.cpp
+++ b/pcsx2/PAD/Linux/linux.cpp
@@ -18,7 +18,7 @@
 #include "PAD.h"
 #include "keyboard.h"
 #include "state_management.h"
-
+#include "SDL/joystick.h"
 #include <string.h>
 #include "wx_dialog/dialog.h"
 
@@ -58,6 +58,8 @@ void _PADclose()
 	s_vgamePad.clear();
 }
 
+#include "App.h"
+static int exitValue = 0;
 void PollForJoystickInput(int cpad)
 {
 	int index = GamePad::uid_to_index(cpad);
@@ -72,10 +74,31 @@ void PollForJoystickInput(int cpad)
 	{
 		s32 value = gamePad->GetInput((gamePadValues)i);
 		if (value != 0)
-			g_key_status.press(cpad, i, value);
+        {
+            g_key_status.press(cpad, i, value);
+            if ((gamePadValues)i == gamePadValues::PAD_START) exitValue |= 1;
+            if ((gamePadValues)i == gamePadValues::PAD_SELECT) exitValue |= 2;
+        }
 		else
-			g_key_status.release(cpad, i);
+        {
+            g_key_status.release(cpad, i);
+            if ((gamePadValues)i == gamePadValues::PAD_START) exitValue &= ~1;
+            if ((gamePadValues)i == gamePadValues::PAD_SELECT) exitValue &= ~2;
+        }
 	}
+    Console.WriteLn("exitValue: %d", exitValue);
+    if (exitValue == 3)
+    {
+		Pcsx2App::GetInstance()->Exit();
+		//Pcsx2App::OnExit();
+		//wxExit();
+		Console.WriteLn("exitValue: %d", exitValue);
+		//exit(0);
+		//wxApp::GetInstance()->Exit();
+        //SDL_Event event;
+        //event.type = SDL_QUIT;
+        //SDL_PushEvent(&event);
+    }
 }
 
 void PADupdate(int pad)
@@ -92,6 +115,7 @@ void PADupdate(int pad)
 		XResetScreenSaver(GSdsp);
 	}
 #endif
+    Console.WriteLn("PADupdate");
 
 	// Actually PADupdate is always call with pad == 0. So you need to update both
 	// pads -- Gregory
@@ -119,6 +143,7 @@ void PADupdate(int pad)
 
 void PADconfigure()
 {
+    Console.WriteLn("PADconfigure");
 	ScopedCoreThreadPause paused_core;
 	PADLoadConfig();
 
diff --git a/pcsx2/PAD/Linux/state_management.cpp b/pcsx2/PAD/Linux/state_management.cpp
index a077d0081..fbed2ee34 100644
--- a/pcsx2/PAD/Linux/state_management.cpp
+++ b/pcsx2/PAD/Linux/state_management.cpp
@@ -165,6 +165,7 @@ u8 pad_start_poll(u8 pad)
 
 u8 pad_poll(u8 value)
 {
+    //Console.WriteLn("Poll");
 	if (query.lastByte + 1 >= query.numBytes)
 	{
 		return 0;
diff --git a/pcsx2/USB/usb-pad/usb-pad.cpp b/pcsx2/USB/usb-pad/usb-pad.cpp
index 2454fddaa..c2b744efb 100644
--- a/pcsx2/USB/usb-pad/usb-pad.cpp
+++ b/pcsx2/USB/usb-pad/usb-pad.cpp
@@ -303,6 +303,10 @@ namespace usb_pad
 
 	int pad_open(USBDevice* dev)
 	{
+		//g40&Console.WriteLn("pad_open! wl");
+		//printf("pad_open! pf\n");
+		//fputs("pad_open! fpf\n", 0);
+
 		PADState* s = (PADState*)dev;
 		if (s)
 			return s->pad->Open();
@@ -531,6 +535,10 @@ namespace usb_pad
 
 	USBDevice* PadDevice::CreateDevice(int port)
 	{
+		//Console.WriteLn("CreateDevice! wl");
+		//printf("CreateDevice! pf\n");
+		//fputs("CreateDevice! fpf\n", 0);;;
+
 		std::string varApi;
 #ifdef _WIN32
 		std::wstring tmp;
