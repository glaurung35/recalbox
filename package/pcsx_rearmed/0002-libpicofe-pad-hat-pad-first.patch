From 939087fd43c1dfdc8d9b426943eeb796473ae1b6 Mon Sep 17 00:00:00 2001
From: David Barbion <davidb@230ruedubac.fr>
Date: Thu, 4 Nov 2021 22:06:42 +0100
Subject: [PATCH 2/2] libpicofe-pad-hat-pad-first

---
 in_sdl.c | 61 ++++++++++++++++++++++++++++++++++++++++++++++----------
 1 file changed, 50 insertions(+), 11 deletions(-)

diff --git a/in_sdl.c b/in_sdl.c
index a84c781..98d41f9 100644
--- a/frontend/libpicofe/in_sdl.c
+++ b/frontend/libpicofe/in_sdl.c
@@ -177,16 +177,6 @@ static void in_sdl_probe(const in_drv_t *drv)
 	if (pdata->key_names)
 		key_names = pdata->key_names;
 
-	state = calloc(1, sizeof(*state));
-	if (state == NULL) {
-		fprintf(stderr, "in_sdl: OOM\n");
-		return;
-	}
-
-	state->drv = drv;
-	in_register(IN_SDL_PREFIX "keys", -1, state, SDLK_LAST,
-		key_names, 0);
-
 	/* joysticks go here too */
 	SDL_InitSubSystem(SDL_INIT_JOYSTICK);
 
@@ -209,7 +199,17 @@ static void in_sdl_probe(const in_drv_t *drv)
 		in_register(name, -1, state, SDLK_LAST, key_names, 0);
 	}
 
-	if (joycount > 0)
+  state = calloc(1, sizeof(*state));
+  if (state == NULL) {
+    fprintf(stderr, "in_sdl: OOM\n");
+    return;
+  }
+
+  state->drv = drv;
+  in_register(IN_SDL_PREFIX "keys", -1, state, SDLK_LAST,
+              key_names, 0);
+
+  if (joycount > 0)
 		SDL_JoystickEventState(SDL_ENABLE);
 }
 
@@ -280,6 +280,32 @@ static int handle_event(struct in_sdl_state *state, SDL_Event *event,
 	return 1;
 }
 
+static int need_hat_to_axis(SDL_Event* event)
+{
+  if (event->type == SDL_JOYHATMOTION) return 1;
+  return 0;
+}
+
+#define MAKE_EVENT(s, d, a, v) do{ d->type = SDL_JOYAXISMOTION; d->jaxis.which = s->jhat.which; d->jaxis.axis = a; d->jaxis.value = v; }while(0)
+
+static int hat_to_axis(SDL_Event* in, SDL_Event* out1, SDL_Event* out2)
+{
+  switch(in->jhat.value)
+  {
+    case SDL_HAT_CENTERED:  { MAKE_EVENT(in, out1, 0, 0); MAKE_EVENT(in, out2, 1, 0); printf("center\r\n"); return 2; }
+    case SDL_HAT_UP:        { MAKE_EVENT(in, out1, 1, -32768); printf("up\r\n"); return 1; }
+    case SDL_HAT_RIGHTUP:   { MAKE_EVENT(in, out1, 1, -32768); MAKE_EVENT(in, out2, 0, 32767); printf("rightup\r\n"); return 2; }
+    case SDL_HAT_RIGHT:     { MAKE_EVENT(in, out1, 0, 32767); printf("right\r\n"); return 1; }
+    case SDL_HAT_RIGHTDOWN: { MAKE_EVENT(in, out1, 1, 32767); MAKE_EVENT(in, out2, 0, 32767); printf("rightdown\r\n"); return 2; }
+    case SDL_HAT_DOWN:      { MAKE_EVENT(in, out1, 1, 32767); printf("down\r\n"); return 1; }
+    case SDL_HAT_LEFTDOWN:  { MAKE_EVENT(in, out1, 1, 32767); MAKE_EVENT(in, out2, 0, -32768); printf("leftdown\r\n"); return 2; }
+    case SDL_HAT_LEFT:      { MAKE_EVENT(in, out1, 0, -32768); printf("left\r\n"); return 1; }
+    case SDL_HAT_LEFTUP:    { MAKE_EVENT(in, out1, 1, -32768); MAKE_EVENT(in, out2, 0, -32768); printf("leftup\r\n"); return 2; }
+    default: break;
+  }
+  return 0;
+}
+
 static int handle_joy_event(struct in_sdl_state *state, SDL_Event *event,
 	int *kc_out, int *down_out, int *emu_out)
 {
@@ -371,6 +397,19 @@ static int collect_events(struct in_sdl_state *state, int *one_kc, int *one_down
 			break;
 		for (i = 0; i < count; i++) {
 			event = &events[i];
+
+			if (need_hat_to_axis(event))
+			{
+				SDL_Event newevent1, newevent2; printf("must convert\r\n");
+				int eventcount = hat_to_axis(event, &newevent1, &newevent2); printf("converted to %d events\r\n", eventcount);
+				if (eventcount != 0)
+				{
+					SDL_PushEvent(&newevent1);
+					if (eventcount > 1) SDL_PushEvent(&newevent2);
+				}
+				continue;
+			}
+
 			if (state->joy) {
 				ret = handle_joy_event(state,
 					event, one_kc, one_down, &is_emukey);
-- 
2.33.1

