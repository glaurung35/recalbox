From 556af6e4f86f80633d1abe7acdd9fe6e830f69b0 Mon Sep 17 00:00:00 2001
From: David Barbion <davidb@230ruedubac.fr>
Date: Thu, 4 Nov 2021 22:00:49 +0100
Subject: [PATCH 2/4] path-and-files

---
 frontend/main.c | 37 +++++++++++++++++++++++++------------
 frontend/main.h | 19 +++++++++++--------
 frontend/menu.c | 25 ++++++++++++++-----------
 3 files changed, 50 insertions(+), 31 deletions(-)

diff --git a/frontend/main.c b/frontend/main.c
index 4631618..03764b2 100644
--- a/frontend/main.c
+++ b/frontend/main.c
@@ -57,9 +57,9 @@ int hud_new_msg;
 static void make_path(char *buf, size_t size, const char *dir, const char *fname)
 {
 	if (fname)
-		snprintf(buf, size, ".%s%s", dir, fname);
+		snprintf(buf, size, "%s%s", dir, fname);
 	else
-		snprintf(buf, size, ".%s", dir);
+		snprintf(buf, size, "%s", dir);
 }
 #define MAKE_PATH(buf, dir, fname) \
 	make_path(buf, sizeof(buf), dir, fname)
@@ -103,13 +103,13 @@ void set_cd_image(const char *fname)
 static void set_default_paths(void)
 {
 #ifndef NO_FRONTEND
-	snprintf(Config.PatchesDir, sizeof(Config.PatchesDir), "." PATCHES_DIR);
+	snprintf(Config.PatchesDir, sizeof(Config.PatchesDir), PATCHES_DIR);
 	MAKE_PATH(Config.Mcd1, MEMCARD_DIR, "card1.mcd");
 	MAKE_PATH(Config.Mcd2, MEMCARD_DIR, "card2.mcd");
-	strcpy(Config.BiosDir, "bios");
+	strcpy(Config.BiosDir, BIOS_DIR);
 #endif
 
-	strcpy(Config.PluginsDir, "plugins");
+	strcpy(Config.PluginsDir, PLUGINS_DIR);
 	strcpy(Config.Gpu, "builtin_gpu");
 	strcpy(Config.Spu, "builtin_spu");
 	strcpy(Config.Cdr, "builtin_cdr");
@@ -463,17 +463,30 @@ void emu_core_ask_exit(void)
 
 #include <sys/stat.h>
 #include <sys/types.h>
+#include <errno.h>
+
+static void recursive_mkdir(char *path)
+{
+  if (strlen(path) == 0) return;
+  char *sep = strrchr(path, '/' );
+  if(sep != NULL)
+  {
+    *sep = 0; recursive_mkdir(path); *sep = '/';
+  }
+  if( mkdir(path, S_IRWXU | S_IRWXG) && errno != EEXIST )
+    printf("error while trying to create '%s'\n%m\n",path );
+}
 
 static void create_profile_dir(const char *directory) {
 	char path[MAXPATHLEN];
 
 	MAKE_PATH(path, directory, NULL);
-	mkdir(path, S_IRWXU | S_IRWXG);
+  recursive_mkdir(path);
 }
 
 static void check_profile(void) {
 	// make sure that ~/.pcsx exists
-	create_profile_dir(PCSX_DOT_DIR);
+	create_profile_dir(RECALBOX_PCSX);
 
 	create_profile_dir(BIOS_DIR);
 	create_profile_dir(MEMCARD_DIR);
@@ -482,8 +495,8 @@ static void check_profile(void) {
 	create_profile_dir(PLUGINS_CFG_DIR);
 	create_profile_dir(CHEATS_DIR);
 	create_profile_dir(PATCHES_DIR);
-	create_profile_dir(PCSX_DOT_DIR "cfg");
-	create_profile_dir("/screenshots/");
+	create_profile_dir(CFG_DIR);
+	create_profile_dir(SCREENSHOTS_PCSX);
 }
 
 static void check_memcards(void)
@@ -493,7 +506,7 @@ static void check_memcards(void)
 	int i;
 
 	for (i = 1; i <= 9; i++) {
-		snprintf(buf, sizeof(buf), ".%scard%d.mcd", MEMCARD_DIR, i);
+		snprintf(buf, sizeof(buf), "%scard%d.mcd", MEMCARD_DIR, i);
 
 		f = fopen(buf, "rb");
 		if (f == NULL) {
@@ -596,7 +609,7 @@ int main(int argc, char *argv[])
 		// FIXME: this recovery doesn't work, just delete bad config and bail out
 		// SysMessage("could not load plugins, retrying with defaults\n");
 		set_default_paths();
-		snprintf(path, sizeof(path), "." PCSX_DOT_DIR "%s", cfgfile_basename);
+		snprintf(path, sizeof(path), RECALBOX_PCSX "%s", cfgfile_basename);
 		remove(path);
 		SysMessage("Failed loading plugins!");
 		return 1;
@@ -753,7 +766,7 @@ void SysUpdate() {
 
 int get_state_filename(char *buf, int size, int i) {
 	return get_gameid_filename(buf, size,
-		"." STATES_DIR "%.32s-%.9s.%3.3d", i);
+		STATES_DIR "%.32s-%.9s.%3.3d", i);
 }
 
 int emu_check_state(int slot)
diff --git a/frontend/main.h b/frontend/main.h
index 7ce9e5d..e02310e 100644
--- a/frontend/main.h
+++ b/frontend/main.h
@@ -23,14 +23,17 @@
 
 #define DEFAULT_MEM_CARD_1 "/.pcsx/memcards/card1.mcd"
 #define DEFAULT_MEM_CARD_2 "/.pcsx/memcards/card2.mcd"
-#define MEMCARD_DIR "/.pcsx/memcards/"
-#define PLUGINS_DIR "/.pcsx/plugins/"
-#define PLUGINS_CFG_DIR "/.pcsx/plugins/cfg/"
-#define PCSX_DOT_DIR "/.pcsx/"
-#define STATES_DIR "/.pcsx/sstates/"
-#define CHEATS_DIR "/.pcsx/cheats/"
-#define PATCHES_DIR "/.pcsx/patches/"
-#define BIOS_DIR "/bios/"
+#define RECALBOX_ROOT     "/recalbox/share/"
+#define BIOS_DIR          RECALBOX_ROOT "bios/"
+#define MEMCARD_DIR       RECALBOX_ROOT "saves/pcsx/memcards/"
+#define STATES_DIR        RECALBOX_ROOT "saves/pcsx/sstates/"
+#define SCREENSHOTS_PCSX  RECALBOX_ROOT "screenshots/"
+#define RECALBOX_PCSX     RECALBOX_ROOT "system/configs/pcsx/"
+#define PLUGINS_DIR       "/usr/lib/pcsx_rearmed/plugins/"
+#define PLUGINS_CFG_DIR   RECALBOX_PCSX "cfg/"
+#define CHEATS_DIR        RECALBOX_PCSX "cheats/"
+#define PATCHES_DIR       RECALBOX_PCSX "patches/"
+#define CFG_DIR           RECALBOX_PCSX "cfg/"
 
 extern char cfgfile_basename[MAXPATHLEN];
 
diff --git a/frontend/menu.c b/frontend/menu.c
index 37956ff..ef4b07f 100644
--- a/frontend/menu.c
+++ b/frontend/menu.c
@@ -480,9 +480,9 @@ static char *get_cd_label(void)
 static void make_cfg_fname(char *buf, size_t size, int is_game)
 {
 	if (is_game)
-		snprintf(buf, size, "." PCSX_DOT_DIR "cfg/%.32s-%.9s.cfg", get_cd_label(), CdromId);
+		snprintf(buf, size, CFG_DIR "%.32s-%.9s.cfg", get_cd_label(), CdromId);
 	else
-		snprintf(buf, size, "." PCSX_DOT_DIR "%s", cfgfile_basename);
+		snprintf(buf, size, RECALBOX_PCSX "%s", cfgfile_basename);
 }
 
 static void keys_write_all(FILE *f);
@@ -539,7 +539,7 @@ static int menu_do_last_cd_img(int is_get)
 	FILE *f;
 	int i, ret = -1;
 
-	snprintf(path, sizeof(path), "." PCSX_DOT_DIR "lastcdimg.txt");
+	snprintf(path, sizeof(path), RECALBOX_PCSX "lastcdimg.txt");
 	f = fopen(path, is_get ? "r" : "w");
 	if (f == NULL) {
 		ret = -1;
@@ -696,14 +696,14 @@ fail:
 		if (memcard1_sel == 0)
 			strcpy(Config.Mcd1, "none");
 		else if (memcards[memcard1_sel] != NULL)
-			snprintf(Config.Mcd1, sizeof(Config.Mcd1), ".%s%s",
+			snprintf(Config.Mcd1, sizeof(Config.Mcd1), "%s%s",
 				MEMCARD_DIR, memcards[memcard1_sel]);
 	}
 	if ((unsigned int)memcard2_sel < ARRAY_SIZE(memcards)) {
 		if (memcard2_sel == 0)
 			strcpy(Config.Mcd2, "none");
 		else if (memcards[memcard2_sel] != NULL)
-			snprintf(Config.Mcd2, sizeof(Config.Mcd2), ".%s%s",
+			snprintf(Config.Mcd2, sizeof(Config.Mcd2), "%s%s",
 				MEMCARD_DIR, memcards[memcard2_sel]);
 	}
 	if (strcmp(mcd1_old, Config.Mcd1) || strcmp(mcd2_old, Config.Mcd2))
@@ -2409,10 +2409,13 @@ static void scan_bios_plugins(void)
 			continue;
 
 		snprintf(fname, sizeof(fname), "%s/%s", Config.BiosDir, ent->d_name);
-		if (stat(fname, &st) != 0 || st.st_size != 512*1024) {
-			printf("bad BIOS file: %s\n", ent->d_name);
-			continue;
-		}
+		if (strlen(ent->d_name) < 4) continue; // Not a PSX bios
+    if ((memcmp(ent->d_name, "scph", 4) != 0) && (memcmp(ent->d_name, "SCPH", 4) != 0)) continue; // Not a PSX bios
+    if (stat(fname, &st) != 0 || st.st_size != 512 * 1024)
+    {
+      printf("bad BIOS file: %s\n", ent->d_name);
+      continue;
+    }
 
 		if (bios_i < ARRAY_SIZE(bioses) - 1) {
 			bioses[bios_i++] = strdup(ent->d_name);
@@ -2477,7 +2480,7 @@ do_plugins:
 	closedir(dir);
 
 do_memcards:
-	dir = opendir("." MEMCARD_DIR);
+	dir = opendir(MEMCARD_DIR);
 	if (dir == NULL) {
 		perror("scan_bios_plugins memcards opendir");
 		return;
@@ -2497,7 +2500,7 @@ do_memcards:
 		if (ent->d_type != DT_REG && ent->d_type != DT_LNK)
 			continue;
 
-		snprintf(fname, sizeof(fname), "." MEMCARD_DIR "%s", ent->d_name);
+		snprintf(fname, sizeof(fname), MEMCARD_DIR "%s", ent->d_name);
 		if (stat(fname, &st) != 0) {
 			printf("bad memcard file: %s\n", ent->d_name);
 			continue;
-- 
2.33.1

