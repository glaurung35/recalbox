diff --git a/gfx/drivers_context/drm_ctx.c b/gfx/drivers_context/drm_ctx.c
index 182d0b4..4ddab3b 100644
--- a/gfx/drivers_context/drm_ctx.c
+++ b/gfx/drivers_context/drm_ctx.c
@@ -712,6 +712,10 @@ static bool gfx_ctx_drm_set_video_mode(void *data,
     * etc, so try to match that. */
    refresh_mod = 1.0f / (black_frame_insertion + 1.0f);
 
+   if (settings->uints.video_aspect_ratio_idx == ASPECT_RATIO_NATIVE_1920)
+   {
+      width = 1920;
+   }
    /* Find desired video mode, and use that.
     * If not fullscreen, we get desired windowed size,
     * which is not appropriate. */
@@ -764,6 +768,8 @@ static bool gfx_ctx_drm_set_video_mode(void *data,
       goto error;
    }
 
+   RARCH_LOG("[DRM]: mode selected: %d x %d, %f Hz\n", g_drm_mode->hdisplay, g_drm_mode->vdisplay, drm_calc_refresh_rate(g_drm_mode));
+
    drm->fb_width    = g_drm_mode->hdisplay;
    drm->fb_height   = g_drm_mode->vdisplay;
 
diff --git a/gfx/video_defines.h b/gfx/video_defines.h
index 33f94d5..ceaf197 100644
--- a/gfx/video_defines.h
+++ b/gfx/video_defines.h
@@ -56,6 +56,7 @@ enum aspect_ratio
    ASPECT_RATIO_CORE,
    ASPECT_RATIO_CUSTOM,
    ASPECT_RATIO_FULL,
+   ASPECT_RATIO_NATIVE_1920,
 
    ASPECT_RATIO_END
 };
diff --git a/gfx/video_thread_wrapper.c b/gfx/video_thread_wrapper.c
index 0336ddb..4234618 100644
--- a/gfx/video_thread_wrapper.c
+++ b/gfx/video_thread_wrapper.c
@@ -304,6 +304,7 @@ static bool video_thread_handle_packet(
 #endif
 
       case CMD_POKE_SET_VIDEO_MODE:
+         RARCH_LOG("[Video]: setting video mode from video thread wrapper: %dx%d\n", pkt.data.new_mode.width, pkt.data.new_mode.height);
          if (thr->poke && thr->poke->set_video_mode)
             thr->poke->set_video_mode(thr->driver_data,
                   pkt.data.new_mode.width,
diff --git a/retroarch.c b/retroarch.c
index 24905bf..e749261 100644
--- a/retroarch.c
+++ b/retroarch.c
@@ -30695,6 +30695,7 @@ static bool video_driver_init_internal(
 {
    video_info_t video;
    unsigned max_dim, scale, width, height;
+   unsigned rotation                      = 0;
    video_viewport_t *custom_vp            = NULL;
    input_driver_t *tmp                    = NULL;
    static uint16_t dummy_pixels[32]       = {0};
@@ -30717,6 +30718,28 @@ static bool video_driver_init_internal(
       scale  = p_rarch->video_driver_state_scale;
 #endif
 
+  // ASPECT_RATIO_NATIVE_1920 specific values
+  if (settings->uints.video_aspect_ratio_idx == ASPECT_RATIO_NATIVE_1920)
+  {
+      RARCH_LOG("[Video]: NATIVE Core provided resolution @ %ux%u, aspect ratio %f, framerate %f, rotation: %u\n", 
+         geom->base_width, 
+         geom->base_height, 
+         geom->aspect_ratio, 
+         p_rarch->video_driver_av_info.timing.fps,
+         runloop_state.system.rotation);
+
+    double input_fps = p_rarch->video_driver_av_info.timing.fps;
+    if(input_fps > 0.0)
+    {
+      RARCH_LOG("[Video]: Setting fps from core value : %f\n", input_fps);
+      settings->floats.video_refresh_rate = input_fps;
+    }
+    settings->floats.video_scale = 1;
+    if(runloop_state.system.rotation == 1){
+      RARCH_LOG("[Video]: setting rotation %u\n", runloop_state.system.rotation);
+       rotation = runloop_state.system.rotation;
+    }
+  }
    /* Update core-dependent aspect ratio values. */
    video_driver_set_viewport_square_pixel(geom);
    video_driver_set_viewport_core();
@@ -30724,6 +30747,8 @@ static bool video_driver_init_internal(
          settings->floats.video_aspect_ratio,
          settings->bools.video_aspect_ratio_auto);
 
+   video_driver_set_viewport_native_1920(rotation);
+
    /* Update CUSTOM viewport. */
    custom_vp = &settings->video_viewport_custom;
 
@@ -30745,7 +30770,7 @@ static bool video_driver_init_internal(
             aspectratio_lut[new_aspect_idx].value);
    }
 
-   if (settings->bools.video_fullscreen|| p_rarch->rarch_force_fullscreen)
+   if (settings->uints.video_aspect_ratio_idx != ASPECT_RATIO_NATIVE_1920 && (settings->bools.video_fullscreen|| p_rarch->rarch_force_fullscreen))
    {
       width  = settings->uints.video_fullscreen_x;
       height = settings->uints.video_fullscreen_y;
@@ -30773,9 +30798,28 @@ static bool video_driver_init_internal(
          else
             width  = roundf(geom->base_width   * video_scale);
          height    = roundf(geom->base_height  * video_scale);
+         if (settings->uints.video_aspect_ratio_idx == ASPECT_RATIO_NATIVE_1920){
+            // Rotation
+            if(rotation == 1)
+            {
+               RARCH_LOG("[Video]: rotating\n");
+               width = geom->base_height;
+               height = geom->base_width;
+            }
+            // Switch to 240p if height is above 224px
+            if(height < 224)
+            {
+               height = 240;
+               width = roundf(240.0f*geom->base_width/(float)geom->base_height);
+            }
+         }
+        
+          RARCH_LOG("[Video]: Set width and height to %ux%u video scale = %f\n", width, height, video_scale);
       }
    }
 
+
+
 #ifdef __WINRT__
    if (settings->bools.video_force_resolution)
    {
@@ -30802,7 +30846,8 @@ static bool video_driver_init_internal(
    video.width                       = width;
    video.height                      = height;
    video.fullscreen                  = settings->bools.video_fullscreen ||
-                                       p_rarch->rarch_force_fullscreen;
+                                       p_rarch->rarch_force_fullscreen ||
+                                       settings->uints.video_aspect_ratio_idx == ASPECT_RATIO_NATIVE_1920;
    video.vsync                       = settings->bools.video_vsync &&
       !runloop_state.force_nonblock;
    video.force_aspect                = settings->bools.video_force_aspect;
@@ -31387,7 +31432,6 @@ void video_driver_set_viewport_core(void)
 
    if (!geom || geom->base_width <= 0.0f || geom->base_height <= 0.0f)
       return;
-
    /* Fallback to 1:1 pixel ratio if none provided */
    if (geom->aspect_ratio > 0.0f)
       aspectratio_lut[ASPECT_RATIO_CORE].value = geom->aspect_ratio;
@@ -31396,6 +31440,36 @@ void video_driver_set_viewport_core(void)
          (float)geom->base_width / geom->base_height;
 }
 
+void video_driver_set_viewport_native_1920(unsigned rotation)
+{
+   struct rarch_state        *p_rarch   = &rarch_st;
+   struct retro_game_geometry *geom     = &p_rarch->video_driver_av_info.geometry;
+
+   if (!geom || geom->base_width <= 0.0f || geom->base_height <= 0.0f)
+      return;
+   unsigned width = rotation == 0 ? geom->base_width : geom->base_height;
+   unsigned height = rotation == 0 ? geom->base_height : geom->base_width;
+   
+   /* Set height to 240 if lower than 224 */
+   if(height < 224)
+   {
+      height = 240;
+      width = 240*width/height;
+   }
+   if (geom->aspect_ratio > 0.0f){
+      RARCH_LOG("[Video]: scaling for 4/3 screen : ((float)1920 / (%u *1.33))*%f\n", height , geom->aspect_ratio);
+      aspectratio_lut[ASPECT_RATIO_NATIVE_1920].value = ((double)1920 / (height *(4.0f/3.0f)))*geom->aspect_ratio;
+   }
+   else 
+   {
+      /* Fallback to 1:1 pixel ratio if none provided */
+      aspectratio_lut[ASPECT_RATIO_NATIVE_1920].value =
+         ((float)1920 / ((height*(4.0f/3.0f))/width)/width);
+   }
+   aspectratio_lut[ASPECT_RATIO_NATIVE_1920].value = aspectratio_lut[ASPECT_RATIO_NATIVE_1920].value*0.96;
+   RARCH_LOG("[Video]: set ASPECT_RATIO_NATIVE_1920 value to %f\n", aspectratio_lut[ASPECT_RATIO_NATIVE_1920].value);
+}
+
 void video_driver_set_viewport_full(void)
 {
    unsigned width = 0;
@@ -31486,6 +31560,8 @@ void video_driver_set_aspect_ratio(void)
    settings_t  *settings       = p_rarch->configuration_settings;
    unsigned  aspect_ratio_idx  = settings->uints.video_aspect_ratio_idx;
 
+   RARCH_LOG("[Video]: Setting aspect ratio\n");
+
    switch (aspect_ratio_idx)
    {
       case ASPECT_RATIO_SQUARE:
@@ -31496,6 +31572,10 @@ void video_driver_set_aspect_ratio(void)
          video_driver_set_viewport_core();
          break;
 
+      case ASPECT_RATIO_NATIVE_1920:
+         video_driver_set_viewport_native_1920(runloop_state.system.rotation);
+         break;
+
       case ASPECT_RATIO_CONFIG:
          video_driver_set_viewport_config(
                &p_rarch->video_driver_av_info.geometry,
diff --git a/retroarch.h b/retroarch.h
index 31104b4..2526f79 100644
--- a/retroarch.h
+++ b/retroarch.h
@@ -1571,6 +1571,8 @@ void video_driver_set_viewport_core(void);
 
 void video_driver_set_viewport_full(void);
 
+void video_driver_set_viewport_native_1920(unsigned rotation);
+
 void video_driver_reset_custom_viewport(void);
 
 void video_driver_set_rgba(void);
