diff --git a/configuration.c b/configuration.c
index a8424fb..41f53dd 100644
--- a/configuration.c
+++ b/configuration.c
@@ -1312,6 +1312,8 @@ static struct config_array_setting *populate_settings_array(settings_t *settings
    SETTING_ARRAY("discord_app_id",           settings->arrays.discord_app_id, true, DEFAULT_DISCORD_APP_ID, true);
    SETTING_ARRAY("ai_service_url",           settings->arrays.ai_service_url, true, DEFAULT_AI_SERVICE_URL, true);
    SETTING_ARRAY("crt_switch_timings",       settings->arrays.crt_switch_timings, false, NULL, true);
+   SETTING_ARRAY("crt_switch_timings_pal",   settings->arrays.crt_switch_timings_pal, false, NULL, true);
+   SETTING_ARRAY("crt_switch_timings_ntsc",  settings->arrays.crt_switch_timings_ntsc, false, NULL, true);
 #ifdef HAVE_LAKKA
    SETTING_ARRAY("cpu_main_gov",             settings->arrays.cpu_main_gov, false, NULL, true);
    SETTING_ARRAY("cpu_menu_gov",             settings->arrays.cpu_menu_gov, false, NULL, true);
@@ -2073,10 +2075,18 @@ static struct config_uint_setting *populate_settings_uint(
 #endif
    SETTING_UINT("audio_out_rate",               &settings->uints.audio_output_sample_rate, true, DEFAULT_OUTPUT_RATE, false);
    SETTING_UINT("custom_viewport_width",        &settings->video_viewport_custom.width, false, 0 /* TODO */, false);
+   SETTING_UINT("custom_viewport_width_ntsc",        &settings->video_viewport_custom.width_ntsc, false, 0 /* TODO */, false);
+   SETTING_UINT("custom_viewport_width_pal",        &settings->video_viewport_custom.width_pal, false, 0 /* TODO */, false);
    SETTING_UINT("crt_switch_resolution_super",  &settings->uints.crt_switch_resolution_super,      true, DEFAULT_CRT_SWITCH_RESOLUTION_SUPER, false);
    SETTING_UINT("custom_viewport_height",       &settings->video_viewport_custom.height, false, 0 /* TODO */, false);
+   SETTING_UINT("custom_viewport_height_ntsc",       &settings->video_viewport_custom.height_ntsc, false, 0 /* TODO */, false);
+   SETTING_UINT("custom_viewport_height_pal",       &settings->video_viewport_custom.height_pal, false, 0 /* TODO */, false);
    SETTING_UINT("custom_viewport_x",            (unsigned*)&settings->video_viewport_custom.x, false, 0 /* TODO */, false);
+   SETTING_UINT("custom_viewport_x_ntsc",            (unsigned*)&settings->video_viewport_custom.x_ntsc, false, 0 /* TODO */, false);
+   SETTING_UINT("custom_viewport_x_pal",            (unsigned*)&settings->video_viewport_custom.x_pal, false, 0 /* TODO */, false);
    SETTING_UINT("custom_viewport_y",            (unsigned*)&settings->video_viewport_custom.y, false, 0 /* TODO */, false);
+   SETTING_UINT("custom_viewport_y_ntsc",            (unsigned*)&settings->video_viewport_custom.y_ntsc, false, 0 /* TODO */, false);
+   SETTING_UINT("custom_viewport_y_pal",            (unsigned*)&settings->video_viewport_custom.y_pal, false, 0 /* TODO */, false);
    SETTING_UINT("content_history_size",         &settings->uints.content_history_size,   true, default_content_history_size, false);
    SETTING_UINT("video_hard_sync_frames",       &settings->uints.video_hard_sync_frames, true, DEFAULT_HARD_SYNC_FRAMES, false);
    SETTING_UINT("video_frame_delay",            &settings->uints.video_frame_delay,      true, DEFAULT_FRAME_DELAY, false);
diff --git a/configuration.h b/configuration.h
index cfac5c8..938795b 100644
--- a/configuration.h
+++ b/configuration.h
@@ -398,6 +398,8 @@ typedef struct settings
       char ai_service_url[PATH_MAX_LENGTH];
 
       char crt_switch_timings[255];
+      char crt_switch_timings_pal[255];
+      char crt_switch_timings_ntsc[255];
 #ifdef HAVE_LAKKA
       char timezone[TIMEZONE_LENGTH];
       char cpu_main_gov[32];
diff --git a/gfx/drivers_context/drm_ctx.c b/gfx/drivers_context/drm_ctx.c
index 182d0b4..74df96b 100644
--- a/gfx/drivers_context/drm_ctx.c
+++ b/gfx/drivers_context/drm_ctx.c
@@ -124,8 +124,31 @@ bool gfx_ctx_drm_load_mode(drmModeModeInfoPtr modeInfo)
    int ret;
    hdmi_timings_t timings;
    settings_t *settings = config_get_ptr();
+   float current_fps = settings->floats.video_refresh_rate;
+   char *crt_switch_timings_pal = settings->arrays.crt_switch_timings_pal;
+   char *crt_switch_timings_ntsc = settings->arrays.crt_switch_timings_ntsc;
    char *crt_switch_timings = settings->arrays.crt_switch_timings;
 
+   if(current_fps > 0.1f)
+   {
+      if(abs(60 - current_fps) < abs(50 - current_fps))
+      {
+         if(!string_is_empty(crt_switch_timings_ntsc))
+         {
+            RARCH_LOG("[DRM]: selected crt_switch_timings_ntsc\n");
+            crt_switch_timings = crt_switch_timings_ntsc;
+         }
+      }
+      else
+      {
+         if(!string_is_empty(crt_switch_timings_pal))
+         {
+            RARCH_LOG("[DRM]: selected crt_switch_timings_pal\n");
+            crt_switch_timings = crt_switch_timings_pal;
+         }
+      }
+   }
+
    if(modeInfo != NULL && !string_is_empty(crt_switch_timings)) {
       ret = sscanf(crt_switch_timings, "%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d",
                    &timings.h_active_pixels, &timings.h_sync_polarity, &timings.h_front_porch,
diff --git a/gfx/video_defines.h b/gfx/video_defines.h
index 33f94d5..38f8b58 100644
--- a/gfx/video_defines.h
+++ b/gfx/video_defines.h
@@ -143,9 +143,17 @@ enum text_alignment
 typedef struct video_viewport
 {
    int x;
+   int x_ntsc;
+   int x_pal;
    int y;
+   int y_ntsc;
+   int y_pal;
    unsigned width;
+   unsigned width_ntsc;
+   unsigned width_pal;
    unsigned height;
+   unsigned height_ntsc;
+   unsigned height_pal;
    unsigned full_width;
    unsigned full_height;
 } video_viewport_t;
diff --git a/retroarch.c b/retroarch.c
index bfb908a..152812c 100644
--- a/retroarch.c
+++ b/retroarch.c
@@ -30080,9 +30080,38 @@ static bool video_driver_init_internal(
    /* Update CUSTOM viewport. */
    custom_vp = &settings->video_viewport_custom;
 
+   float core_fps = settings->floats.video_refresh_rate;
+
    if (settings->uints.video_aspect_ratio_idx == ASPECT_RATIO_CUSTOM)
    {
       float default_aspect = aspectratio_lut[ASPECT_RATIO_CORE].value;
+      if(core_fps > 0.1f)
+      {
+         if(abs(60 - core_fps) < abs(50 - core_fps))
+         {
+            // NTSC
+            if(custom_vp->height_ntsc > 0)
+               custom_vp->height = custom_vp->height_ntsc;
+            if(custom_vp->y_ntsc > 0)
+               custom_vp->y = custom_vp->y_ntsc;
+            if(custom_vp->width_ntsc > 0)
+               custom_vp->width = custom_vp->width_ntsc;
+            if(custom_vp->x_ntsc > 0)
+               custom_vp->x = custom_vp->x_ntsc;
+         }
+         else
+         {
+            // PAL
+            if(custom_vp->height_pal > 0)
+               custom_vp->height = custom_vp->height_pal;
+            if(custom_vp->y_pal > 0)
+               custom_vp->y = custom_vp->y_pal;
+            if(custom_vp->width_pal > 0)
+               custom_vp->width = custom_vp->width_pal;
+            if(custom_vp->x_pal > 0)
+               custom_vp->x = custom_vp->x_pal;
+         }
+      }
       aspectratio_lut[ASPECT_RATIO_CUSTOM].value =
          (custom_vp->width && custom_vp->height) ?
          (float)custom_vp->width / custom_vp->height : default_aspect;
@@ -32992,6 +33021,8 @@ static void drivers_init(struct rarch_state *p_rarch,
 #endif
    bool video_is_threaded      = VIDEO_DRIVER_IS_THREADED_INTERNAL();
    gfx_display_t *p_disp       = &p_rarch->dispgfx;
+   struct retro_game_geometry *geom       = &p_rarch->video_driver_av_info.geometry;
+
 #if defined(HAVE_GFX_WIDGETS)
    bool video_font_enable      = settings->bools.video_font_enable;
    bool menu_enable_widgets    = settings->bools.menu_enable_widgets;
@@ -33006,6 +33036,30 @@ static void drivers_init(struct rarch_state *p_rarch,
       menu_st->data_own = true;
 #endif
 
+   double core_fps = p_rarch->video_driver_av_info.timing.fps;
+
+   if (!string_is_empty(settings->arrays.crt_switch_timings_pal)|| 
+      !string_is_empty(settings->arrays.crt_switch_timings_ntsc)|| 
+      !string_is_empty(settings->arrays.crt_switch_timings))
+   {
+      RARCH_LOG("[Video]: NATIVE Core provided resolution @ %ux%u, aspect ratio %f, framerate %f, rotation: %u\n",
+         geom->base_width,
+         geom->base_height,
+         geom->aspect_ratio,
+         p_rarch->video_driver_av_info.timing.fps,
+         runloop_state.system.rotation);
+      if(core_fps > 0.0)
+      {
+         RARCH_LOG("[Video]: Setting fps from core value : %f\n", core_fps);
+         settings->floats.video_refresh_rate = core_fps;
+      }
+      settings->floats.video_scale = 1;
+      if(runloop_state.system.rotation == 1){
+         RARCH_LOG("[Video]: setting rotation %u\n", runloop_state.system.rotation);
+         //rotation = runloop_state.system.rotation;
+      }
+   }
+
    if (flags & (DRIVER_VIDEO_MASK | DRIVER_AUDIO_MASK))
       driver_adjust_system_rates(p_rarch,
                                  settings->bools.vrr_runloop_enable,
